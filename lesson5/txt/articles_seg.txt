ASP NET   Core   快速 入门 环境 篇
申明 NET   Core 小白 Linux 小白 MySql 小白 nginx 小白 要说 精通 Linux     开机 关机 nginx 安装 部署 Core Hello   World  
入门 文章 园子 做 整理 备忘 目录 挑着 亲测 可行 多图 预警
vmware 虚拟机 安装
vmware 下载 360 软件 管家 下载 网上 找个 序列号
安装 12.1
安装 简单 一步
CentOS7.3 安装
下载 CentOS   http isoredirect centos org centos isos x86 64   选择 163 阿里 云 节点 速度 快点
下载 打开 vmware 安装
菜鸟 选择 界面
选好 安装 设置 密码 重启
Windows 客户端 软件
下载安装 Xshell   https www baidu com baidu word Xshell
下载安装 WinSCP   https www baidu com baidu word WinSCP   Xftp 记得 选 sftp 服务器 支持 ftp
CentOS 右键
第一个 命令 查看 IP
ifconfig   a
Xshell 操作
打开 Xshell
输入 用户名 密码 登录 root 登录
NET   Core1.1 安装
微软 资料   https www microsoft com net core linuxcentos
命令行 执行
sudo   yum   install   libunwind   libicu     安装 libicu 依赖
curl   sSL   o   dotnet tar gz   https go microsoft com fwlink linkid 848821   下载 sdk 压缩包   网速 慢
sudo   mkdir   p   opt dotnet   &&   sudo   tar   zxf   dotnet tar gz   C   opt dotnet   解压缩
sudo   ln   s   opt dotnet dotnet   usr local bin   创建 链接
dotnet   new   console   o   hwapp         初始化 示例 Hello   World 应用程序   稍微 耗时 点
cd   hwapp
dotnet   restore
dotnet   run       运行 应用程序
打印 hello   world 证明   net   core 环境 装好
小白 技巧
注释
shirf     insert   粘贴   ctrl     c   v   习惯
ctrl     insert   复制
nginx1.12 安装
curl   o     nginx rpm   http nginx org packages centos noarch RPMS nginx release centos el7 ngx noarch rpm
rpm   ivh   nginx rpm
yum   install   nginx   安装
systemctl   start   nginx   启动 nginx
systemctl   enable   nginx   设置 nginx 开机 启动
登录   CentOs 系统   打开 浏览器   输入   192.168 233.129   查到 IP
页面 代表 安装 成功
配置 防火墙
物理 机 浏览器 访问 发现 访问
是因为 CentOs 防火墙 拦截 打开 端口
firewall cmd   zone public   add port 80 tcp   permanent   开放 80 端口
systemctl   restart   firewalld   重启 防火墙 配置 即时 生效
访问 成功
部署 ASP NET   Core 应用程序
打开 VS2017   新建 net   core   项目
右键 发布 发布 先 跑
打开 WinSCP 下载
点击 登录 CentOs 系统 文件目录 随便 建个 文件夹 放 发布 发好 程序
右键 上传
命令 运行
cd   home NetCoreDemo   目录   输入 放 目录
dotnet   netcoreDemo dll     netcoreDemo dll   建 项目 生成 dll
5000   端口 网址 证明 部署
虚拟机 访问   http localhost 5000   ok
nginx   配置
说 nginx 说 干嘛 nginx 作用 先 iis web 服务器 做 转发
发现 http localhost 5000   访问 ip 访问 80 访问 nginx nginx 帮 访问 5000
打开 路径   etc nginx conf d
编辑 default conf   文件 内容 替换
server   {
listen   80
location     {
proxy pass   http localhost 5000
proxy http version   1.1
proxy set header   Upgrade   http upgrade
proxy set header   Connection   keep alive
proxy set header   Host   host
proxy cache bypass   http upgrade
nginx 添加 SELinux 白名单 会报 502 错误
nginx   s   reload   即时 生效
访问   http 192.168 233.130   centos   ip 一步 先 主动 触发 502 错误
yum   install   policycoreutils python     选 y
cat   var log audit audit log     grep   nginx     grep   denied     audit2allow   M   mynginx
semodule   i   mynginx pp
物理 机上 ip 访问 不用 端口 80     nginx   转到 5000
配置 守护 服务 Supervisor
yum   install   python setuptools
easy install   supervisor     安装 Supervisor
mkdir   etc supervisor
echo supervisord conf     etc supervisor supervisord conf     配置 Supervisor
文件
include
files     relative directory ini
改成 去掉 空格
include
files     conf d conf
目录   etc supervisor   新建   conf d 文件夹 conf d 文件夹 新建   netcoreDemo conf 文件
内容   第二行   第三行   注释 名字 填入
program netcoreDemo
command dotnet   netcoreDemo dll     运行 程序 命令
directory   home NetCoreDemo       项目 存放 目录 地方 好多 初学者 搞错
autorestart true     程序 意外 退出 自动 重启
stderr logfile var log WebApplication1 err log     错误 日志 文件
stdout logfile var log WebApplication1 out log     输出 日志 文件
environment ASPNETCORE ENVIRONMENT Production     进程 环境变量
user root     进程 执行 用户 身份
stopsignal INT
supervisord   c   etc supervisor supervisord conf
ps   ef     grep   netcoreDemo     netcoreDemo   program netcoreDemo   命名
supervisorctl   reload     加载
关掉 5000 界面 访问
配置 Supervisor 开机 启动
打开 目录   usr lib systemd system   新建 文件   supervisord service
内容
  dservice   for   systemd   CentOS   7.0
  by   ET CS   https github com ET CS
Unit
Description Supervisor   daemon
Service
Type forking
ExecStart usr bin supervisord   c   etc supervisor supervisord conf
ExecStop usr bin supervisorctl   shutdown
ExecReload usr bin supervisorctl   reload
KillMode process
Restart on failure
RestartSec 42s
Install
WantedBy multi user target
执行命令
systemctl   enable   supervisord
systemctl   is enabled   supervisord   验证 开机 启动
完工 电脑 不用 访问 部署 网站
MySql5.6 37 安装
http www cnblogs com starof p 4680083 html   我用 方法
安装 rar 压缩
下载   http www rarsoft com download htm
文件 放 服务器 cd 目录 执行
tar   zxvf   rarlinux x64 5.4 tar gz     rarlinux x64 5.4 tar gz 下载 文件名
cd   rar
make
rar   安装
安装 命令 解压 文件
cd   跳到 压缩 文件目录
rar   x   ceshi rar           解压 文件夹   ceshi rar 压缩文件 名
rar   a   abc rar   ceshi   压缩 文件夹     abc rar
CentOS 中 安装 完 rar 命令 自动 安装 zip 命令
cd   home   home 目录
zip   r   mydata zip   mydata             home 目录 mydata 目录 压缩 mydata zip
unzip   mydata zip   d   mydatabak   home 目录 mydata zip 解压 mydatabak 目录
zip   r   abc123 zip   abc   123 txt   home 目录 abc 文件夹 123 txt 压缩 abc123 zip
unzip   wwwroot zip                           home 目录 wwwroot zip 解压 home 目录
unzip   abc zip                               home 目录 abc12 zip abc23 zip abc34 zip 解压 home 目录
unzip   v   wwwroot zip                     查看 home 目录 wwwroot zip 内容
unzip   t   wwwroot zip                     验证 home 目录 wwwroot zip 完整
unzip   j   wwwroot zip                     home 目录 wwwroot zip 文件 解压 第一级 目录
常用 linux 命令
cd                                   目录 跳转
cd                                 回到 目录
ls                                   查看 目录 文件
df   h                             查看 文件 情况
mkdir                             创建 文件夹 文件夹
vi                                     编辑 文件
wq                               强制 保存 文件 退出 vi
ifconfig   a                 查看 ip
free   查看 系统资源 情况   http blog csdn net zhongluhuaok article details 52804187
firewall cmd   zone public   add port 80 tcp   permanent           开放 80 端口 端口
firewall cmd   zone public   remove port 80 tcp   permanent       关闭 端口
systemctl   restart   firewalld                                                                     重启 防火墙 生效
service   mysqld   restart   重启 mysql
nginx   s   reload                   nginx   生效
reboot                                     重启 系统
supervisorctl   start   program name       启动 进程 program name 配置 中写 程序 名称
supervisorctl   stop   program name         停止 某一 进程   program name 配置 中写 程序 名称
supervisorctl   reload                               重新启动 配置 中 程序
supervisorctl   stop   all                           停止 进程
supervisorctl   update                               更新 新 配置 supervisord
supervisorctl   restart   program name   重启 某一 进程   program name 配置 中写 程序 名称
supervisorctl                                             查看 守候 进程
http blog csdn net shudaqi2010 article details 51153961
clear                     刷新 终端 屏幕     ctrl     l
exit                       退出
shift     insert   粘贴
ctrl     insert     复制
补充
centos 升级   net   core   2.0   先 执行官 网 命令
curl   sSL   o   dotnet tar gz   https aka ms dotnet sdk 2.0 linux x64
mkdir   p   dotnet   &&   tar   zxf   dotnet tar gz   C   dotnet
export   PATH PATH HOME dotnet
删除 原有 文件夹
rm   rf   opt dotnet                                                             删除 原有 文件夹
rm   rf   usr local bin dotnet                                         删除 定义 dotnet 命令
sudo   ln   s   root dotnet dotnet   usr local bin       定义 dotnet 命令
项目 程序 升级 2.0 dotnet   dll 成功
结束
几天 感受 CentOS 开阔 世界 开启 net   core 好玩
打算 重写 Hi Blogs 系统
访问 地址 http haojima net   入手 做 留言板 聊天室 快去 体验 net   core   跑 阿里 云 linux
开源 地址 https github com zhaopeiym Hi Blogs
参考
http www cnblogs com ants p 5732337 html
http www cnblogs com keepcodingforever p 6642183 html
http www cnblogs com starof p 4680083 html
http www cnblogs com linjiqin archive 2013 03 24 2979897 html
健康 运动
程序 猿 媛 天天 坐在 电脑 旁边 运动量 时刻 接受 电脑 辐射 日子 长 健康 自然 近视眼 肩周炎 应是 常见 职业病 IT 界 有名 乔帮主 挂 国内 张孝祥 挂 年 38 李开复 淋巴癌 这是 大名鼎鼎 IT 草根 加班 猝死 时不时 新闻 程序 猿 媛 警觉 健康 身体 革命 本钱   身体 不好 拼不过 菜鸟 技术 热爱 天天 无休止 学习 当人 投入 一件 事情 时间 也许 天天 加班加点 提升 累 好像 充实 兴奋 身体 受
万事开头难 千里之行 始于足下 一点点 发现
分享 运动 情况 运动 做 有氧 运动 慢跑 爬山 滑冰 上海 山 只能 选择 跑步 滑冰 运动 有个 运动 记录 软件 那样的话 好像 有个 东西 督促 份 数据 特有 成就感
17 天 运动 数据 天气 下雨 加班 必跑 老早 去年 想 跑步 实在 时间 唯一 时间 周末 发现 周末 两天 实在 难 想 早上 跑 懒床 起不来 某次 偶然 晚上 有人 跑步 想 想 晚上 跑 说 实在 确实 很累 吃力 跑 眼都 看不清 脚 抬 缺氧 肚子 打翻 心想 付出 汗水 总会 回报 锻炼身体 更能 锻炼 毅力 回到 家里 起码 半个 小时 恢复 慢慢 十分钟 不到 呼吸 平稳 流汗
跑步 孤独 人多 更能 网友 约 跑友
更新 2016 07 10
距离 这篇 博文 发布 一年 更新 数据
事 贵在
跑步 一种 生活 汗流浃背 感觉 有多爽 轻松
跑 远 跑
时间 路程 速度
兔子 速度 只求 乌龟 精神
热爱 运动 农码 进群 咕咚 群 分享 心得
团号 11251918
ASP NET   Core   快速 入门 实战篇
上篇 讲 asp net   core linux 环境 部署 做 几个 小玩意 实战 用到 技术 工具 mysql websocket AngleSharp 爬虫 html 解析 nginx 站点 部署
NO1   留言板 mysql
演示 http haojima net
功能 简单 数据库 写入 展示 Windows 分 分钟 搞定 初次 接触 net   core     mysql 细节
打开 vs2017 新建 asp net   core 项目 选 Web 应用程序 nuget   导入 Microsoft EntityFrameworkCore Tools   1.1 MySql Data EntityFrameworkCore   8.0 dmr
新建 DbContext 类
public   class   DataContext     DbContext
{
连接 字符串 要加   sslmode none
string   str     Data   Source Database User   ID Password pooling true CharSet utf8 port 3306 sslmode none
protected   override   void   OnConfiguring DbContextOptionsBuilder   optionsBuilder  
optionsBuilder UseMySQL str
添加 数据库 实体
public   DbSet Message   Messages   {   get   set  
到此为止 利用 EF   Core 连接 mysql 增删 改查 操作 导入 命名 空间 using   Microsoft EntityFrameworkCore   using   MySQL Data EntityFrameworkCore Extensions
说 连接 字符串 硬 编码 代码 放 配置文件 appsettings json
{
Logging   {
IncludeScopes   false
LogLevel   {
Default   Warning
ConnectionStrings   {   SqlServerConnection   Data   Source Database User   ID Password pooling true CharSet utf8 port 3306 sslmode none  
硬 编码 注释 掉 Startup cs 文件 ConfigureServices 方法 添加
var   connection     Configuration GetConnectionString SqlServerConnection
services AddDbContext DataContext options     options UseMySQL connection
项目名称 路径 中文 乱七八糟
完整 代码 https github com zhaopeiym BlogDemoCode tree master MessageBoard
NO2   聊天室 WebSocket
演示 http socket haojima net
WebSocket Html5 新增 很酷 技术 简单 讲解 很酷 技术
var   Socket     new   WebSocket url 创建   WebSocket   对象
创建 WebSocket 对象 触发 打开 连接 事件
Socket onopen     function {    
onopen 事件 三个 事件
Socket onmessage     客户端 接收 服务端 数据 时 触发
Socket onerror         通信 发生 错误 时 触发
Socket onclose         连接 关闭 时 触发
两个 方法
Socket send       连接 发送数据
Socket close     关闭 连接
四个 连接 状态 属性
Socket readyState
    连接 尚未 建立
    连接 建立 通信
    连接 关闭
    连接 关闭 连接 打开
WebSocket 常用 功能 知识点 四个 事件 两个 方法 四种 状态 简单 asp net   core 后台 配合
后台 添加 SocketHandler 类 添加 静态方法 Map
  summary
  请求
  summary
  param   name app param
public   static   void   Map IApplicationBuilder   app
{
app UseWebSockets     nuget       导入   Microsoft AspNetCore WebSockets Server
app Use Acceptor
新增 Acceptor 方法
  summary
  接收 请求
  summary
  param   name httpContext param
  param   name n param
  returns returns
static   async   Task   Acceptor HttpContext   httpContext   Func Task   n
{
Startup cs 类 Configure 方法
app Map ws   SocketHandler Map       传入 新建 静态方法 Map
类 配置
操作 Acceptor 方法 接收 发送 消息
建立 连接
var   socket     await   httpContext WebSockets AcceptWebSocketAsync
等待 接收数据
await   socket ReceiveAsync new   ArraySegment byte buffer   CancellationToken None
发送 消息
await   socket SendAsync arraySegment   WebSocketMessageType Text   true   CancellationToken None
后台 关键 代码 三句 建立 连接 等待 接收 发送 消息
一点 理解 建立 连接 接收 任意 客户端 消息 ReceiveAsync 等待 接收 死循环 接收 消息 连接 断开 不用 担心 真的 死循环 消息 发送 代码 阻塞 等待 消息
完整 https github com zhaopeiym ChatRoom
NO3   找 工作 AngleSharp
演示 http job haojima net
爬虫 抓包 初次 接触 热衷于 例外
asp net   core 插件 答案 肯定
http www cnblogs com linezero p 5599611 html   HtmlAgilityPack   HTML 解析 感谢 博主对 net   core 贡献 xpath 超级 恶心
net 一款 Jumony   http www cnblogs com Ivony p 3447536 html 博客园 大牛 写 支持 CSS 选择 linq 查询 太爽 支持 net   core 试 迁移 net   core 发现 很多类 net   core
一款 支持 net   core 解析 组件 媲美 Jumony 支持 css 选择 linq 查询 AngleSharp
新建 项目 nuget   安装   AngleSharp 简单
using   HttpClient   http     new   HttpClient
{
var   htmlString     await   http GetStringAsync url
HtmlParser   htmlParser     new   HtmlParser
var   jobInfos     htmlParser Parse htmlString
QuerySelectorAll newlist list content   table
Where t     t QuerySelectorAll zwmc   a FirstOrDefault     null
Select t     new   JobInfo
{
PositionName     t QuerySelectorAll zwmc   a FirstOrDefault TextContent
CorporateName     t QuerySelectorAll gsmc   a FirstOrDefault TextContent
Salary     t QuerySelectorAll zwyx FirstOrDefault TextContent
WorkingPlace     t QuerySelectorAll gzdd FirstOrDefault TextContent
ToList
return   jobInfos
jq 解析 html 说 不爽 不信
完整 https github com zhaopeiym JobWanted
部署 多个 站点
项目 比较简单 关键技术 点 难点 分析 动起 手
有个 说 部署 应用程序 多个 部署
多个 程序 发布 包 放到 服务器
修改 nginx 配置文件 etc nginx conf d default conf
server   {
listen   80
server name   www haojima net                       域名
root   home projects messagBoard               程序 路径
location     {
proxy pass   http localhost 5000     内网 端口
proxy http version   1.1
proxy set header   Upgrade   http upgrade
proxy set header   Connection   keep alive
proxy set header   Host   host
proxy cache bypass   http upgrade
proxy set header   X real ip   remote addr
proxy set header   Upgrade   http upgrade
几个 程序 添加 几个 server 修改 解析 域名 程序 路径 内网 端口 配置 里 注释  
修改 supervisor 配置文件 etc supervisor conf d supervisord conf
program MessageBoard
command dotnet   MessageBoard dll                   运行 程序 命令
directory   home projects messagBoard     命令 执行 目录
autorestart true                                           程序 意外 退出 自动 重启
stderr logfile var log WebApplication1 err log     错误 日志 文件
stdout logfile var log WebApplication1 out log     输出 日志 文件
environment ASPNETCORE ENVIRONMENT Production     进程 环境变量
user root     进程 执行 用户 身份
stopsignal INT
几个 程序 复制 几份 program 修改 program 名称 名称 重复 修改   运行 程序 命令   dll 命令 执行 目录 配置文件 注释
部署 多个 程序
域名解析 解析 IP     端口 多个 域名解析 同一个 IP nginx 内部 做 域名 内网 端口 分发
细节
部署 阿里 云
linux 防火墙 开放 端口 发现 外面 访问 telnet   IP   端口   测试 阿里 云 拦截 https help aliyun com document detail 25471 html   组 添加 端口 IP 访问
mysql 客户端
mysql 安装 总 每次 命令 操作 Windows 有个 客户端 Navicat 方便管理 mysql Navicat
获取 ip
nginx 发现 取 不到 浏览器 IP 是因为 程序 浏览器 访问 nginx nginx 转发 网 程序 端口 取到 IP 网本机 IP 取 浏览器 IP nginx 配置
server   {
listen   80
server name   www haojima net
root   home projects messagBoard
location     {
proxy pass   http localhost 5000
proxy http version   1.1
proxy set header   Upgrade   http upgrade
proxy set header   Connection   keep alive
proxy set header   Host   host
proxy cache bypass   http upgrade
proxy set header   X real ip   remote addr             新 添加
代码 取 IP
var   ip     HttpContext Request Headers X real ip FirstOrDefault
WebSocket nginx 配置
写 WebSocket 运行 发现 部署 nginx 跑 是因为 nginx 支持 WebSocket 配置 http nginx org en docs http websocket html
server   {
listen   80
server name   job haojima net
root   home projects jobWanted
location     {
proxy pass   http localhost 5002
proxy http version   1.1
proxy set header   Upgrade   http upgrade
proxy set header   Connection   keep alive
proxy set header   Host   host
proxy cache bypass   http upgrade
proxy set header   X real ip   remote addr
proxy set header   Upgrade   http upgrade             新增
proxy set header   Connection   upgrade               新增
WebSocket 心跳
配置 WebSocket nginx 跑 万分 欢喜 发现 一分钟 发消息 自动 掉线 郁闷 至极 细心 同学 链接 资料
By   default   the   connection   will   be   closed   if   the   proxied   server   does   not   transmit   any   data   within   60   seconds   This   timeout   can   be   increased   with   the   proxy read timeout   directive   Alternatively   the   proxied   server   can   be   configured   to   periodically   send   WebSocket   ping   frames   to   reset   the   timeout   and   check   if   the   connection   is   still   alive
英文 实在 太烂
默认 情况 代理 服务器 60 秒 传输 数据 连接 关闭 proxy read timeout 指令 增加 超时   代理服务器 配置 定期 发送 WebSocket   ping 帧 重置 超时 检查 连接
nginx 给出 两种 解决方案 第一种 修改 proxy read timeout   默认 60 秒 第二种 浏览器 客户端 定时 发送 心跳 包 时间 短于 proxy read timeout
第二种 方式
第一种 简单 粗暴 时间 再长 值 超时 保证 浏览器 端 new   WebSocket 捣蛋
第二种 方式 浏览器 定时 发送 一条 消息 内容 后台 约定 发送 心跳 后台 接收 消息 判断 心跳 做
中文 编码
做 找 工作 爬 前程无忧 数据 时 发现 GBK 编码 net   core 中 默认 支持 格式 导致 取到 数据 乱码 nuget 安装 System Text Encoding CodePages Startup cs Configure 注册
Encoding RegisterProvider CodePagesEncodingProvider Instance 注册 编码 提供 程序
var   htmlBytes     await   http GetByteArrayAsync url
var   htmlString     Encoding GetEncoding GBK GetString htmlBytes
asp net   core   端口 分配
asp net   core   默认 端口 5000 运行 第二个 程序 提示 5000 端口 占用 程序 分配 端口
根目录 新建 json 文件 hosting json
{
server urls   http 5002
Program cs 文件 修改
public   static   void   Main string   args
{
var   config     new   ConfigurationBuilder
SetBasePath Directory GetCurrentDirectory
AddJsonFile hosting json   optional   true
Build
var   host     new   WebHostBuilder
UseKestrel
UseConfiguration config
UseContentRoot Directory GetCurrentDirectory
UseIISIntegration
UseStartup Startup
UseApplicationInsights
Build
host Run
爬 拉勾 数据
爬 拉勾 网 搞定 https 原因
using   HttpClient   http     new   HttpClient
{
var   url     https www lagou com zhaopin Java labelWords label
var   htmlString     await   http GetStringAsync url
net   core 中 报错 An   unhandled   exception   occurred   while   processing   the   request
net   4.5   中 抓 数据 页面 加载 中 浏览器 访问
原因 未知 大佬 解惑 感激不尽
参考
http www runoob com html html5 websocket html
http www cnblogs com liguobao p 6130121 html
http www cnblogs com linezero p 5806814 html
演示
http haojima net
http socket haojima net
http job haojima net
源码
https github com zhaopeiym JobWanted
https github com zhaopeiym ChatRoom
https github com zhaopeiym BlogDemoCode
Linux 学习 常用 快捷键 文件 管理 查询
有话要说
要用 Linux 要用 Linux 原因 太 想 说 说不完
说 Linux 装逼 证明 真的 菜 排除 有装 逼 因素 占 非常少 比例 忽略不计
反问 不用 Linux 回答 无非 图像 界面 操作 太 习惯 学习 新 系统 学习 成本
排斥 未知 恐惧 心底 抵触 找 理由 想 做好 一件 事 找 方法 不想 做 一件 事 找 理由
net   core 推出 Windows 玩玩 特别 多年 经验 net   er 快速 变化 危险 信号
一场 革命 革 不好 没命 微软 拥抱 Linux 想 玩 net   framework 说
Linux 世界 Linux 学习
Shell 技巧 常用 快捷键
Shift     insert                           粘贴
Ctrl     insert                             复制
Tab 按键   Ctrl     i       命令 补齐   快捷键 太 有用 linux 智能 提示
Ctrl     w                                       删除 前 单词
Ctrl     u                                       删除 光标 前 字符
Ctrl     k                                       删除 光标 字符
Ctrl     d                                       删除 光标 字符
Ctrl     y                                       删除 字符 粘
Ctrl     a                                       光标 行首
Ctrl     e                                       光标 行尾
←     ctrl     b                         光标 左
    Ctrl     f                         光标 右
    Ctrl     p                         显示 一条 命令
↓     ctrl     n                         显示 一条 命令
ctrl     s                                       暂时 冻结 输入
ctrl     q                                       解冻 解冻 自动 输入 输入
Ctrl     l                                       清屏
Ctrl     c                                       退出 执行命令 一行
Ctrl     d                                       退出 登录
Ctrl     z
命令
man   命令
原意 manual
语法 man   命令 配置文件
学习 linux 命令 太 记住 命令 man 命令 命令
示例
man     passwd       查看 命令   默认 省略
man     passwd       查看 配置文件
按下 光标 跑 地方 输入 搜寻 字串 n 查询 N 方向 查询
q 退出 空格 向下 翻页 pgup 向上 翻页
info   man
原意 information
语法 info   关键字
whatis   查询 信息 等效于 man   f
mandb   更新 whatis 数据库
help  
查询 shell 内置 命令   cd pwd
help   获取 选项 信息 常用
示例
root localhost     cat   help
用法 cat   选项   文件
文件 标准 输入 组合 输出 标准 输出
  show all                       等于 vET
b   number nonblank         非空 输出 行 编号
e                                               等于 vE
E   show ends                     每行 结束 处 显示
n   number                           输出 行 编号
s   squeeze blank             输出 多行 空行
t                                               vT   等价
T   show tabs                     跳格 字符 显示 I
u                                               忽略
命令 学习 诀窍
alias   别名
查看 别名 alias
命令 别名 alias   mycp cp
别名 窗口 命令 长期有效 修改 配置文件 bashrc root 目录
定制 个性 命令 重启 supervisorctl   reload 命令 记不住 太长 别名 alias   reloadsupervisorctl supervisorctl   reload 记住 reload tab 键 自动 补全
文件 管理 文件 搜索 命令
cd   切换 目录
原意 change   directo
语法 cd   目录
pwd   显示 当前目录
原意 print   working   directory
语法 pwd
目录
  代表 此层 目录 cd   dotnet     cd   dotnet 等效
  代表 一层 目录
  代表 前 工作 目录 上次 执行 cd 前 目录
  代表 使用者 身份 主 文件夹 执行 cd 等效
account   代表   account   使用者 主 文件夹   account 帐号 名称
示例
cd         cd   等效
cd       返回 上层 目录
cd         回到 上次 执行 cd 执行 前 目录
ls   显示目录 文件
  原意 list
  语法 ls   ald   文件 目录
touch   创建 空 文件
语法 touch   文件名
查看 文件 时间 信息
modification   time     mtime 内容 数据 变更 时
status   time     ctime 状态 改变 时
access   time     atime   文件 内容 取用 时
示例
root localhost   dotnet   ls   l   dotnet                             查看 dotnet 文件 创建 时间 默认 mtime
rwxr xr x     1002   27   105664   月     21   07 16   dotnet
root localhost   dotnet   ls   l   time atime   dotnet   查看 dotnet 文件 读取 时间
rwxr xr x     1002   27   105664   月     19   17 31   dotnet
root localhost   dotnet   ls   l   time ctime   dotnet   查看 dotnet 文件 状态 更新 时间
rwxr xr x     1002   27   105664   月     15   20 23   dotnet
mkdir   创建 新 目录
语法 mkdir   目录名
cp   复制 文件 目录
语法 cp   r   原文件 目录 目的 目录
示例
root localhost     cp   mytest txt   mytest2 txt   复制 mytest txt     mytest2 txt
root localhost     cp   project   project2               复制 文件夹 文件夹 内容 赋值 失败
cp   略过 目录 project
root localhost     cp   r   project   project2         复制 文件夹   带上   r 参数 递回 持续 复制
mv   文件 重命名
原意 move
语法 mv   源文件 目录   目的 目录
rm   删除 文件
原意 remove
语法 rm   rf   文件 目录       r 删除 目录   f 确认
示例
root localhost     rm   mytest2 txt           删除 文件 mytext2 txt 默认 给出 提示
rm 删除 文件   mytest2 txt y
root localhost     rm   f   mytest txt       删除 文件 提示 带上   f 参数
root localhost     rm   project2                 删除 目录
rm   删除 project2   目录
root localhost     rm   rf   project2         删除 目录 带上 r r 递回 删除 带上 f 确认 提示 一百个 文件 提示 一百次 疯
root localhost   project2   rm   System Xml                                 删除 System Xml 开头 文件
rm 删除 文件   System Xml ReaderWriter dll y
rm 删除 文件   System Xml XDocument dll y
cat   显示文件 内容
原意 Concatenate
语法 cat   文件名
示例
root localhost     cat   mytest test           查看 文件 mytest test
root localhost     cat   n   mytest test     n 显示 行号   类似 nl 命令
命令 有个 缺点 显示 信息 内容 过多 浏览
more   分页 显示文件 内容
语法 more   文件名
空格 f 显示 一页
回车 显示 一行
q 退出
示例
root localhost     more   三体 txt
输入     输入 关键字
跳过
相关 文章
三体 未获 雨果 奖  
三体 电影 上映 日程
行 搜索
less   分页 查询 more 强大
more   只能 翻 一页 less 翻页
参数
pagedown 向下 翻动 一页
pageup   向上 翻动 一页
字串   向下 搜寻 字串 功能
字串   向上 搜寻 字串 功能
n   重复 前 搜寻            
N   反向 重复 前 搜寻            
g   数据 第一行
G   数据 一行     大小写  
q   离开   less   程序
示例
root localhost     less     三体 txt
输入     输入 关键字   高亮 关键字
head   查看 文件 前 几行
语法 head   num   文件名
示例
root localhost     head   n     三体 txt       显示 前 五行
root localhost     head   n     三体 txt       显示 五行
tail   查看 文件 几行
语法 tail   num   文件名
ln   链接 文件
原意 link
语法 ln   s   源文件   目标 文件
示例
ln   s   home testfile   home testfile soft     创建 文件 软 链接 testfile soft
ls   s   home testfile   home testifle hard     创建 文件 硬 链接 testfile hard
which   显示 系统命令 目录
语法 which   命令 名称
示例
root localhost   dotnet   which   ifconfig
usr sbin ifconfig
find   查找文件 目录
语法 find   搜索 路径 搜索 关键字
a   逻辑   o   逻辑     name 文件名   size 文件大小   cteime 文件 修改 时间
示例
find   etc   name   init         查找 目录 名字 inti 文件
find   etc   size   204800   查找 目录 大于 100M 文件
find   etc   ctime             查找 24 小时 修改 属性 文件 目录
find   mytest   exec   ls   l   {     查看 当前目录 mytest 文件夹 文件 执行   ls   l   命令   exec   {   固定 格式
find   mytest   name   F   查找 mytest 文件夹 下以 F 开头 文件
find   mytest   name   F   查找 mytest 文件夹 下以 F 开头 文件名 四个 字母
locate   寻找 文件 目录
用法 locate   搜索 关键字
示例
root localhost   dotnet   locate   dotnet         查询 包含 dotnet 文件 目录
root localhost   dotnet   locate   Dotnet         查询 不到 区分 大小写
root localhost   dotnet   locate   i   Dotnet   查找 路径 文件名 包含 dotnet 关键字 文件 路径 区分 大小写
root localhost   dotnet   locate   ic   Dotnet 查询 搜索 数量
3661
查询 缓存 数据库 里 查询 updatedb 命令   建立 目录 文件 数据库 默认 更新
grep   文件 内容 中 搜索 匹配 行 输出
用法 grep   指定 字符串 源文件
示例
grep     testfile   搜索 当前目录 文件 testfile 中 包含 行
输入 输出 重定向
    输出 重定向
示例   ls   l     mytest txt   当前目录 文件 信息 写入 mytest txt 文件
    输入 重定向
示例 wall       mytest txt     mytest txt 文件 内容 广播 wall 广播 命令
    错误 重定向
示例 ggg     err txt               err txt 记录 错误信息   ggg 错误 命令
history   显示 历史 命令
  管道
ls 查询 文件 想要 分页 浏览 管道 命令
ls   l   etc     more                             分页 查看 etc 目录 文件
ls   l   etc     grep   init                   查看 etc 目录 文件名 包含 init 文件
ls   l   etc     grep   init     wc   l   查看 etc 目录 文件名 包含 init 文件 个数
命令 连接符
示例 cd   home     ls   跳转 home 目录 查看 文件 错误 命令 继续执行 命令
&&
示例 ggg   &&   ls   查看 目录 文件 错误 命令 执行 命令
示例 ggg     ls   执行 查看 目录 文件 执行 成功 命令 停止 执行 命令
命令 替换 符
用法 命令   命令
示例
ls   l   which   cd   查看 cd 命令 文件 信息 which 定位 命令 位置
netstat
netstat   lntp     查看 监听 Listen 端口
netstat   antp     查看 建立 TCP 连接
netstat   tunlp   查看 端口 情况       netstat   tunlp     grep   3306   查看 3306 端口
netstat   n     grep   tcp     grep   80     wc   l   监控 网络 客户 连接数
负载 信息
ps   eLf     grep   dotnet     wc   l                       监控 dotnet 线程 数
mpstat               查看 CPU 平均 信息 查看 指定 CPU 信息
top   u   mysql   查看 情况   键盘 数字 监控 逻辑 CPU 状况   http blog csdn net dxl342 article details 53507673
df   lh                         显示 硬盘 状况
firewall 防火墙
firewall cmd   zone public   add port 80 tcp   permanent           开放 80 端口
firewall cmd   zone public   remove port 80 tcp   permanent     关闭 80 端口
firewall cmd   reload                                                                                 载入 生效
systemctl   restart   firewalld                                                                     重启 防火墙
firewall cmd   zone public   list ports                                             查看 防火墙 开启 端口
http www cnblogs com moxiaoan p 5683743 html
  su   用户 切换
root localhost   dotnet   su   BennyZhao
BennyZhao localhost   dotnet   su   root
  图形界面 字符 界面 切换
init     切换 图形界面
init     切换 命令行 界面
  安装 rz
yum   install   lrzsz   安装 rz sz 命令
  curl 访问
curl                             访问
    之外 符号 文件 文件夹 命名 命名 大小写 敏感
yum   list   installed     grep   dotnet     查找 安装 程序
yum   remove   dotnet                                     卸载 安装 程序
推荐
博客 学习 适合 园友 学习
推荐 鸟哥 Linux   私房 菜 http linux vbird org linux basic 0220filemanager php   这是 网页 版 默认 繁体字 chrome 浏览器 自动 翻译成 简体 pocket 插件 手机 端 网上 PDF mobi 版
喜欢 视频 http study.163 com course introduction htm courseId 266032 courseDetail tab   李明 老师 视频 不错 下载 网易 云 课堂 手机 版 公交车 地铁
文件 下载 断点续传 客户端 服务端
讲 文件 上传 聊聊 文件 下载
老规矩 简单 粗暴 简单 算 简单 粗暴 算 粗暴 告诉 不写 一句 代码 信 文件 IIS 服务器 扔 支持 下载 TM 断点续传 IIS 服务端 默认 支持
贴 代码 先 断点续传 说 下载 断点续传 断点续传
断点续传 下载 一半 断网 暂停 下载 不用 从头开始 下载
神奇 简单 想想也是 想到
客户端 服务端 发送 请求 下载 文件 服务端 响应 请求 信息 包含 文件 总 大小 文件 流 结束 位置 内容 大小
HTTP 1.1 个头 属性 Range 发送 请求 带上 Range 199 等于 请求 199 之间 数据 服务器 响应 请求 Content Range   bytes   199 250   获取 199 之间 数据 总 大小 250 告诉 数据 下载 完
画个 图
简单 神奇 东西 约定 HTTP 协议
协议 东西 遵守 遵守 民国时期 钱 信 有用 大部分 人不信 没卵用
断点续传 服务端 遵守 支持 遵守 支持 断点续传 写 下载工具 判断 响应 报文 里 有没有 Content Range 支持 断点续传
废话 够 撸 袖子 开干
文件 下载 服务端
a 标签 提供 文件 下载
利用 a 标签 下载 文件 说 写 代码 下载 文件 iis 服务器 扔 链接 贴到 a 标签 完事
a   href 新建 文件夹 rar 下载 a
简单 粗暴 不用说 如真得 费力 写 下载 逻辑 有个 致命 缺点 方式 提供 下载 下载 权限 控制 说不定 还会 文件 扫描 好像 csdn 出过 档子 事
Response TransmitFile 提供 文件 下载
说 a 标签 提供 下载 提供 下载 asp net 默认 App Data 文件夹 访问 下载 文件 放 下载 读取 文件 返回 响应 流
文件 下载
public   void   FileDownload5
{
做 用户 登录 验证 用户 权限 验证
string   filename     数据 rar       客户端 保存 文件名
string   filePath     Server MapPath App Data 数据 rar 下载 文件 路径
Response ContentType     application octet stream     二进制 流
Response AddHeader Content Disposition   attachment filename     filename
Response TransmitFile filePath   指定 文件 写入   HTTP   响应 输出 流
方式 文件 下载
网上 搜索 C# 文件 下载 搜到 四种 方式 代码 拿来 坑
第一种 Response BinaryWrite
public   void   FileDownload2
{
string   fileName     新建 文件夹 rar 客户端 保存 文件名
string   filePath     Server MapPath App Data 新建 文件夹 rar 下载 文件 路径
Response ContentType     application octet stream 二进制 流
通知 浏览器 下载 文件 打开
Response AddHeader Content Disposition   attachment     filename     HttpUtility UrlEncode fileName   System Text Encoding UTF8
字符 流 形式 下载 文件
using   FileStream   fs     new   FileStream filePath   FileMode Open   FileAccess Read
{
Response AddHeader Content Length   fs Length ToString
内存 溢出
理论 数组 长度   int MaxValue   2147483647
分 不到 程序 能分 值 机器 winfrom   2147483591   相差 56 iis 2G iis   Express 100 MB
byte   bytes     new   byte int fs Length
fs Read bytes     bytes Length
Response BinaryWrite bytes
Response Flush
Response End
数组 长度 int MaxValue 程序 分 内存 搞 挂 服务器 下载 文件 极限值 最多 2G 不到 推荐
第二种 Response WriteFile
public   void   FileDownload3
{
string   fileName     新建 文件夹 rar 客户端 保存 文件名
string   filePath     Server MapPath App Data 新建 文件夹 rar 下载 文件 路径
FileInfo   fileInfo     new   FileInfo filePath
Response Clear
Response ClearContent
Response ClearHeaders
Response AddHeader Content Disposition   attachment filename     HttpUtility UrlEncode fileName   System Text Encoding UTF8    
Response AddHeader Content Length   fileInfo Length ToString 文件大小
Response AddHeader Content Transfer Encoding   binary
Response ContentType     application octet stream
Response WriteFile fileInfo FullName 大小 参数   Int32   值 之间 2G 操作 耗 内存
内存 溢出
Response Flush
Response End
第一种 类似 下载 大于 2G 文件 下载 2G 文件 时 机器 挂 边缘 恐怖 推荐
第三种 Response OutputStream Write
public   void   FileDownload4
{
string   fileName     数据 rar 客户端 保存 文件名
string   filePath     Server MapPath App Data 数据 rar 下载 文件 路径
if   System IO File Exists filePath
{
const   long   ChunkSize     102400   100K   每次 读取 文件 读取 100K 缓解 服务器 压力
byte   buffer     new   byte ChunkSize
Response Clear
using   FileStream   fileStream     System IO File OpenRead filePath
{
long   fileSize     fileStream Length   文件大小
Response ContentType     application octet stream   二进制 流
Response AddHeader Content Disposition   attachment   filename     HttpUtility UrlEncode fileName   System Text Encoding UTF8
Response AddHeader Content Length   fileStream Length ToString 文件 总 大小
while   fileSize       &&   Response IsClientConnected 判断 客户端 连接 服务器
{
读取 大小
int   readSize     fileStream Read buffer     Convert ToInt32 ChunkSize
Response OutputStream Write buffer     readSize
Response Flush 客户端   暂停 下载 时 阻塞
fileSize     fileSize     readSize 文件 剩余 大小
Response Close
循环 读取 输出 机智 下载 文件 时 压力 推荐
第四种 Response TransmitFile
举例 说 那种 下载 文件 压力 推荐
public   void   FileDownload5
{
做 用户 登录 验证 用户 权限 验证
string   filename     数据 rar       客户端 保存 文件名
string   filePath     Server MapPath App Data 数据 rar 下载 文件 路径
Response ContentType     application octet stream     二进制 流
Response AddHeader Content Disposition   attachment filename     filename
Response TransmitFile filePath   指定 文件 写入   HTTP   响应 输出 流
文件 下载 客户端
文件 下载 服务端 文件 下载 客户端 客户端 下载 浏览器 提供 下载 迅雷 写 下载 程序 更好 分析 来用 winfrom 程序 写个 下载 客户端
下载
private   async   void   button1 ClickAsync object   sender   EventArgs   e
{
using   HttpClient   http     new   HttpClient
{
var   httpResponseMessage     await   http GetAsync http localhost 813 新建 文件夹 rar 发送 请求   链接 a 标签 提供
var   contentLength     httpResponseMessage Content Headers ContentLength 读取 文件大小
using   var   stream     await   httpResponseMessage Content ReadAsStreamAsync 读取 文件 流
{
var   readLength     1024000 1000K     每次 读取 大小
byte   bytes     new   byte readLength
int   writeLength
while   writeLength     stream Read bytes     readLength     分块 读取 文件 流
{
using   FileStream   fs     new   FileStream Application StartupPath     temp rar   FileMode Append   FileAccess Write 追加 方式 打开 文件 流
{
fs Write bytes     writeLength 追加 写入 文件
contentLength     writeLength
if   contentLength     写入   给出 提示
MessageBox Show 下载
看着 漂亮 代码 好像 现实 事与愿违
异常 System Net Http HttpRequestException 缓冲区 写入 比所 配置 缓冲区 大小   2147483647   字节 鬼 2147483647 数字 下载 文件大小 超过 2G 缓冲 下载
缓冲 下载 鬼 试试 关掉 东东 答案 肯定
var   httpResponseMessage     await   http GetAsync http localhost 813 新建 文件夹 rar 发送 请求
改成
var   httpResponseMessage     await   http GetAsync http localhost 813 新建 文件夹 rar HttpCompletionOption ResponseHeadersRead 响应 可用 标题 可读 时 应 操作   尚未 读取 内容
枚举 HttpCompletionOption 两个 值 响应 读取 内容 响应 读取 标题 Headers 里 内容
异步 下载
发现 下载 文件 界面 假死 这是 UI 单线程 程序 通病 差 用户 体验 不能容忍 下载 开 线程 UI 线程 阻塞
  summary
  异步 下载
  summary
  param   name sender param
  param   name e param
private   async   void   button2 ClickAsync object   sender   EventArgs   e
{
开启 异步 线程
await   Task Run async    
{
异步 操作 UI 元素
label1 Invoke Action  
{
label1 Text     下载
long   downloadSize     下载 大小
long   downloadSpeed     下载速度
using   HttpClient   http     new   HttpClient
{
var   httpResponseMessage     await   http GetAsync http localhost 813 新建 文件夹 rar   HttpCompletionOption ResponseHeadersRead 发送 请求
var   contentLength     httpResponseMessage Content Headers ContentLength       文件大小
using   var   stream     await   httpResponseMessage Content ReadAsStreamAsync
{
var   readLength     1024000 1000K
byte   bytes     new   byte readLength
int   writeLength
var   beginSecond     DateTime Now Second 时间 秒
while   writeLength     stream Read bytes     readLength    
{
追加 方式 打开 文件 流
using   FileStream   fs     new   FileStream Application StartupPath     temp rar   FileMode Append   FileAccess Write
{
fs Write bytes     writeLength
downloadSize     writeLength
downloadSpeed     writeLength
progressBar1 Invoke Action  
{
var   endSecond     DateTime Now Second
if   beginSecond     endSecond 计算速度
{
downloadSpeed     downloadSpeed     endSecond     beginSecond
label1 Text     下载速度     downloadSpeed     1024     KB S
beginSecond     DateTime Now Second
downloadSpeed     清空
progressBar1 Value     Math Max int downloadSize     100     contentLength  
label1 Invoke Action  
{
label1 Text     下载
效果图
断点续传
方式 发现 下载 一个半 断网 下次 重头 下载 主题 不符 正式 主题 文件 下载 断点续传 说 头 属性 Range
var   request     new   HttpRequestMessage   {   RequestUri     new   Uri url  
request Headers Range     new   RangeHeaderValue rangeBegin   null   关键点 全局变量 记录 下载 下次 位置 下载
var   httpResponseMessage     await   http SendAsync request   HttpCompletionOption ResponseHeadersRead
完整 代码
  summary
  暂停
  summary
static   bool   isPause     true
  summary
  下载 位置 下载 位置
  summary
static   long   rangeBegin       值 存 持久 化 文本 数据库
private   async   void   button3 ClickAsync object   sender   EventArgs   e
{
isPause     isPause
if   isPause 点击 下载
{
button3 Text     暂停
await   Task Run async    
{
异步 操作 UI 元素
label1 Invoke Action  
{
label1 Text     下载
long   downloadSpeed     下载速度
using   HttpClient   http     new   HttpClient
{
var   url     http localhost 813 新建 文件夹 rar
var   request     new   HttpRequestMessage   {   RequestUri     new   Uri url  
request Headers Range     new   RangeHeaderValue rangeBegin   null   关键点 全局变量 记录 下载 下次 位置 下载
var   httpResponseMessage     await   http SendAsync request   HttpCompletionOption ResponseHeadersRead
var   contentLength     httpResponseMessage Content Headers ContentLength 本次 请求 内容 大小
if   httpResponseMessage Content Headers ContentRange     null   为空 服务器 支持 断点续传
{
contentLength     httpResponseMessage Content Headers ContentRange Length 服务器 文件大小
using   var   stream     await   httpResponseMessage Content ReadAsStreamAsync
{
var   readLength     1024000 1000K
byte   bytes     new   byte readLength
int   writeLength
var   beginSecond     DateTime Now Second 时间 秒
while   writeLength     stream Read bytes     readLength       &&   isPause
{
追加 方式 打开 文件 流
using   FileStream   fs     new   FileStream Application StartupPath     temp rar   FileMode Append   FileAccess Write
{
fs Write bytes     writeLength
downloadSpeed     writeLength
rangeBegin     writeLength
progressBar1 Invoke Action  
{
var   endSecond     DateTime Now Second
if   beginSecond     endSecond 计算速度
{
downloadSpeed     downloadSpeed     endSecond     beginSecond
label1 Text     下载速度     downloadSpeed     1024     KB S
beginSecond     DateTime Now Second
downloadSpeed     清空
progressBar1 Value     Math Max int rangeBegin     100     contentLength  
if   rangeBegin     contentLength
{
label1 Invoke Action  
{
label1 Text     下载
else 点击 暂停
{
button3 Text     下载
label1 Text     暂停 下载
效果图
断点续传
错 有没有 发现 下载 链接 a 标签 写 服务端 提供 下载 链接 支持 断点续传 我换个 下载 链接 试试 便知
断点续传 服务端 支持
测试
发现 支持 断点续传 a 标签 链接 支持 写 下载 支持
a 标签 链接 指向 iis 文件 iis 默认 支持 写 做 响应 报文 表头 Range 想象 中 智能  
说 断线 续传 HTTP 协议 遵守 遵守
修改 文件 下载 代码 服务端
public   void   FileDownload5
{
做 用户 登录 验证 用户 权限 验证
string   filename     数据 rar       客户端 保存 文件名
string   filePath     Server MapPath App Data 数据 rar 下载 文件 路径
var   range     Request Headers Range
if   string IsNullOrWhiteSpace range 遵守 协议 支持 断点续传
{
var   fileLength     new   FileInfo filePath Length 文件 总 大小
long   begin 文件 位置
long   end 文件 结束 位置
long TryParse range Split Split   out   begin
long TryParse range Split   out   end
end     end     begin         end     fileLength       结束 位置 读 剩下
表头       下载 文件 结束 位置   文件 总 大小
Response AddHeader Content Range   bytes       begin         end         fileLength
Response ContentType     application octet stream
Response AddHeader Content Disposition   attachment filename     filename
Response TransmitFile filePath   begin   end     begin 发送   文件 位置 读取 大小
else
{
Response ContentType     application octet stream
Response AddHeader Content Disposition   attachment filename     filename
Response TransmitFile filePath
测试 断点续传 完美 支持
多线程 下载 分片 下载
文件 断点续传 分析 完 细节 东西 需求 完善 文件 命名 断点续传 文件 发生 改变 下载 验证 文件 服务器
表头 属性 Range 多线程 下载 贴 代码 贴个 效果图 一篇 文件 上传 里 多线程 上传 同理 提供 demo 代码 下载 查看 内有 完整
参考资料
http www cnblogs com yank p HTTP Range html
http www cnblogs com sparkdev p 6141539 html
demo
https github com zhaopeiym BlogDemoCode tree master 上传下载
面对 疑似 网络 诈骗 维权 反 信用 钱包
受害人 群 增多 平台 依然 下载 相关 部门 依然 动作
反 信用 钱包 群 187865423
新浪 新闻
http comment5 news sina com cn comment skin default html channel cj newsid comos fxwvpar8410253
同步 知乎 提问 请求 园友 知乎 大佬 加速 扩散
https www zhihu com question 60349734 answer 175494684
文件 上传 离不开 表单
程序员 会要 用到 文件 上传 下载 功能 查资料 有木有 有木有 下次 做 备忘
利用 表单 文件 上传
原始 简单 粗暴 文件 上传
前端 代码
方式
form   action Home SaveFile1   method post   enctype multipart form data
input   type file   class file1   name file1  
button   type submit   class but1 上传 button
form
post 提交
enctype multipart form data   传输 文件
提交 表单 元素 设置   name   属性
后台 代码
public   ActionResult   SaveFile1
{
if   Request Files Count    
{
Request Files SaveAs Server MapPath App Data     Request Files FileName
return   Content 保存 成功
return   Content 读 文件
表单 异步 上传 jquery form 插件
方式 简单 粗暴 友好 页面 刷新 难以实现 停留 页面 给出 文件 上传 成功 提示
时间 流逝 技术 日新月异 ajax 异步 文件 提交 变得
利用 jquery form 插件 文件 异步 上传
导入 jquery js jquery form js
前端 代码
form   id form2   action Home SaveFile2   method post   enctype multipart form data
input   type file   class file1   name file1  
button   type submit   class but1 上传 button
button   type button   class but2 上传 button
form
方式 ajaxForm 绑定 ajax 操作
function     {
form2 ajaxForm {
success   function   responseText   {
alert responseText
方式 ajaxSubmit 执行 ajax 操作
function     {
but2 click function     {
form2 ajaxSubmit {
success   function   responseText   {
alert responseText
后台 代码
public   string   SaveFile2
{
if   Request Files Count    
{
Request Files SaveAs Server MapPath App Data     Path GetFileName Request Files FileName
return   保存 成功
return   读 文件
原理
插件 三七二十一
好奇心 想想 插件 随便 源码 一千五百多 行 妈呀 异步 上传
难以 鬼来 断点 调试
插件 内部 iframe FormData 方式 上传 版本 浏览器
模拟 表单 数据 上传 FormData
iframe 东西 太 恶心 利用 FormData 上传 文件 Html     试试
前端 代码
input   id fileinfo   type file   class notFormFile  
button   type button   class btnNotForm 上传 button
方式
btnNotForm click function     {
var   formData     new   FormData 初始化 FormData 对象
formData append files   notFormFile files 文件 塞入 FormData
ajax {
url   Home SaveFile2
type   POST
data   formData
processData   false       告诉 jQuery 发送 数据
contentType   false         告诉 jQuery 设置 Content Type 请求 头
success   function   responseText   {
alert responseText
代码 例 代码
public   string   SaveFile2
{
if   Request Files Count    
{
Request Files SaveAs Server MapPath App Data     Path GetFileName Request Files FileName
return   保存 成功
return   读 文件
FormData 对象 模拟 原始 表单 格式 数据 有没有 利用 表单 表单 格式 上传 文件 答案 肯定 揭晓
前端 代码
input   type file     id file5   multiple
button   type button   class btnFile5 上传 button
方式
btnFile5 click function     {
ajax {
url   Home SaveFile4
type   POST
data   file5 files
processData   false       告诉 jQuery 发送 数据
contentType   false         告诉 jQuery 设置 Content Type 请求 头
success   function   responseText   {
alert responseText
后台 代码
public   string   SaveFile4
{
发现 只能 网络 流 信息 文件大小 文件格式 文件名
Request SaveAs Server MapPath App Data SaveFile4 data       false
return   保存 成功
细心 发现 表单 格式 上传 文件 流 数据 外 告诉 后台 信息 文件格式
明白 上传 文件 要用 form 包 后台 约定 传输 格式
jq ajax 传输 文本 数据 组装 成 form 格式 数据
ajax {
data   {   userName   张三  
分片 上传
上传 满于 现状 no 传输 文件 服务器 大小
天 发现 激情 电影 想要 分享 无奈 高清 文件 太大传 化整为零 一部分一部分 传嘛 分片 上传
前端 代码
input   type file   id file6   multiple
button   type button   class btnFile6 分片 上传 button
div   class result div
方式
btnFile6 click function     {
var   upload     function   file   skip   {
var   formData     new   FormData 初始化 FormData 对象
var   blockSize     1000000 每块 大小
var   nextSize     Math min skip         blockSize   file size 读取 结束 位置
var   fileData     file slice skip     blockSize   nextSize 截取   文件   块
formData append file   fileData   文件   塞入 FormData
formData append fileName   file name 保存 文件 名字
ajax {
url   Home SaveFile6
type   POST
data   formData
processData   false       告诉 jQuery 发送 数据
contentType   false         告诉 jQuery 设置 Content Type 请求 头
success   function   responseText   {
result html 上传     skip         块 文件
if   file size     nextSize   { 上传 跳出 上传
alert 上传
return
upload file   ++ skip 递归 调用
var   file     file6 files
upload file  
后台 代码
public   string   SaveFile6
{
保存 文件 根目录   App Data     获取 文件名称 格式
var   filePath     Server MapPath App Data     Request Form fileName
创建 追加 FileMode Append 方式 文件 流
using   FileStream   fs     new   FileStream filePath   FileMode Append   FileAccess Write
{
using   BinaryWriter   bw     new   BinaryWriter fs
{
读取 文件 流
BinaryReader   br     new   BinaryReader Request Files InputStream
文件 留转成 字节 数组
byte   bytes     br ReadBytes int Request Files InputStream Length
字节 数组 追加 文件
bw Write bytes
return   保存 成功
代码 量 一点 一点 网上 分片 上传 代码 简单 文件 块 上传 断点续传 后台 文件 块 排序 上传 按序 合并 删除 临时文件 兴趣 同学 试试 稍候 分析 上传 插件 webuploader
效果图
想要 上传 多个 文件 H5 中 提供 非常简单 方式 input 标记 multiple input   type file   id file6   multiple 后台 接收 数组 Request Files
HTML5   拖拽 粘贴 上传
只能 说 H5 强大 权限 越来越 操作 越来越 牛 逼
前端 代码 拖拽 上传
textarea   class divFile7   style min width 800px height 150px   placeholder 请 文件 拖拽 粘贴 textarea
方式
divFile7 ondrop     function   event   {
event preventDefault 执行 事件 关联 默认 动作
var   files     event dataTransfer files 获取 拖上来 文件
代码
var   formData     new   FormData 初始化 FormData 对象
formData append files   files 文件 塞入 FormData
ajax {
url   Home SaveFile2
type   POST
data   formData
processData   false       告诉 jQuery 发送 数据
contentType   false         告诉 jQuery 设置 Content Type 请求 头
success   function   responseText   {
alert responseText
后台 代码
SaveFile2
前端 代码 粘贴 上传   限 图片格式
方式
divFile7 onpaste     function   event   {
event preventDefault 执行 事件 关联 默认 动作
var   clipboard     event clipboardData items 剪贴板 数据
if   clipboard kind     file     clipboard type indexOf image       { 判断 图片格式
var   imageFile     clipboard getAsFile 获取 文件
代码
var   formData     new   FormData
formData append files   imageFile
formData append fileName   temp png 文件 命个 名 后台 保存 命名
ajax {
url   Home SaveFile8
type   POST
data   formData
processData   false       告诉 jQuery 发送 数据
contentType   false         告诉 jQuery 设置 Content Type 请求 头
success   function   responseText   {
alert responseText
后台 代码
public   string   SaveFile8
{
保存 文件 根目录   App Data     获取 文件名称 格式
var   filePath     Server MapPath App Data     Request Form fileName
if   Request Files Count    
{
Request Files SaveAs filePath
return   保存 成功
return   读 文件
效果图
上传 插件 WebUploader
列举 分析 多种 上传 文件 方式 我想 总有 一种 适合 上传 功能 通用 写 好多 情况 简单 介绍 百度 WebUploader 插件
写 简单 上传 优势 稳定 兼容性 flash 切换 支持 IE 功能 并发 上传 断点续传 后台 配合
官网 http fex baidu com webuploader
插件 下载 https github com fex team webuploader releases download 0.1 webuploader 0.1 zip
WebUploader
第一种 简单 粗暴
前端 代码
div   id picker 选择 文件 div
button   id ctlBtn   class btn   btn default 上传 button
引用 webuploader js css
link   href Scripts webuploader 0.1 webuploader css   rel stylesheet  
script   src Scripts webuploader 0.1 webuploader js script
script   type text javascript
var   uploader     WebUploader create {
  新 浏览器   不用   flash
swf   Scripts webuploader 0.1 Uploader swf
  文件 接收 服务端
server   Webuploader SaveFile
  选择 文件 按钮 选
  内部 运行 创建 input 元素 flash
pick   picker
ctlBtn click function     {
uploader upload
uploader on uploadSuccess   function   file   {
alert 上传 成功
script
后台 代码
public   string   SaveFile
{
if   Request Files Count    
{
Request Files SaveAs Server MapPath App Data     Path GetFileName Request Files FileName
return   保存 成功
return   读 文件
第二种 分片 上传 写 效果
前端 代码
var   uploader     WebUploader create {
兼容 版本 IE
swf   Scripts webuploader 0.1 Uploader swf
  文件 接收 服务端
server   Webuploader SveFile2
  开起 分片 上传
chunked   true
分片 大小
chunkSize   1000000
上传 并发 数
threads  
  选择 文件 按钮
pick   picker
  点击 触发 上传
ctlBtn click function     {
uploader upload
uploader on uploadSuccess   function   file   {
alert 上传 成功
后台 代码
public   string   SveFile2
{
保存 文件 根目录   App Data     获取 文件名称 格式
var   filePath     Server MapPath App Data     Path GetFileName Request Files FileName
创建 追加 FileMode Append 方式 文件 流
using   FileStream   fs     new   FileStream filePath   FileMode Append   FileAccess Write
{
using   BinaryWriter   bw     new   BinaryWriter fs
{
读取 文件 流
BinaryReader   br     new   BinaryReader Request Files InputStream
文件 留转成 字节 数组
byte   bytes     br ReadBytes int Request Files InputStream Length
字节 数组 追加 文件
bw Write bytes
return   保存 成功
参数 threads   上传 并发 数 改成 大于 前端 发起 多个 文件 片 上传 后台 报错 多个 进程 操作 文件
想要 多线程 上传 改 代码 后台 逻辑
前端 代码
并发 上传 多线程 上传
var   uploader     WebUploader create {
兼容 版本 IE
swf   Scripts webuploader 0.1 Uploader swf
  文件 接收 服务端
server   Webuploader SveFile3
  开起 分片 上传
chunked   true
分片 大小
chunkSize   1000000
上传 并发 数
threads   10
  选择 文件 按钮
pick   picker
  点击 触发 上传
ctlBtn click function     {
uploader upload
uploader on uploadSuccess   function   file   {
上传 后台 发送 合并 文件 命令
ajax {
url   Webuploader FileMerge
data   {   fileName   file name  
type   post
success   function     {
alert 上传 成功
后台 代码
public   string   SveFile3
{
var   chunk     Request Form chunk 片
var   path     Server MapPath App Data     Path GetFileNameWithoutExtension Request Files
if   Directory Exists path 判断 路径 创建
{
Directory CreateDirectory path
保存 文件 根目录   App Data     获取 文件名称 格式
var   filePath     path         chunk
创建 追加 FileMode Append 方式 文件 流
using   FileStream   fs     new   FileStream filePath   FileMode Append   FileAccess Write
{
using   BinaryWriter   bw     new   BinaryWriter fs
{
读取 文件 流
BinaryReader   br     new   BinaryReader Request Files InputStream
文件 留转成 字节 数组
byte   bytes     br ReadBytes int Request Files InputStream Length
字节 数组 追加 文件
bw Write bytes
return   保存 成功
  summary
  合并 文件
  summary
  param   name path param
  returns returns
public   bool   FileMerge
{
var   fileName     Request Form fileName
var   path     Server MapPath App Data     Path GetFileNameWithoutExtension fileName
排序 正确 转 成 数字 排序 字符串   10   11 排序 默认 10
foreach   var   filePath   in   Directory GetFiles path OrderBy t     int Parse Path GetFileNameWithoutExtension t
{
using   FileStream   fs     new   FileStream Server MapPath App Data     fileName   FileMode Append   FileAccess Write
{
byte   bytes     System IO File ReadAllBytes filePath 读取 文件 字节 数组
fs Write bytes     bytes Length 写入 文件
System IO File Delete filePath
Directory Delete path
return   true
结束 错 好多 情况 多个 用户 上传 文件 名字 断点续传 选择 多个 文件 打算 贴 代码 贴下去 代码 量 越来越
提供 思路 上传 前先往 数据库 插入 一条 数据 数据 包含 文件 要存 路径 文件名 GUID 命名 同名 文件 冲突 文件 MD5 识别 下次 续传 秒 临时文件 块 存放 路径 文件 完整 上传 成功 信息
断网 获取 文件 MD5 值 数据库 上传 文件 秒 上传 新 文件
疑惑 上传 文件 要用 form 包 算是 明白
javascript 流行 时 submit 按钮 提交 表单 数据 表单 包含 文字 文件 js ajax 流行 利用 ajax 异步 提交 表单 数据 纠结 ajax 提交 组装 数据 提交 文件 我错 ajax 提交 随意 数据 组装 成 表单 格式 后台 技术 表单 格式 数据 支持 普及 现有 技术 js 组装 文件格式 表单 数据 H5 中 FormData 前端 js 组装 包含 文件 表单 格式 数据 说 表单 后台 约定 数据格式
相关 推荐
http www cnblogs com fish li archive 2011 07 17 2108884 html
http javascript ruanyifeng com htmlapi file html
demo
https github com zhaopeiym BlogDemoCode tree master 上传下载
写 博客
种种原因
写点 东西 冲动 种种原因 发表
写 写 挤不出 字
总 感觉 内心 想法 表达
感觉 写 没什么 明白 干嘛 写
写 笑话 喷 害怕
写 博客 费 脑力 耗时间 精力 再学 东西
几点 理解
第一点 万事开头难 做 事 最难 是从 零到 过程 跨过 自然 写 差 慢慢 感觉
第二点 表达能力 不行 正好 锻炼 表达能力 知识点 透彻 来龙去脉 前因后果 说不清 学习
第三点 写 博客 有用 多牛人 写 博客 遗忘 规律 烂 记于 心 东西 几个 月 说不定 模糊 反复 记忆 遗忘 做 斗争 不说 写个 数据库 ado 连接 写 写个 原生 ajax 写 读书 写 好多遍 工作 中 手动 写 忘记 写 博客 加深 记忆 忘记 查找 博客 很快 回忆 反复 学 学过 东西 过目不忘 接触 所学 牛人
第四点 笑 笑 牛 菜鸟 写 教程 写 笔记 写 心得 总 喷子 少不了 世上 蚊子 灭绝 正好 锻炼 强大 内心
第五 点 费 脑力 确实 耗时间 这是 值得 说 做 付出 后期 越写 越顺 脑力 时间 越用越少 平时 说话 自然
好处多多
结交 朋友 同档次 高于 档次 做 朋友 学到 近朱者赤 同道 朋友 一种 竞争 动力
博文 写成 道友 阅读 实际上 错误 东西 难以 发现 错误 热心 道友 帮 指出 这是 成长 机会
写 博客 过程 中 肯定 疑问 查资料 过程 引发 知识 疑问 引申 知识 学习
有心 无心 帮 初学者 感谢 肯定 满满的 美 虚荣心
博客 轨迹 成长 轨迹 做 过些 做 不忘 初心 迷失
一点 也许 博客 简历 技术水平 平时 关注 内容 评论 言辞 人品
写 博客
写 用心 写 说 写 牛 逼 起码 用心 长进 随意 滥竽充数 真的 浪费时间 用心 博文 慢慢 一篇篇 博文
假想 观众 写 东西 有人 读 起码 会读 读懂 基础 理念 读懂
想象 读者 初学者 懂 前提 写下 结论 注释 也许 写 代码 逻辑 清晰 明 几个 代码 理解 会标 注释 假想 对象 初学者 博客 进入状态 理解 表达
本书 计划 更好 这节 博文 方式 表达出来 读者 看得懂 有个 想法 看书 专心 原理 有时候 似懂非懂 情况 博文 形式 记录 读书笔记 会要 书 浏览 一遍 几个 月 忘记 读
注册 博客园 整整 五年 写 博客 一年 事情 没写 是因为 种种原因 一年 程序员 这条 道路 成长 最快 一年 说 写 博客 真的 想开 挂般 成长 真的 引发 东西 平时 做 东西 难以 东西 javascript 高级 程序设计 博文 笔记 形式 记下 所读 所解
附上 一副 图 平时 群里 群友 闲聊 时 镇 群图   一图 足以 解释 标题 疑问
写 博客 一点 心得 写 博客 心得 列举 肯定 不全 认同 正确 有用 道友 评论 区 写下 一点 心得 探讨 探讨
原文 链接 http www cnblogs com zhaopei p 4998937 html
本文 共鸣 请 轻轻 点个 赞 鼓励
园友 心得 评论
五月 仓颉
每次 写 博客 想到 博客 面向 网友 严谨 想 明白 知识点 随意 博客 一放 一句 话 想 知识点 弄懂 写上去 博客 一篇 Java 代码 性能 优化 文章 发表 草稿箱 放 至少 半个 月 思考 修改 发表 收到 好评 转载 博客 草稿箱 篇文章 搞懂 发布 角度 说 用心 写 博客 写 博客 提升 严谨 度 专业性 久而久之 技术 态度 潜移默化 生活 态度
相关 文章 推荐
写 技术 博 http www cnblogs com vamei archive 2012 11 17 2774208 html
写 技术 博客 新人 http blog csdn net oiio article details 6913156
写 博客 http blog csdn net pongba article details 3896311
鼓励 工程师 写 blog https news cnblogs com n 566179
HiBlogs 重写 笔记 DbContext 依赖 注入 自动 注入
本篇 文章 分析 DbContext 线程 唯一 ASP NET   Core 注入 自动 注入
DbContext 线程 唯一 非 线程
EF 相关 框架 封装 DbContext 有没有 想过 DbContext 正确 姿势
DbContext 访问 操作 数据表 跟踪 状态 SaveChanges 统一 提交 强大 功能 想 创建 销毁 付出 昂贵 代价
DataContext   轻量 创建 很大 开销
EF6 DbContext 文档   https msdn microsoft com zh cn library system data entity dbcontext v vs.113 aspx   有句 话   类型 公共   static   Visual   Basic   中为   Shared   成员 线程 保证 实例 成员 线程 DbContext 实例 保证 线程 多线程 操作 DbContext 实例 意想不到
文章   http www cnblogs com zhaopei p async two html  
iis iis   express 测试 是因为 访问速度 并发
点 体现 全局 静态 DbContext 实例 想过
线程 a 修改 实体 一半 线程 b 小心 保存 线程 c 修改 实体 线程 d 实体 小心 删 玩笑 开大 并发 越大 此类情况 越 DbContext 实例 只能 单个 线程 访问 执行 异步 方法 效率 提升 发起 多个 异步 查询
记住 DbContext 线程 类型 就够
每次 数据 操作 实例 新 DbContext 方法 a 中 DbContext 实例 查询 实体 修改 跟踪 实体 传入 方法 b 方法 b 实例 DbContext 方法 b 中 保存 方法 a 传过来 实体 做 方法 b 中 DbContext 方法 a 传过来 效果 线程 DbContext 实例 唯一
DbContext 线程 唯一 依赖 注入
EF   x 时
public   static   BlogDbContext   dbEntities
{
get
{
DbContext   dbContext     CallContext GetData dbContext   as   DbContext
if   dbContext     null
{
dbContext     new   BlogDbContext
新创建   ef 上下文 对象   存入 线程
CallContext SetData dbContext   dbContext
return   dbContext   as   BlogDbContext
EF   Core 中 CallContext CallContext 自带 注入 框架 线程 唯一
写个 demo
创建 类库 注入 DbContext web 注入 DbContext web 调用 类库 方法 验证 两个 DbContext GetHashCode 值
类 库内 获取 DbContext HashCode
namespace   DemoLibrary
{
public   class   TempDemo
{
BloggingContext   bloggingContext
public   TempDemo BloggingContext   bloggingContext
{
this bloggingContext     bloggingContext
获取 DbContext HashCode
public   int   GetDBHashCode
{
return   bloggingContext GetHashCode
web 注入 DbContext HashCode
public   IActionResult   Index
{
  获取 类库 中 DbContext 实例 Code
var   code1     tempDemo GetDBHashCode
  获取 web 启动项 中 DbContext 实例 Code
var   code2     bloggingContext GetHashCode
return   View
效果图
注入 DbContext 对象 同一个 起码 线程 同一个
反面 验证 new 关键字 实例 DbContext 对象 在线 程内 同一个
注入 方式 线程 唯一 注入 原理
不说 注入 定义 说 注入 好处 兴趣 查看 模拟 注入 功能
定义 接口 IUser 类 User
public   interface   IUser
{
string   GetName
public   class   User     IUser
{
public   string   GetName
{
return   农码 一生
方式 获取 User 实例
第一种 不用说 懂
第二种 第三种 DI 类 简易 注入 框架 DI 类中 Resolve 鬼
public   class   DI
{
反射   获取 实例     向上 转 成 接口类型
public   static   IUser   Resolve string   name
{
Assembly   assembly     Assembly GetExecutingAssembly 获取 代码 程序 集
return   IUser assembly CreateInstance name 写 死 创建 实例 后强 转 IUser
反射   获取 接口 实例
public   static   T   Resolve T
{
Assembly   assembly     Assembly GetExecutingAssembly
获取 第一个 接口 实例
var   type     assembly GetTypes Where t     t GetInterfaces Contains typeof T FirstOrDefault
if   type     null
throw   new   Exception 接口
return   T assembly CreateInstance type ToString 创建 实例   转 成 接口类型
想 说 简单 简单 注入 简单 点 用到 构造 注入 参数 注入
创建 IUserService 接口 UserService 类
public   interface   IUserService
{
IUser   GetUser
public   class   UserService     IUserService
{
private   IUser   user
public   UserService IUser   user
{
user     user
public   IUser   GetUser
{
return   user
发现 UserService 构造 传入 IUser IUser 实例 注入 IUser 实例
思考 userService GetUser IUser 类 实例 Resolve2
public   static   T   Resolve2 T
{
Assembly   assembly     Assembly GetExecutingAssembly 获取 代码 程序 集
获取 第一个 接口 实例 UserService
var   type     assembly GetTypes Where t     t GetInterfaces Contains typeof T FirstOrDefault
if   type     null
throw   new   Exception 接口
var   parameter     new   List object
type GetConstructors 获取 第一个 构造函数   GetParameters 参数 IUser 接口
var   constructorParameters     type GetConstructors GetParameters
foreach   var   constructorParameter   in   constructorParameters
{
获取 IUser 接口类型 User
var   tempType     assembly GetTypes Where t     t GetInterfaces
Contains Type GetType constructorParameter ParameterType FullName
FirstOrDefault
实例 化成 对象 User 实例   添加 集合   供 UserService 注入 提供 参数
parameter Add assembly CreateInstance tempType ToString
创建 实例 传入 参数   public   UserService IUser   user
return   T assembly CreateInstance type ToString   true   BindingFlags Default   null   parameter ToArray   null   null true 区分 大小写
仔细 不难 稍微 绕
注入 原理 控制 方法 注入 创建 实例 每次 创建 方法 B 创建 实例 后续 参数 实例 C 创建 实例 全局 单例 难事
伪 代码
每次 访问 新 实例 obj1 obj1 体现
public   static   T   Transient T
{
var   obj1     assembly CreateInstance name
var   obj2     assembly CreateInstance obj1
var   obj1     assembly CreateInstance name
var   obj3     assembly CreateInstance obj1
var   obj4     assembly CreateInstance obj2 obj3
return   T obj4
请求 中 唯一 实例 obj1 体现
public   static   T   Scoped T
{
var   obj1     assembly CreateInstance name
var   obj2     assembly CreateInstance obj1
var   obj3     assembly CreateInstance obj1
var   obj4     assembly CreateInstance obj2 obj3
return   T obj4
全局 单例 obj1     null 体现
public   static   T   Singleton T
{
if obj1     null
    obj1     assembly CreateInstance name
if obj2     null
    obj2     assembly CreateInstance obj1
if obj3     null
    obj3     assembly CreateInstance obj1
if obj4     null
    obj4     assembly CreateInstance obj2 obj3
return   T obj4
伪 代码 不难理解 注入 框架 请求 DbContext 唯一 实例
深刻 理解 ASP NET   Core 中 AddScoped AddTransient AddSingleton 三个 方法 生命周期
ASP NET   Core 中 自动 注入
有没有 AddScoped AddTransient AddSingleton 这类 方法 很烦 每次 对象 手动 注入 每次 Startup cs 文件 做 修改 烦 烦
ABP 同学 有种 感觉 体会 不到 注入 框架 写 接口 自动 注入 构造函数 扔 ASP NET   Core 类似 功能
答案 肯定 先 定义 三种 生命周期 标识 接口 三个 接口 仅仅只是 做 标记 作用 名字 随意
  瞬时 每次 实例
public   interface   ITransientDependency
请求 唯一 线程 唯一
public   interface   IScopedDependency
单例 全局 唯一
public   interface   ISingletonDependency
ISingletonDependency 为例
  自动 注入
  summary
private   void   AutoInjection IServiceCollection   services   Assembly   assembly
{
获取 标记 ISingletonDependency 接口 接口
var   singletonInterfaceDependency     assembly GetTypes
Where t     t GetInterfaces Contains typeof ISingletonDependency
SelectMany t     t GetInterfaces Where f     f FullName Contains ISingletonDependency
ToList
获取 标记 ISingletonDependency 接口 类
var   singletonTypeDependency     assembly GetTypes
Where t     t GetInterfaces Contains typeof ISingletonDependency
ToList
自动 注入 标记   ISingletonDependency 接口   接口
foreach   var   interfaceName   in   singletonInterfaceDependency
{
var   type     assembly GetTypes Where t     t GetInterfaces Contains interfaceName FirstOrDefault
if   type     null
services AddSingleton interfaceName   type
自动 注入 标记   ISingletonDependency 接口   类
foreach   var   type   in   singletonTypeDependency
{
services AddSingleton type   type
Startup cs 文件 ConfigureServices 方法 里 调用
public   void   ConfigureServices IServiceCollection   services
{
var   assemblyWeb     Assembly GetExecutingAssembly
  自动 注入
AutoInjection services   assemblyApplication
接口 类 定义 ISingletonDependency 接口 自动 单例 注入 很酸爽
反射 低效 别闹 程序 第一次 启动 运行
嗨 博客 源代码
跑 Demo 痛苦 源码 博文 痛苦 特别 总有 细节 导致 达 不到 博文 效果
重写 Demo 话 说 体贴 留下 赞 走 真的 github 送 颗 星星 再好不过
  更新  
园友 DbContext 单次 请求 唯一 DbContex 需不需要 主动 释放 http www cnblogs com zhaopei p dispose on dbcontext html
博文 源码
嗨 博客 ASP NET   COre   2.0 跨平台 免费 开源 博客   https github com zhaopeiym Hi Blogs   求 ⭐ ⭐
demo   https github com zhaopeiym BlogDemoCode tree master 依赖 注入 DIDemo
相关 资料
http www cnblogs com hjf1223 archive 2010 10 10 static datacontext html
http www cnblogs com xishuai p ef dbcontext thread safe html
DbContext 单次 请求 唯一 DbContex 需不需要 主动 释放 各路 大侠 参战
篇文章 HiBlogs 重写 笔记 DbContext 依赖 注入 自动 注入 园友   Flaming 丶 淡蓝   吴瑞祥   提出 讨论 质疑 连夜 查询 资料 玩笑
本来 重点 想 分析 自动 注入 注入 更深 理解 疑问 讨论 总 时不时 来篇 不行 要死
评论 区 回复 是因为 确实 懂 下班 赶紧 查阅 相关 资料
结论 DbContext 单次 请求 唯一 主动 释放 纳闷 asp net   core 干 玩个 毛线
相关 资料 http blog jongallant com 2012 10 do i have to call dispose on dbcontext
这篇 资料 博客 权威性 内容 EF 团队 解释 回应
Hello   Jon
The   default   behavior   of   DbContext   is   that   the   underlying   connection   is   automatically   opened   any   time   is   needed   and   closed   when   it   is   no   longer   needed   E g   when   you   execute   a   query   and   iterate   over   query   results   using   foreach   the   call   to   IEnumerable T GetEnumerator   will   cause   the   connection   to   be   opened   and   when   later   there   are   no   more   results   available   foreach   will   take   care   of   calling   Dispose   on   the   enumerator   which   will   close   the   connection   In   a   similar   way   a   call   to   DbContext SaveChanges   will   open   the   connection   before   sending   changes   to   the   database   and   will   close   it   before   returning
Given   this   default   behavior   in   many   real world   cases   it   is   harmless   to   leave   the   context   without   disposing   it   and   just   rely   on   garbage   collection
That   said   there   are   two   main   reason   our   sample   code   tends   to   always   use   using   or   dispose   the   context   in   some   other   way
  The   default   automatic   open close   behavior   is   relatively   easy   to   override   you   can   assume   control   of   when   the   connection   is   opened   and   closed   by   manually   opening   the   connection   Once   you   start   doing   this   in   some   part   of   your   code   then   forgetting   to   dipose   the   context   becomes   harmful   because   you   might   be   leaking   open   connections
  DbContext   implements   IDiposable   following   the   recommended   pattern   which   includes   exposing   a   virtual   protected   Dispose   method   that   derived   types   can   override   if   for   example   the   need   to   aggregate   other   unmanaged   resources   into   the   lifetime   of   the   context
By   the   way   with   DbContext   the   pattern   to   open   the   connection   manually   and   override   the   automatic   open close   behavior   is   a   bit   awkward
IObjectContextAdapter dbContext ObjectContext Connection Open
But   we   have   a   bug   to   make   this   easier   as   it   used   to   be   with   ObjectContext   before   e g
dbContext Database Connection Open
Hope   this   helps
Diego
谷歌 翻译 英文 不行 翻译 正确
乔恩
DbContext 默认 底层 连接 时 自动 打开 时 关闭 执行 查询 foreach 迭代 查询 时 IEnumerable   T   GetEnumerator 调用 导致 打开 连接 稍后 可用 foreach 将会 关闭 调用 Dispose 枚举 器上 关闭 连接 类似 方式 调用 DbContext SaveChanges 更改 发送到 数据库 打开 连接 返回 关闭
默认 现实 世界 情况 离开 上下文 垃圾 回收 无害
示例 代码 方式 上下文 两个 原因
默认 自动 打开 关闭 覆盖 手动 打开 连接 控制 打开 关闭 连接 代码 执行 操作 忘记 上下文 变得 有害 泄露 打开 连接
DbContext 推荐 模式 IDiposable 包括 暴露 虚拟 保护 Dispose 方法 非 托管 资源 聚合 上下文 生命周期 中 派生 类型 覆盖
顺便 说 DbContext 打开 手动 连接 模式 覆盖 自动 打开 关闭 尴尬
IObjectContextAdapter DbContext ObjectContext Connection Open
错误 ObjectContext
dbContext Database Connection Open
希望
迭戈
光说不练 假把式 测试
测试 分 两种 情况
主动 释放 DbContext
释放 DbContext
多线程 模拟 并发
查看 执行 时 数据库 连接数 程序执行 完 数据库 连接数
测试代码
模拟 数据库 操作 真实 包含 新增 修改 查询
private   static   void   DbOperation BloggingContext   db
{
db Blogs Add new   Blog
{
Rating    
Url     www i haojima net
db SaveChanges
db Blogs First Url     www haojima net
db SaveChanges
foreach   var   item   in   db Blogs Take 10 ToList
{
Console WriteLine 查询 博客 id     item BlogId
条件 输入
static   void   Main string   args
{
Console WriteLine 主动 释放 DbContext y n
var   yes     Console ReadLine
Console WriteLine 请 输入 模拟 并发 量
var   number     Console ReadLine
SemaphoreSlim   sem     new   SemaphoreSlim int Parse number
循环 代码
var   i    
while   i     5000
{
Console WriteLine 启动     i ++     线程
sem Wait
region   Thread
new   Thread  
{
if   yes     y
{
using   BloggingContext   bloggingContext     new   BloggingContext 主动 释放
{
DbOperation bloggingContext
else
{
BloggingContext   bloggingContext     new   BloggingContext 释放
DbOperation bloggingContext
Start
endregion
sem Release
查看 连接 数量 sql 语句
SELECT   count   AS   连接 EFCoreDemoDB2 数据库 数量   FROM
Master dbo SYSPROCESSES   WHERE   DBID   IN     SELECT
DBID
FROM
Master dbo SYSDATABASES
WHERE
NAME EFCoreDemoDB2
操作 截图 下载 demo 代码 自行 测试
主动 释放 模拟 200 并发 量
数据库 连接 数最多 54
释放 模拟 200 并发 量
数据库 连接 数最多 56
程序执行 连接 自动 释放
技巧
ef dbcontext 三个
多个 线程 访问 同一个 dbcontext
同一个 跟踪 实体 多个 dbcontext 操作
查询 数据 修改 需 查询 select t new   Dto {   不济 AsNoTracking ToList
奇怪
运行 测试 命令行 执行 执行 调试
demo https github com zhaopeiym BlogDemoCode tree master EFCoreDemo
测试 园友 更好 测试 方式 提供 交流
权限 管理 学习   ASP NET   Forms 身份 认证
本文 示例 VS2017 MVC5
系统 大小 牛 逼 屌丝 离不开 注册 登录 分析 用户 身份 认证
简单 登录 注销
学习 net Forms 身份 认证 session 登录 效果 用户 信息 服务端
前端 代码
if   string IsNullOrWhiteSpace ViewBag UserName
{
form   action home login1
input   type text   name userName  
input   type submit   value 登录  
form
else
{
form   action home logout1
div 用户 登录 登录名 ViewBag UserName div
input   type submit   value 退出  
form
后台 代码
public   ActionResult   Index
{
ViewBag UserName     Session userName ToString
return   View
public   void   Login1 string   userName
{
if   string IsNullOrWhiteSpace userName     演示 做 真的 验证
Session userName     userName
else
Session userName     null
Response Redirect Request UrlReferrer LocalPath 重定向 页面
public   void   Logout1
{
Session userName     null
Response Redirect Request UrlReferrer LocalPath 重定向 页面
简单明了 想要 扩展 定制 功能 好用 维护 session 系统 发布 iis 自动 重启 session 丢失 情况 用户 莫名其妙 提升 登录 体验 不好 先 讨论 session 服务 数据库 情况 微软 一套 成熟 权限 管理 不用
Forms 认证 登录 注销
web config 里 开启 Forms 身份 认证
system web
authentication   mode Forms authentication
后台 代码
public   void   Login2 string   userName
{
if   string IsNullOrWhiteSpace userName     演示 做 真的 验证
FormsAuthentication SetAuthCookie userName   true   登录
Response Redirect Request UrlReferrer LocalPath 重定向 页面
public   void   Logout2
{
FormsAuthentication SignOut 登出
Response Redirect Request UrlReferrer LocalPath 重定向 页面
前台 代码
if   Request IsAuthenticated
{
form   action home login2
input   type text   name userName  
input   type submit   value 登录  
form
else
{
form   action home logout2
div 用户 登录 登录名 Context User Identity Name div
input   type submit   value 退出  
form
几句 代码 登录 注销 session 管理 登录 Forms 身份 认证 信息 存 cookie 浏览器 SetAuthCookie 方法 名 Cookie 信息 加密
session cookie 关系 利用 session 用户 状态 用到 cookie
Forms 身份 认证 仅仅只是 信息 存 cookie 服务端 维护 session
不信 测试 两种 方式 登录 清除 session 测 清 session 重启 iis 修改 后台 代码 编译 访问
用户 认证 要存 cookie HTTP 状态 协议 服务器 每次 请求 只能 每次 请求 cookie 识别 用户 暂时 方式
自定义 身份 认证 标识
登录 简单 情况 业务 存 用户 信息 会要 扩展 身份 标识 答案 肯定
后台 代码
public   void   Login3 string   userName
{
if   string IsNullOrWhiteSpace userName     演示 做 真的 验证
{
UserInfo   user     new   UserInfo
{
Name     userName
LoginTime     DateTime Now
序列化 保存 用户 信息
var   data     JsonConvert SerializeObject user
创建 FormsAuthenticationTicket 包含 登录名 额外 用户 数据
FormsAuthenticationTicket   ticket     new   FormsAuthenticationTicket   userName   DateTime Now   DateTime Now AddDays   true   data
加密 保存
string   cookieValue     FormsAuthentication Encrypt ticket
    加密 创建 登录 Cookie
HttpCookie   cookie     new   HttpCookie FormsAuthentication FormsCookieName   cookieValue
cookie HttpOnly     true
cookie Secure     FormsAuthentication RequireSSL
cookie Domain     FormsAuthentication CookieDomain
cookie Path     FormsAuthentication FormsCookiePath
    写 登录 Cookie
Response Cookies Remove cookie Name
Response Cookies Add cookie
Response Redirect Request UrlReferrer LocalPath 重定向 页面
Global asax Application AuthenticateRequest 方法
protected   void   Application AuthenticateRequest
{
GetUserInfo
coolie 解密   读取 用户 信息   HttpContext Current User
public   void   GetUserInfo
{
    读 登录 Cookie
HttpCookie   cookie     Request Cookies FormsAuthentication FormsCookieName
try
{
UserInfo   userData     null
    解密 Cookie 值 获取 FormsAuthenticationTicket 对象
FormsAuthenticationTicket   ticket     FormsAuthentication Decrypt cookie Value
if   ticket     null   &&   string IsNullOrEmpty ticket UserData     false
    还原 用户 数据
userData     JsonConvert DeserializeObject UserInfo ticket UserData
if   ticket     null   &&   userData     null
    构造 MyFormsPrincipal 实例 context User 赋值
HttpContext Current User     new   MyFormsPrincipal UserInfo ticket   userData
catch   {     异常 抛出 攻击者 试探    
前端 代码
{
MyFormsPrincipal UserInfo   user     Context User   as   MyFormsPrincipal UserInfo
if   user     null
{
form   action home login3
input   type text   name userName  
input   type submit   value 登录  
form
else
{
form   action home logout2
div 用户 登录 登录名 Context User Identity Name div
div 用户 登录 登录 时间 user UserData LoginTime div
input   type submit   value 退出  
form
过程 FormsAuthentication SetAuthCookie userName   true   登录 等效 扩展 存 想要 存储 数据
过程 比较简单
构造 存储 数据
序列化
序列化 信息 放入 FormsAuthenticationTicket 对象
FormsAuthentication Encrypt 加密 对象
发送 cookie 浏览器
稍微 点 地方 解密 User 赋值 HttpContext Current User     new   MyFormsPrincipal UserInfo ticket   userData
MyFormsPrincipal 接口 MyFormsPrincipal
public   class   MyFormsPrincipal TUserData     IPrincipal   where   TUserData     class   new
{
private   IIdentity   identity
private   TUserData   userData
public   MyFormsPrincipal FormsAuthenticationTicket   ticket   TUserData   userData
{
if   ticket     null
throw   new   ArgumentNullException ticket
if   userData     null
throw   new   ArgumentNullException userData
identity     new   FormsIdentity ticket
userData     userData
public   TUserData   UserData
{
get   {   return   userData  
public   IIdentity   Identity
{
get   {   return   identity  
public   bool   IsInRole string   role 暂时
{
return   false
倒 特别 实例 化 传入 票据 定义数据
授权
登录 离不开 授权 微软 东西 成套 成套
Authorize
public   ActionResult   LoginOk
{
return   View
Action 添加 Authorize 特性 这人 自动 检查 登录 登录 自动 跳转 登录 页面 登录 页面 设置 web config
system web
authentication   mode Forms  
forms   loginUrl home index forms
简单 授权 验证 页面 人才 访问 VIP 扩展
继承   AuthorizeAttribute
public   class   MyAuthorizeAttribute     AuthorizeAttribute
{
public   override   void   OnAuthorization AuthorizationContext   filterContext
{
if   filterContext HttpContext User Identity Name     农码 一生
{
filterContext HttpContext Response Write vip 用户 访问 机密 数据
filterContext HttpContext Response End
return
base OnAuthorization filterContext
MyAuthorize
public   ActionResult   LoginVIP
{
return   View
简单 说 来张 效果图
推荐 阅读
http www cnblogs com fish li archive 2012 04 15 2450571 html
Demo
https github com zhaopeiym BlogDemoCode tree master 权限 管理 Forms 身份 认证
浅析 C# 中 单点 登录 原理
单点 登录
想 肯定 一部分 望文生义 单点 登录 用户 只能 一处 登录 这是 错误 理解 记得 第一次 理解
单点 登录 指 多个 子系统 登录 系统 登录 浏览器 子系统 退出 子系统 退出 状态
明白 举个 例子 博客园 首页 https www cnblogs com 博客园 找找看 http zzk cnblogs com 两个 系统 域名 登录 登录 状态 退出 退出 状态
这是 分析
单点 登录 SSO 原理
认证 中心 Service 两个 子系统 Client
浏览器 第一次 访问 Client1 时 处于 未 登录 状态     302 认证 中心 Service     Service 登录 页面 登录 写入 Cookie 记录 登录 信息     302 Client1 写入 Cookie 记录 登录 信息
第二次 访问 Client1     读取 Client1 中 Cookie 登录 信息     Client1 登录 状态
第一次 访问 Client2     读取 Client2 中 Cookie 中 登录 信息     Client2 未 登录 状态     302 Service 读取 Service 中 Cookie 登录 状态     302 Client2 写入 Cookie 记录 登录 信息
发现 访问 Client2 时间 几次 302 重定向 输入 用户名 密码 登录 用户 感觉 不到 登录 状态
图解
手 撸 SSO
环境 NET   Framework   4.5
Service
  summary
  登录
  summary
  param   name name param
  param   name passWord param
  param   name backUrl param
  returns returns
HttpPost
public   string   Login string   name   string   passWord   string   backUrl
{
if   true TODO 验证 用户名 密码 登录
{
Session 标识 会话 登录 状态
Session user     XX 登录
认证 中心   保存 客户端 Client 登录 认证码
TokenIds Add Session SessionID   Guid NewGuid
else 验证 失败 登录
{
return   Home Login
return   backUrl     tokenId     TokenIds Session SessionID 生成 tokenId   发放 客户端
Client
public   static   List string   Tokens     new   List string
public   async   Task ActionResult   Index
{
var   tokenId     Request QueryString tokenId
tokenId 不为 空 Service302
if   tokenId     null
{
using   HttpClient   http     new   HttpClient
{
验证 Tokend
var   isValid     await   http GetStringAsync http localhost 8018 Home TokenIdIsValid tokenId     tokenId
if   bool Parse isValid ToString
{
if   Tokens Contains tokenId
{
记录 登录 Client   统一 登出
Tokens Add tokenId
Session token     tokenId
判断 是否是 登录 状态
if   Session token     null     Tokens Contains Session token ToString
{
return   Redirect http localhost 8018 Home Verification backUrl http localhost 26756 Home
else
{
if   Session token     null
Session token     null
return   View
效果图
少 代码 撸 简单 SSO 理解 勿 用于
IdentityServer4 SSO
环境 NET   Core   2.0
手 撸 SSO NET 里 IdentityServer4 SSO
建 IdentityServer4 SSO Service MVC 项目 再建 两个 IdentityServer4 SSO Client MVC 项目
Service 项目 中用 nuget 导入 IdentityServer4   2.0 IdentityServer4 AspNetIdentity   2.0 IdentityServer4 EntityFramework   2.0
Client 项目 中用 nuget 导入 IdentityModel   2.14
设置 Service Client 项目 启动 端口   5001 Service 5002 Client1 5003 Client2
Service 中 新建 类 Config
public   class   Config
{
public   static   IEnumerable IdentityResource   GetIdentityResources
{
return   new   List IdentityResource
{
new   IdentityResources OpenId
new   IdentityResources Profile
public   static   IEnumerable ApiResource   GetApiResources
{
return   new   List ApiResource
{
new   ApiResource api1   My   API
  访问 客户端
public   static   IEnumerable Client   GetClients
{
return   new   List Client
{
  OpenID   Connect   hybrid   flow   and   client   credentials   client   MVC
Client1
new   Client
{
ClientId     mvc1
ClientName     MVC   Client1
AllowedGrantTypes     GrantTypes HybridAndClientCredentials
RequireConsent     true
ClientSecrets  
{
new   Secret secret Sha256
RedirectUris     {   http localhost 5002 signin oidc     端口 5002   修改 Client 端口
PostLogoutRedirectUris     {   http localhost 5002 signout callback oidc  
AllowedScopes  
{
IdentityServerConstants StandardScopes OpenId
IdentityServerConstants StandardScopes Profile
api1
AllowOfflineAccess     true
Client2
new   Client
{
ClientId     mvc2
ClientName     MVC   Client2
AllowedGrantTypes     GrantTypes HybridAndClientCredentials
RequireConsent     true
ClientSecrets  
{
new   Secret secret Sha256
RedirectUris     {   http localhost 5003 signin oidc  
PostLogoutRedirectUris     {   http localhost 5003 signout callback oidc  
AllowedScopes  
{
IdentityServerConstants StandardScopes OpenId
IdentityServerConstants StandardScopes Profile
api1
AllowOfflineAccess     true
新增 ApplicationDbContext 类 继承 IdentityDbContext
public   class   ApplicationDbContext     IdentityDbContext IdentityUser
{
public   ApplicationDbContext DbContextOptions ApplicationDbContext   options
  base options
{
protected   override   void   OnModelCreating ModelBuilder   builder
{
base OnModelCreating builder
文件 appsettings json 中 配置 数据库 连接 字符串
ConnectionStrings   {
DefaultConnection   Server local Database IdentityServer4 Demo Trusted Connection True MultipleActiveResultSets true
文件 Startup cs ConfigureServices 方法 中 增加
public   void   ConfigureServices IServiceCollection   services
{
services AddDbContext ApplicationDbContext options  
options UseSqlServer Configuration GetConnectionString DefaultConnection   数据库 连接 字符串
services AddIdentity IdentityUser   IdentityRole
AddEntityFrameworkStores ApplicationDbContext
AddDefaultTokenProviders
services AddMvc
string   connectionString     Configuration GetConnectionString DefaultConnection
var   migrationsAssembly     typeof Startup GetTypeInfo Assembly GetName Name
services AddIdentityServer
AddDeveloperSigningCredential
AddAspNetIdentity IdentityUser
AddConfigurationStore options  
{
options ConfigureDbContext     builder  
builder UseSqlServer connectionString
sql     sql MigrationsAssembly migrationsAssembly
AddOperationalStore options  
{
options ConfigureDbContext     builder  
builder UseSqlServer connectionString
sql     sql MigrationsAssembly migrationsAssembly
options EnableTokenCleanup     true
options TokenCleanupInterval     30
Startup cs 文件 里 新增 方法 InitializeDatabase 初始化 数据库
  summary
  初始 数据库
  summary
  param   name app param
private   void   InitializeDatabase IApplicationBuilder   app
{
using   var   serviceScope     app ApplicationServices GetService IServiceScopeFactory CreateScope
{
serviceScope ServiceProvider GetRequiredService ApplicationDbContext Database Migrate 执行 数据库 迁移
serviceScope ServiceProvider GetRequiredService PersistedGrantDbContext Database Migrate
var   context     serviceScope ServiceProvider GetRequiredService ConfigurationDbContext
context Database Migrate
if   context Clients Any
{
foreach   var   client   in   Config GetClients 循环 添加   添加   5002 5003   客户端
{
context Clients Add client ToEntity
context SaveChanges
if   context IdentityResources Any
{
foreach   var   resource   in   Config GetIdentityResources
{
context IdentityResources Add resource ToEntity
context SaveChanges
if   context ApiResources Any
{
foreach   var   resource   in   Config GetApiResources
{
context ApiResources Add resource ToEntity
context SaveChanges
修改 Configure 方法
public   void   Configure IApplicationBuilder   app   IHostingEnvironment   env
{
初始化 数据
InitializeDatabase app
if   env IsDevelopment
{
app UseDeveloperExceptionPage
app UseBrowserLink
app UseDatabaseErrorPage
else
{
app UseExceptionHandler Home Error
app UseStaticFiles
app UseIdentityServer
app UseMvc routes  
{
routes MapRoute
name   default
template   { controller Home { action Index { id
新建 AccountController 控制器 注册 登录 登出
新建 ConsentController 控制器 用于 Client 回调
Client Startup cs 类里 修改 ConfigureServices 方法
public   void   ConfigureServices IServiceCollection   services
{
services AddMvc
JwtSecurityTokenHandler DefaultInboundClaimTypeMap Clear
services AddAuthentication options  
{
options DefaultScheme     Cookies
options DefaultChallengeScheme     oidc
AddCookie Cookies AddOpenIdConnect oidc   options  
{
options SignInScheme     Cookies
options Authority     http localhost 5001
options RequireHttpsMetadata     false
options ClientId     mvc2
options ClientSecret     secret
options ResponseType     code   id token
options SaveTokens     true
options GetClaimsFromUserInfoEndpoint     true
options Scope Add api1
options Scope Add offline access
Client 身份 认证 简单
Authorize 身份 认证
public   IActionResult   Index
{
return   View
  summary
  登出
  summary
  returns returns
public   async   Task IActionResult   Logout
{
await   HttpContext SignOutAsync Cookies
await   HttpContext SignOutAsync oidc
return   View Index
效果图
源码 地址 demo 配置 数据库 连接 运行
https github com zhaopeiym BlogDemoCode tree master sso E5% 8D% 95% E7% 82% B9% E7% 99% BB% E5% BD% 95
推荐 阅读
http www cnblogs com ywlaker p 6113927 html
https identityserver4 readthedocs io en release
C# 单元测试 快速 入门
注 本文 示例 环境
VS2017
XUnit   2.2   单元测试 框架
xunit runner visualstudio   2.2   测试运行 工具
Moq   4.7 10   模拟 框架
编写 单元测试
编写 单元测试 想 理由 修改 bug 修复 引入 新 放心大胆 重构 重构 提高 代码 质量 提升 编码 能力 有用 方式 好比 一幅 名画 一尊 雕像 作者 重绘 打磨 优秀 代码 重构
好处 TDD 驱动 代码 注重 接口 迫使 代码 减少 耦合 开发人员 面对 情况 编写 代码 程度 保证 代码 质量 测试方法 后续 人员 快速 理解 代码
额 不写 单元测试 原因 原因 无非 两种 懒 找 理由
框架 选型
框架 选型 写 单元测试 算是 第一次 接触 情况 选型 最火 选 起码 交流
单元测试 框架 XUnit   2.2 asp net   mvc 此内 框架 NUnit MSTest
测试运行 工具 xunit runner visualstudio   2.2 类似 Resharper xUnit   runner 插件
模拟 框架 Moq   4.7 10   asp net   mvc Orchard 此类 框架 RhinoMocks NSubstitute FakeItEasy
基本概念
AAA 逻辑 顺序
Arrange 对象 创建对象 设置
操作 Act 对象
断言 Assert 某件事 情是 预期
Assert 断言 方法 属性 运行 检测
Stub 测试 存根 桩 对象 返回 指定 代码 替换 方法 伪造 方法 阻断 方法 调用 测试 对象 执行
Mock 模拟 对象 带有 期望 方法 调用 存根 模拟 对象 之间 交互方式 调用 几次 某种 情况 抛出 异常 mock 一种 功能丰富 stub
Stub Mock 定义 抽象 不好 理解 延伸 阅读 阅读 阅读
测试
测试 文档
无限 接近 言简意赅 自然化 语言
测试 越 简明 越 测试 关注 一个点
测试 足够 测试 易于 编写 减少 依赖
测试 相互 隔离 依赖于 测试 依赖于 外部 资源
描述 命名 UnitOfWorkName ScenarioUnderTest ExpectedBehavior 命名 团队 约定 中文 命名 没什么
UnitOfWorkName 　 　 测试 方法 一组 方法 一组 类
Scenario 　 　 测试 假设 条件 登入 失败 无效 用户 密码 正确
ExpectedBehavior 　 　 测试 场景 指定 条件 测试方法 预期
基础 实践
废话 说 够 撸 袖子 开干
工作
vs2017 新建 空 项目   UnitTestingDemo
新建 类库   TestDemo   用于 编写 测试 类
新建 类库   TestDemo Tests   用于 编写 单元测试
类库   TestDemo Tests   nuget   安装 XUnit   2.2 xunit runner visualstudio   2.2 Moq   4.7 10
添加   TestDemo Tests     TestDemo   引用
例
public   class   Arithmetic
{
public   int   Add int   nb1   int   nb2
{
return   nb1     nb2
单元测试 导入 using   Xunit 命名 空间  
public   class   Arithmetic Tests
{
Fact 测试方法 特性 Fact
public   void   Add Ok
{
Arithmetic   arithmetic     new   Arithmetic
var   sum     arithmetic Add  
Assert True sum     断言 验证
简单 测试 写 vs2017   新 功能 Live   Unit   Testing 启用 实时 测试 编辑 单元测试 保存 它会 自动 生成 自动测试
验证 绿色 √
测试代码 中 参数 写 死 多种 情况 测试 写 多个 单元测试 方法 方法 执行 断言 太 麻烦 XUnit 框架 中为 提供 Theory 特性
例
Theory
InlineData    
InlineData    
InlineData       测试方法 形参
public   void   Add Ok Two int   nb1   int   nb2   int   result
{
Arithmetic   arithmetic     new   Arithmetic
var   sum     arithmetic Add nb1   nb2
Assert True sum     result
测试 正确 情况 测试 错误 情况 更好 覆盖率
例
Theory
InlineData    
InlineData    
InlineData    
public   void   Add No int   nb1   int   nb2   int   result
{
Arithmetic   arithmetic     new   Arithmetic
var   sum     arithmetic Add nb1   nb2
Assert False sum     result
有时候 异常
例
public   int   Divide int   nb1   int   nb2
{
if   nb2
{
throw   new   Exception 除数
return   nb1     nb2
Fact
public   void   Divide Err
{
Arithmetic   arithmetic     new   Arithmetic
Assert Throws Exception     {   arithmetic Divide     断言   验证 异常
简单 单元测试 讨论 真实
项目 离不开 数据库 操作 实践 EF 测试
nuget 安装   EntityFramework   5.0
例
public   class   StudentRepositories
{
public   void   Add Student   model
{
db Set Student Add model
db SaveChanges
Fact
public   void   Add Ok
{
StudentRepositories   r     new   StudentRepositories
Student   student     new   Student
{
Id    
Name     张三
r Add student
var   model     r Students Where t     t Name     张三 FirstOrDefault
Assert True model     null
操作 EF 连接 库 改成 专用 测试 库
发现 测试 垃圾 数据 测试 干扰 性 每次 测试 清除 垃圾 数据
测试 类要 继承 IDisposable 接口
public   void   Dispose
{
StudentRepositories   r     new   StudentRepositories
var   models     r Students ToList
foreach   var   item   in   models
{
r Delete item Id
执行 测试方法 执行 Dispose 可用 清除 垃圾 数据
数据库 操作 耗时 单元测试 减少 测试方法 执行 时间 单元测试 执行 频繁 数据库 实际操作 测试 后续 上层 操作 Stub 存根 模拟 数据库 实际操作
例
定义 接口 IStudentRepositories   StudentRepositories   继承
public   interface   IStudentRepositories
{
void   Add Student   model
public   class   StudentRepositories   IStudentRepositories
{
省略  
public   class   StudentService
{
IStudentRepositories   studentRepositories
public   StudentService IStudentRepositories   studentRepositories
{
this studentRepositories     studentRepositories
public   bool   Create Student   student
{
studentRepositories Add student
return   true
新建 类 测试 Create 仓储 操作 数据库 希望 实际操作 数据库 快速 测试 执行
Fact
public   void   Create Ok
{
IStudentRepositories   studentRepositories     new   StubStudentRepositories
StudentService   service     new   StudentService studentRepositories
var   isCreateOk     service Create null
Assert True isCreateOk
public   class   StubStudentRepositories     IStudentRepositories
{
public   void   Add Student   model
{
图解
每次 做 类似 操作 手动 建议 StubStudentRepositories 存根 着实 麻烦 Mock 框架 Moq 自动 帮 步骤
例
Fact
public   void   Create Mock Ok
{
var   studentRepositories     new   Mock IStudentRepositories
var   notiy     new   Mock Notiy
StudentService   service     new   StudentService studentRepositories Object
var   isCreateOk     service Create null
Assert True isCreateOk
相比 示例 简化 起码 代码 清晰 注重 测试 逻辑
情况 测试
public   class   Notiy
{
public   bool   Info string   messg
{
发送 消息 邮件 发送 短信 发送
.........
if   string IsNullOrWhiteSpace messg
{
return   false
return   true
public   class   Notiy Tests
{
Fact
public   void   Info Ok
{
Notiy   notiy     new   Notiy
var   isNotiyOk     notiy Info 消息 发送 成功
Assert True isNotiyOk
Create 方法 消息 发送 逻辑
public   bool   Create Student   student
{
studentRepositories Add student
var   isNotiyOk     notiy Info     student Name 消息 通知
逻辑
return   isNotiyOk
Fact
public   void   Create Mock Notiy Ok
{
var   studentRepositories     new   Mock IStudentRepositories
var   notiy     new   Mock Notiy
StudentService   service     new   StudentService studentRepositories Object   notiy Object
var   isCreateOk     service Create new   Student
Assert True isCreateOk
Notiy 测试 希望 Notiy 耗时 操作 Mock 框架 模拟 情况 不想 写 接口 模拟 一种 方式 测试 方法 virtual
例
public   virtual   bool   Info string   messg
{
发送 消息 邮件 发送 短信 发送
.........
if   string IsNullOrWhiteSpace messg
{
return   false
return   true
测试
Fact
public   void   Create Mock Notiy Ok
{
var   studentRepositories     new   Mock IStudentRepositories
var   notiy     new   Mock Notiy
notiy Setup f     f Info It IsAny string Returns true
StudentService   service     new   StudentService studentRepositories Object   notiy Object
var   isCreateOk     service CreateAndNotiy new   Student
Assert True isCreateOk
发现 标注 处 代码 执行 模拟 Info 方法 返回值 true 参数 It IsAny   任意 字符串
参数 返回值
notiy Setup f     f Info Returns false
notiy Setup f     f Info 消息 通知 Returns true
有时候 private 方法 测试
nuget   安装   MSTest TestAdapter   1.1 17
nuget   安装   MSTest TestFramework   1.1 17
例
private   bool   XXXInit
{
return   true
Fact
public   void   XXXInit Ok
{
var   studentRepositories     new   StudentService
var   obj     new   Microsoft VisualStudio TestTools UnitTesting PrivateObject studentRepositories
Assert True bool obj Invoke XXXInit
方法 参数 Invoke 传入 即可
说 只能 说 测试 内容 真多 想要 一篇 文章 说完 希望 入门
附录
xUnit 2.0   断言   来源
Assert Equal   验证 两个 参数 支持 字符串 常见 类型 有泛 型 方法 可用 泛型 类型 对象 时 默认 IEqualityComparer 重载 支持 传入 IEqualityComparer
Assert NotEqual  
Assert Same   验证 两个 对象 实例 判断 引用 类型 对象 引用
Assert NotSame  
Assert Contains   验证 对象 包含 序列 中 验证 字符串 字符串 一部分
Assert DoesNotContain  
Assert Matches   验证 字符串 匹配 给定 正则表达式
Assert DoesNotMatch  
Assert StartsWith   验证 字符串 指定 字符串 开头 传入 参数 指定 字符串 方式
Assert EndsWith   验证 字符串 指定 字符串 结尾
Assert Empty   验证 集合 为空
Assert NotEmpty  
Assert Single   验证 集合 元素
Assert InRange   验证 值 之内 泛型 方法 泛型 类型 IComparable 传入 IComparer
Assert NotInRange  
Assert Null   验证 对象 为空
Assert NotNull  
Assert StrictEqual   判断 两个 对象 默认 IEqualityComparer 对象
Assert NotStrictEqual  
Assert IsType Assert IsType   验证 对象 类型 继承 关系
Assert IsNotType Assert IsNotType  
Assert IsAssignableFrom Assert IsAssignableFrom   验证 对象 指定 类型 指定 类型 子类
Assert Subset   验证 集合 集合 子集
Assert ProperSubset   验证 集合 集合 真 子集
Assert ProperSuperset   验证 集合 集合 真 超集
Assert Collection   验证 第一个 参数 集合 中 项 第二个 参数 传入 Action 序列 中 位置 Action 执行 抛出 异常
Assert All   验证 第一个 参数 集合 中 项 传入 第二个 Action 类型 参数 抛出 异常 Collection 类似 区别 Action 序列
Assert PropertyChanged   验证 执行 第三个 参数 Action 测试 INotifyPropertyChanged 对象 触发 PropertyChanged 时间 属性 名为 第二个 参数 传入 名称
Assert Throws Assert Throws Assert ThrowsAsync Assert ThrowsAsync   验证 测试代码 抛出 指定 异常 指定 异常 子类 测试代码 返回 Task 异步 方法
Assert ThrowsAny   验证 测试代码 抛出 指定 异常 指定 异常 子类
Assert ThrowsAnyAsync   测试代码 返回 Task 异步 方法
Moq 4.7 10   It 参数 约束
Is 匹配 给定 类型
IsAny 匹配 给定 值
IsIn   匹配 指定 序列 中 值
IsNotIn   匹配 指定 序列 中 未找到 值
IsNotNull   找 值 给定 值 类型 空
IsInRange 匹配 给定 类型
IsRegex 正则 匹配
相关 资料
Moq Mock 框架
http www cnblogs com haogj archive 2011 07 22 2113496 html
http www cnblogs com jams742003 archive 2010 03 02 1676215 html
NSubstitute Mock 框架 http www cnblogs com gaochundong archive 2013 05 22 nsubstitute manual html
Shouldly 断言 书写 http www cnblogs com defzhu p 4841289 html
Effort EF6 nuget 获取 创建 伪造 供 EF 内存 数据库
netDumbster nuget 获取 netDumbster 组件 组件 提供 SimpleSmtpServer 对象 用于 模拟 邮件 发送 环境
HttpSimulator nuget 获取 HttpSimulator 对象 发起 Http 请求 生命周期 HttContext 对象 可用 状态
相关 书籍 单元测试 之道 C# 测试 驱动 开发 测试 驱动 开发 单元测试 艺术
相关 推荐
http www cnblogs com easygame p 5199785 html
http www cnblogs com edisonchou p 5447812 html
http www cnblogs com lsxqw2004 p 4793623 html
demo
https github com zhaopeiym BlogDemoCode tree master UnitTestingDemo
讲 IQueryable T 揭开 表达式 树 神秘 面纱
接上 篇 先说 IEnumerable foreach 真的 懂
园子 里 定制 orm 风生水 感觉 orm 不好意思 混 博客园 开个 玩笑 在此之前 仔细   IQueryable T   此文
树
树 好像 白痴 树 树嘛 图
主干 往上 主枝 分支 分支 .... 说 无限 分支 倒
平时 树结构 数据 XML 节点 无限 添加 子 节点 想想 平时 还用 树结构 数据 菜单 无限 分级 评论 区 楼层
讲 毛 关系   分析 表达式 树
lambda 表达式 表达式 树 区别
Lambda 表达式
Func Student   bool   func     t     t Name     农码 一生
表达式 树
Expression Func Student   bool   expression     t     t Name     农码 一生
一看 区别 表达式 Expression 包了 错 Microsoft 展示 障眼法 编译 C# 代码
第一个 lambda 表达式 编译成 匿名 函数 第二个 表达式 树 编译成 一堆 东西 远比 写 lambda
结论
平时 表达式 树 编写 lambda 表达式 编译成 表达式 树 平时 情况 表达式 树 编译器 帮 手动 主动 创 表达式 树 太 麻烦 情况 干 苦活
表达式 树 神奇 地方
有没有 点 感觉 Body Right Left Right Right Left 类型 继承   Expression   节点 节点 无限 附加 数据结构 称为 树结构 数据 表达式 树
补   Student   实体类
public   class   Student
{
public   string   Name   {   get   set  
public   int   Age   {   get   set  
public   string   Address   {   get   set  
public   string   Sex   {   get   set  
View   Code
解析 表达式 树
表达式 树 想象 树结构 数据 orm 免不了 解析 表达式 树 说 解析 树结构 数据 用到 递归 算法 解析 表达式 树
先 定义 解析 方法
表达式 解析
public   static   class   AnalysisExpression
{
public   static   void   VisitExpression Expression   expression
{
switch   expression NodeType
{
case   ExpressionType Call 执行 方法
MethodCallExpression   method     expression   as   MethodCallExpression
Console WriteLine 方法 名     method Method Name
for   int   i       i     method Arguments Count   i ++
VisitExpression method Arguments i
break
case   ExpressionType Lambda lambda 表达式
LambdaExpression   lambda     expression   as   LambdaExpression
VisitExpression lambda Body
break
case   ExpressionType Equal
case   ExpressionType AndAlso and 条件 运算
BinaryExpression   binary     expression   as   BinaryExpression
Console WriteLine 运算符     expression NodeType ToString
VisitExpression binary Left
VisitExpression binary Right
break
case   ExpressionType Constant 常量 值
ConstantExpression   constant     expression   as   ConstantExpression
Console WriteLine 常量 值     constant Value ToString
break
case   ExpressionType MemberAccess
MemberExpression   Member     expression   as   MemberExpression
Console WriteLine 字段名 称 { 类型 {   Member Member Name   Member Type ToString
break
default
Console Write UnKnow
break
调用 解析 方法
Expression Func Student   bool   expression     t     t Name     农码 一生   &&   t Sex     男
AnalysisExpression VisitExpression expression
执行 过程
一层 一层 往子 节点 递归 遍历 完 节点 打印 效果
想要 元素 值 取到 组装 心情 拼成 sql 生成 url 请 随意
IQueryable T IQueryProvider
解析 表达式 树 捣鼓 orm 不行 起码   IQueryable T   接口 编码
自定义 个类   MyQueryable T   继承 接口   IQueryable T  
public   class   MyQueryable T     IQueryable T
{
public   IEnumerator T   GetEnumerator
{
throw   new   NotImplementedException
IEnumerator   IEnumerable GetEnumerator
{
throw   new   NotImplementedException
public   Type   ElementType
{
get   {   throw   new   NotImplementedException  
public   Expression   Expression
{
get   {   throw   new   NotImplementedException  
public   IQueryProvider   Provider
{
get   {   throw   new   NotImplementedException  
有个 接口 属性   IQueryProvider   接口 作用 大着 作用 执行 查询 操作符 创建   IQueryable T   遍历 执行 sql 远程 取值   Expression     属性
明白   IQueryable T     Expression   表达式 树 关系
IQueryable T   作用 存储   Expression 表达式 树
自定义 现实   IQueryProvider   接口 类   MyQueryProvider  
public   class   MyQueryProvider     IQueryProvider
{
public   IQueryable TElement   CreateQuery TElement Expression   expression
{
throw   new   NotImplementedException
public   IQueryable   CreateQuery Expression   expression
{
throw   new   NotImplementedException
public   TResult   Execute TResult Expression   expression
{
throw   new   NotImplementedException
public   object   Execute Expression   expression
{
throw   new   NotImplementedException
全是 自动 生成 伪 代码 填充
public   class   MyQueryProvider     IQueryProvider
{
public   IQueryable TElement   CreateQuery TElement Expression   expression
{
return   new   MyQueryable TElement expression
public   IQueryable   CreateQuery Expression   expression
{
throw   new   NotImplementedException
public   TResult   Execute TResult Expression   expression
{
return   default TResult
public   object   Execute Expression   expression
{
return   new   List object
public   class   MyQueryable T     IQueryable T
{
public   MyQueryable
{
provider     new   MyQueryProvider
expression     Expression Constant this
public   MyQueryable Expression   expression
{
provider     new   MyQueryProvider
expression     expression
public   Type   ElementType
{
get   {   return   typeof T  
private   Expression   expression
public   Expression   Expression
{
get   {   return   expression  
private   IQueryProvider   provider
public   IQueryProvider   Provider
{
get   {   return   provider  
public   IEnumerator   GetEnumerator
{
return   Provider Execute Expression   as   IEnumerable GetEnumerator
IEnumerator T   IEnumerable T GetEnumerator
{
var   result     provider Execute List T expression
if   result     null
yield   break
foreach   var   item   in   result
{
yield   return   item
View   Code
执行 代码
var   aa     new   MyQueryable Student
var   bb     aa Where t     t Name     农码 一生
var   cc     bb Where t     t Sex     男
var   dd     cc AsEnumerable
var   ee     cc ToList
执行 过程
结论
每次 执行   Where   查询 操作符   IQueryProvider   会为 创建 新   IQueryable T
调用   AsEnumerable   方法 取值 IEnumerable EF 查询 先取 IEnumerable 后滤 筛 AsEnumerable 生成 查询 全表 sql
执行   ToList   方法 时才 调用 迭代 器   GetEnumerator   取值
取值 执行   IQueryProvider   中   Execute   方法 调用 方法 解析 表达式 数 执行
办实事   Execute     返回 默认值
估计 有人 不爽   Execute   说 解析 表达式 树 做 想 做 事
简单 集合 做 数据源
构造 Student 数组
public   static   List Student   StudentArrary     new   List Student
{
new   Student { Name 农码 一生   Age 26   Sex 男   Address 长沙
new   Student { Name 小明   Age 23   Sex 男   Address 岳阳
new   Student { Name 嗨 妹子   Age 25   Sex 女   Address 四川
写 VisitExpression2 方法 区别   目的 取 表达式 树中 表达式 组装 成 sql
public   static   void   VisitExpression2 Expression   expression   ref   List LambdaExpression   lambdaOut
{
if   lambdaOut     null
lambdaOut     new   List LambdaExpression
switch   expression NodeType
{
case   ExpressionType Call 执行 方法
MethodCallExpression   method     expression   as   MethodCallExpression
Console WriteLine 方法 名     method Method Name
for   int   i       i     method Arguments Count   i ++
VisitExpression2 method Arguments i   ref     lambdaOut
break
case   ExpressionType Lambda lambda 表达式
LambdaExpression   lambda     expression   as   LambdaExpression
lambdaOut Add lambda
VisitExpression2 lambda Body   ref     lambdaOut
break
case   ExpressionType Equal
case   ExpressionType AndAlso and 条件 运算
BinaryExpression   binary     expression   as   BinaryExpression
Console WriteLine 运算符     expression NodeType ToString
VisitExpression2 binary Left   ref     lambdaOut
VisitExpression2 binary Right   ref     lambdaOut
break
case   ExpressionType Constant 常量 值
ConstantExpression   constant     expression   as   ConstantExpression
Console WriteLine 常量 值     constant Value ToString
break
case   ExpressionType MemberAccess
MemberExpression   Member     expression   as   MemberExpression
Console WriteLine 字段名 称 { 类型 {   Member Member Name   Member Type ToString
break
case   ExpressionType Quote
UnaryExpression   Unary     expression   as   UnaryExpression
VisitExpression2 Unary Operand   ref     lambdaOut
break
default
Console Write UnKnow
break
方法   Execute  
public   TResult   Execute TResult Expression   expression
{
List LambdaExpression   lambda     null
AnalysisExpression VisitExpression2 expression   ref   lambda 解析 表达式 数中 表达式
IEnumerable Student   enumerable     null
for   int   i       i     lambda Count   i ++
{
LambdaExpression 转成 Expression Func Student   bool 类型
方法 Compile 转 成 委托 方法
Func Student   bool   func     lambda i   as   Expression Func Student   bool Compile
if   enumerable     null
enumerable     Program StudentArrary Where func IEnumerable
else
enumerable     enumerable Where func
dynamic   obj     enumerable ToList 方法 处理过程 换成 解析 sql 执行 数据库 查询 生成 url 请求 获取数据
return   TResult obj
执行 过程
  IQueryable   延迟 加载 理解
前段 查询 操作符 逻辑 分解 存入 表达式 树 远程 执行 sql
foreache 执行   IEnumerable T     IEnumerable T   延迟 加载 特性 每次 迭代 取 数据 导航 属性 查询数据库 下次 说 延迟 加载 忘记   IEnumerable   功劳
知识
表达式 树转成 Lambda 表达式
Expression Func Student   bool   expression     t     t Name     农码 一生
Func Student   bool   func     expression Compile
表达式 树 分析 告一段落 细节 分析 下次 新 心得
感觉 表达式 树 先 表达式 打散 树结构 里 打散 过程 编译器 数据源 接口 组装 成 想要 形式 orm
表达式 树 解析 IQueryable T IQueryProvider 做 记录 错误 结论 说法 轻点 拍
demo 下载 http pan baidu com s 1nvAksgL
本文 同步 索引 目录 C# 基础知识
推荐 阅读
http www cnblogs com jesse2013 p expressiontree part1 html
http www cnblogs com jesse2013 p expressiontree part2 html
http www cnblogs com jesse2013 p expressiontree Linq to cnblogs html
园友 风口 猪 推荐
http www cnblogs com Ninputer archive 2009 09 08 expression tree3 htmlhttp blog zhaojie me 2009 03 expression cache html
面向对象编程 思想 策略 模式
定义
策略 模式
官方 定义 定义 一系列 算法 算法 封装 相互 替换
理解 选择 执行 多个 规则 中 规则
C#
需求   开发 商场 收银 系统 v1.0
三下五除二 搞定
代码
var   price     Convert ToDouble txtPrice Text 单价
var   number     Convert ToDouble txtNumber Text 数量
var   lastTotal     Convert ToDouble labTotal Text 购买 金额
var   money     price     number 本次 计算 金额
labTotal Text     lastTotal     money ToString
txtContent Text     string Format 单价 { 数量 { 金额 {   price   number   money     r n
系统 简单 实用 性能 几个 月 国庆 长假 老板 促销 全场 8.8 折
需求   打折 功能
项目 工期紧 三下五除二 搞定
var   price     Convert ToDouble txtPrice Text 单价
var   number     Convert ToDouble txtNumber Text 数量
var   lastTotal     Convert ToDouble labTotal Text 购买 金额
var   discount     0.88 折扣 新增 代码
var   money     price     number     discount 本次 计算 金额
labTotal Text     lastTotal     money ToString
txtContent Text     string Format 单价 { 数量 { 折扣 { 金额 {   price   number   discount   money     r n
自豪 开发 效率 高 老板 甚
转眼 假期 打折 活动 取消 促销 效果 收益 不错 老板 打折 活动 折扣率 9.8 折 商品 打折 商品 实行 300 返 40 600 返 100
不对劲 改 代码 明年 8.8 老板 心思 猜不透 程序 写 灵活 好好 构思 系统 选择 优惠 策略
需求   修改 打折 返现 功能
代码
var   price     Convert ToDouble txtPrice Text 单价
var   number     Convert ToDouble txtNumber Text 数量
var   lastTotal     Convert ToDouble labTotal Text 购买 金额
var   money     price     number 本次 计算 金额
switch   cmBstrategy Text 下拉框
{
case   8.8 折
money     0.88
break
case   9.8 折
money     0.98
break
case   300 返 40
if   money     300
{
money     40
break
case   600 返 100
if   money     600
{
money     100
break
labTotal Text     lastTotal     money ToString
txtContent Text     string Format 单价 { 数量 { 促销 { 金额 {   price   number   cmBstrategy Text   money     r n
收银员 灵活 切换 优惠活动 保留 原有 优惠 策略 代码 层面 多处
switch 条件 分支 语句 难以 阅读 维护
修改 新增 优惠 策略 需在 界面 代码 修改
面向对象 思想 封装 变化 策略 模式 登场
代码 重构   策略 模式 需求
var   price     Convert ToDouble txtPrice Text 单价
var   number     Convert ToDouble txtNumber Text 数量
var   lastTotal     Convert ToDouble labTotal Text 购买 金额
var   context     new   Context cmBstrategy Text 新增 代码
var   money     context Calculation price   number 新增 代码
labTotal Text     lastTotal     money ToString
txtContent Text     string Format 单价 { 数量 { 促销 { 金额 {   price   number   cmBstrategy Text   money     r n
发现 那段 条件 分支 不见 Context 类
public   class   Context
{
策略 抽象类
private   AmountCalculation   amountCalculation
public   Context string   type
{
switch   type
{
case   8.8 折
amountCalculation     new   Rebate 0.88
break
case   9.8 折
amountCalculation     new   Rebate 0.98
break
case   300 返 40
amountCalculation     new   Cashback 300   40
break
case   600 返 100
amountCalculation     new   Cashback 600   100
break
计算 金额
public   double   Calculation double   price   double   number
{
return   amountCalculation Calculation price   number
有类 Rebate 折扣 计算 Cashback 返现 计算
折扣 计算
public   class   Rebate     AmountCalculation
{
private   double   discountRate
public   Rebate double   discountRate
{
this discountRate     discountRate
public   override   double   Calculation double   price   double   number
{
return   price     number     discountRate
  返现
public   class   Cashback     AmountCalculation
{
private   double   exceed
返
private   double   retreat
public   Cashback double   exceed   double   retreat
{
this exceed     exceed
this retreat     retreat
public   override   double   Calculation double   price   double   number
{
var   momoney     price     number
if   momoney     exceed
{
return   momoney     retreat
return   momoney
明白 策略 模式
老板 价格 折扣 返现 活动 相比 长段 界面 逻辑 代码 修改
第一 先 界面 添加 活动 如加 7.8 折 界面 代码 不用 动
Context 类 加 7.8 折
switch   type
{
新增
case   7.8 折
amountCalculation     new   Rebate 0.78
break
JS
C# 策略 模式 尝试 js 借用 商场 活动 业务
js 不同于 传统 面向对象 无类 抽象类
策略 计算
var   strategies     {
返现     exceed     retreat 返     momoney 应付 金额
cashBack   function   exceed   retreat   momoney   {
if   momoney     exceed   {
return   momoney     retreat toFixed
return   momoney 返现 实付 金额
打折   discountRate 折扣率     momoney 应付 金额
rebate   function   discountRate   momoney   {
return   discountRate     momoney toFixed 折扣 实付 金额
上下文
var   context     {
7.8 折   function   price   number   {
var   momoney     price     number
return   strategies rebate 0.78   momoney
9.8 折   function   price   number   {
var   momoney     price     number
return   strategies rebate 0.98   momoney
300 返 40   function   price   number   {
var   momoney     price     number
return   strategies cashBack 300   40   momoney
600 返 100   function   price   number   {
var   momoney     price     number
return   strategies cashBack 600   100   momoney
计算结果
var   calculateBonus     function   level   price   number   {
return   context level price   number
调用
console log calculateBonus 7.8 折   12   计算
console log calculateBonus 600 返 100   12   计算
console log calculateBonus 300 返 40     23 计算
console log calculateBonus 9.8 折     33 计算
面向对象 语言 清晰 明
js 模拟 面向对象 答案 肯定
定义 返现 类
返现     exceed     retreat 返
var   CashBack     function   exceed   retreat   {
this exceed     exceed
this retreat     retreat
计算方法
CashBack prototype calculate     function   price   number   {
var   momoney     price     number
if   momoney     this exceed   {
return   momoney     this retreat toFixed
return   momoney 返现 实付 金额
打折 类
打折   discountRate 折扣率     momoney 应付 金额
var   Rebate     function   discountRate   {
this discountRate     discountRate
计算方法
Rebate prototype calculate     function   price   number   {
return   price     number     this discountRate toFixed 折扣 实付 金额
策略 上下文
上下文
var   Context     function   type   {
this type     type
Context prototype calculation     function   price   number   {
var   AmountCalculation
switch   this type   {
case   7.8 折
AmountCalculation     new   Rebate 0.78
break
case   9.8 折
AmountCalculation     new   Rebate 0.98
break
case   300 返 40
AmountCalculation     new   CashBack 300   40
break
case   600 返 100
AmountCalculation     new   CashBack 600   100
break
return   AmountCalculation calculate price   number
调用
调用
var   context     new   Context 7.8 折
console log context calculation 12  
var   context     new   Context 9.8 折
console log context calculation 12   计算
var   context     new   Context 300 返 40
console log context calculation 300   计算
var   context     new   Context 600 返 100
console log context calculation 300   计算
js 语言 特性 策略 模式 面向对象 代码 量 端 人员 new 对象 方式 习惯
策略 模式 场景
排序 算法 选择 冒泡排序 选择 排序 快速 排序 插入排序
压缩算法 选择 zip rar rar5
旅游 交通工具 选择 飞机 火车 汽车
策略 模式 Context 上下文 策略 封装 供 高层 调用 不用 关系 策略 Context 情况 实例 抽象 类 策略 类 执行 策略 策略 自由 切换 易于 新策略 扩展
本文 同步 索引 目录 设计模式 学习
本文 demo https github com zhaopeiym BlogDemoCode
面向对象编程 思想 单例 模式
世界 本来 设计模式 成 设计模式 定义 执行 场景 需求 变通 领悟 思想 设计模式
肯定 有过 体会 听人 说起 模式 牛 逼 回去 仔细 一看 早就 高大 名字 专业 名字 业内 交流 教学 技术 发展 传播 起着 作用
废话 不多 说 学习 高大 术语 系列 设计模式 学习 传统 面向对象编程 语言 C# 函数 第一等 元素 javascript 语言 学习 加深 设计模式 领悟
定义
单例 模式
理解 只能 实例
官方 解释 保证 类仅 实例 提供 访问 全局 访问 点
C# 代码 示例
示例
public   static   class   Singleton
{
TODO
表 激动 确实 平时 单例 模式 静态 对象 当成 单例
肯定 搞 单例 模式
致命 缺点 继承 类 接口
静态 类中 方法 字 段 静态
无法控制 初始化
静态 类 编写 业务 无关 基础 方法 扩展 方法 单例 类 实例 类 业务 相关
示例
public   class   Singleton
{
public   static   Singleton   singleton     new   Singleton
Console WriteLine Singleton singleton Equals Singleton singleton true
假单 例
Singleton   s1     new   Singleton
Singleton   s2     new   Singleton
Console WriteLine s1 Equals s2 false
缺点
类 加载 自动 初始化 singleton
singleton 定义 只读 属性
示例
public   class   Singleton
{
public   static   readonly   Singleton   singleton     new   Singleton 自读 字 段
private   Singleton 禁止 初始化
{
这是 比较简单 单例 自动化 初始 变量
示例
public   class   Singleton
{
public   static   Singleton   singleton     null
public   static   Singleton   GetSingleton
{
if   singleton     null
{
singleton     new   Singleton
return   singleton
private   Singleton 禁止 初始化
{
如此一来 调用 GetSingleton 方法 实例 话 实例 化 singleton 变量值 GC 回收 静态 变量
完事 多线程 执行 多个 实例
public   class   Singleton
{
public   static   Singleton   singleton     null
public   static   Singleton   GetSingleton
{
if   singleton     null   线程 执行 singleton     null true 实例 Singleton
{
线程 执行
Thread Sleep 1000 假设 段 耗时 逻辑 理解 并发 极限
singleton     new   Singleton
return   singleton
private   Singleton 禁止 初始化
{
改进
示例
public   class   Singleton
{
public   static   Singleton   singleton     null
private   static   object   obj     new   object
public   static   Singleton   GetSingleton
{
if   singleton     null   有锁 判断 锁会 阻塞 线程 singleton 实例 化后 判断 永远 false 锁
{
lock   obj
{
代码 线程 到达
if   singleton     null
{
Thread Sleep 1000
singleton     new   Singleton
return   singleton
private   Singleton 禁止 初始化
{
常见 单例 类 代码 改成 读取 属性 方式 区别
public   class   Singleton
{
private   static   Singleton   singleton     null
private   static   object   obj     new   object
public   static   Singleton   Instance
{
get
{
if   singleton     null
{
lock   obj
{
if   singleton     null
{
singleton     new   Singleton
return   singleton
private   Singleton 禁止 初始化
{
C# 场景
笔墨 分析 单例 模式 场景 单例
典型 配置文件 读取 配置文件 程序 第一次 启动 读取 运行 中是 修改 配置文件
public   class   ConfigInfo
{
private   static   ConfigInfo   singleton     null
private   static   object   obj     new   object
public   static   ConfigInfo   Instance
{
get
{
if   singleton     null
{
lock   obj
{
if   singleton     null
{
singleton     new   ConfigInfo
配置文件 读取 赋值
singleton Email     zhaopeiym 163 com
singleton EmailUser     农码 一生
singleton EmailPass    
return   singleton
public   string   Email   {   get   private   set  
public   string   EmailUser   {   get   private   set  
public   string   EmailPass   {   get   private   set  
private   ConfigInfo 禁止 初始化
{
调用
var   emailInfo     ConfigInfo Instance
EmailSend emailInfo Email emailInfo EmailUser emailInfo EmailPass
C# 中 单例 模式
JS 代码 示例
js C# 无类 语言 传统 面向对象 语言 js 中 单例 比较简单 熟悉 window 对象
js 中 单例 模式 方法 先来 简单
示例
var   Singleton     {
name   农码 一生
getName   function     {
return   this name
简单 单例 字面 量 创建 对象 看着 C# 中 静态 类 静态 类中 缺点
继承 压力
var   Person     {
age   27
var   Me     Person
Me name     农码 一生
Me getName     function     {
return   this name
Me getAge     function     {
return   this age
完美 按理说 字段 外界 随意 修改 js 无类 私有 字段 幸运 js 中有 无处不在 闭包
示例
var   Singleton     function     {
var   name     农码 一生
return   {
getName   function     {
return   name
如此一来 单例 模式 C# 单例 分析 希望 实例 话 对象 小看 惰性 加载 开发 中 作用 可大着
示例
var   Singleton     function     {
var   Person     function     {
this name     农码 一生
Person prototype getName     function     {
return   this name
var   instance
return   {
getInstance   function     {
if   instance   {
instance     new   Person
return   instance
var   person1     Singleton getInstance
var   person2     Singleton getInstance
console log person1     person2 true
算是 js 中 标准 单例 模式 同学会 问 C# 记得 加 lock 锁 标准 忘记 js 天生 单线程 后台 天生 多线程 区别
职责 单一 改写 成
示例
var   Person     function     {
this name     农码 一生
Person prototype getName     function     {
return   this name
var   Singleton     function     {
var   instance
return   {
getInstance   function     {
return   instance       instance     new   Person 简化 if 判断
单例 可否 对象 单例 过程 抽象
示例
通用 创建 单例 对象 方法
var   getSingle     function   obj   {
var   instance
return   function     {
return   instance     instance     new   obj
var   PersonA     function     {
this name     农码 一生
var   PersonB     function     {
this name     农码 爱 妹子
var   singlePersonA     getSingle PersonA 获取 PersonA 单例
var   singlePersonB     getSingle PersonB 获取 PersonB 单例
var   a1     singlePersonA
var   a2     singlePersonA
var   a3     singlePersonB
var   a4     singlePersonB
console log a1     a2 true
console log a3     a4 true
console log a1     a3 false
有没有 头晕 晕 习惯 说 全局变量 字面 量 对象 忘记 变量名 污染
JS 场景
做 Tab 切换 用到 单例 模式 做个 非 单例 单例
示例 非 单例
获取 tab1 html 数据
var   getTab1Html     function     {
this url     tab tab1 json
get this url   function   data   {
        获取 请求 数据 加载 tab 页面
  json
console log 执行
var   getTab2Html     function     {
this url     tab tab2 json
get this url   function   data   {
        获取 请求 数据 加载 tab 页面
  json
console log 执行
点击 tab1 加载 tab1 数据
tab1 on click   function     {
getTab1Html
tab2 on click   function     {
getTab2Html
发现 点击 tab 请求 后台 数据 加载 页面 傻 正确 姿势 第一次 点击 加载 请求 加载 单例 模式
示例 单例
获取 tab1 html 数据
var   getTab1Html     function     {
this url     tab tab1 json
get this url   function   data   {
        获取 请求 数据 加载 tab 页面
  json
console log 执行
var   getTab2Html     function     {
this url     tab tab2 json
get this url   function   data   {
        获取 请求 数据 加载 tab 页面
  json
console log 执行
var   loadTab1     getSingle getTab1Html
var   loadTab2     getSingle getTab2Html
点击 tab1 加载 tab1 数据
tab1 on click   function     {
loadTab1
tab2 on click   function     {
loadTab2
点击 tab 只会 第一次 点击 请求 加载 页面 数据
JS 中 建议 全局变量 单例 效果
变量名 全局 污染
惰性 加载
C# 中 建议 静态 类来 单例 效果
继承 类 接口
内部 变量 方法 静态
单例 模式 中 实例 变量 慎用 单例 多处 操作 修改 变量 影响 预期 效果
设计模式 设计模式 尝试 改进 最佳 实践 生搬硬套 适合 单例 模式 学习 到此结束 谢谢您 阅读
本文 同步 索引 目录 设计模式 学习
本文 demo https github com zhaopeiym BlogDemoCode
C# 异步 世界
新 进阶 程序员 async await 用得 异步 甚 少 此类 打算 回顾 学习 异步 进化史
本文 回顾 async 异步 模式 异步 篇文章 重点 分析 async 异步 模式
APM
APM   异步 编程 模型 Asynchronous   Programming   Model
早 C# APM 熟悉 类 BeginXXX EndXXX 方法 BeginXXX 返回值 IAsyncResult 接口
正式 写 APM 示例 先 给出 一段 同步 代码
同步 方法
private   void   button1 Click object   sender   EventArgs   e
{
Debug WriteLine Debug 线程 ID     Thread CurrentThread ManagedThreadId
var   request     WebRequest Create https github com 更好 演示 效果 网速 比较慢 外网
request GetResponse 发送 请求
Debug WriteLine Debug 线程 ID     Thread CurrentThread ManagedThreadId
label1 Text     执行 完毕
更好 演示 异步 效果 winform 程序 做 示例 winform 始终 UI 线程 渲染 界面 UI 线程 占用 假死 状态
效果图
图 得知
执行 方法 页面 假死 拖不动
打印 方法 调用 前 调用 线程 ID 同一个 线程
演示 异步 方法 BeginGetResponse EndGetResponse APM 异步 模型
private   void   button2 Click object   sender   EventArgs   e
{
APM   异步 编程 模型 Asynchronous   Programming   Model
C# IAsyncResult 接口 BeginXXX EndXXX 方法
Debug WriteLine Debug 主线 程 ID     Thread CurrentThread ManagedThreadId
var   request     WebRequest Create https github com
request BeginGetResponse new   AsyncCallback t   执行 回调
{
var   response     request EndGetResponse t
var   stream     response GetResponseStream 获取 返回 数据流
using   StreamReader   reader     new   StreamReader stream
{
StringBuilder   sb     new   StringBuilder
while   reader EndOfStream
{
var   content     reader ReadLine
sb Append content
Debug WriteLine Debug     sb ToString Trim Substring   100     只取 返回 内容 前 100 个字符
Debug WriteLine Debug 异步 线程 ID     Thread CurrentThread ManagedThreadId
label1 Invoke Action     {   label1 Text     执行 完毕   跨 线程 访问 UI 做
  null
Debug WriteLine Debug 主线 程 ID     Thread CurrentThread ManagedThreadId
效果图
图 得知
启用 异步 方法 UI 界面 卡死
异步 方法 启动 ID 12 线程
代码执行 顺序
说 APM BebinXXX 返回 IAsyncResult 接口 分析 IAsyncResult 接口
确实 返回 IAsyncResult 接口 IAsyncResult 长 样子
想象 中 尝试 接口 显示 异步 方法
类 MyWebRequest 继承 IAsyncResult 伪 代码
public   class   MyWebRequest     IAsyncResult
{
public   object   AsyncState
{
get   {   throw   new   NotImplementedException  
public   WaitHandle   AsyncWaitHandle
{
get   {   throw   new   NotImplementedException  
public   bool   CompletedSynchronously
{
get   {   throw   new   NotImplementedException  
public   bool   IsCompleted
{
get   {   throw   new   NotImplementedException  
肯定 起码 存 回调 函数 属性 稍微 改造
自定义 APM 异步 模型 成对 Begin End
public   IAsyncResult   MyBeginXX AsyncCallback   callback
{
var   asyncResult     new   MyWebRequest callback   null
var   request     WebRequest Create https github com
new   Thread       启用 线程
{
using   StreamReader   sr     new   StreamReader request GetResponse GetResponseStream
{
var   str     sr ReadToEnd
asyncResult SetComplete str 设置 异步
Start
return   asyncResult 返回 IAsyncResult
public   string   MyEndXX IAsyncResult   asyncResult
{
MyWebRequest   result     asyncResult   as   MyWebRequest
return   result Result
调用
private   void   button4 Click object   sender   EventArgs   e
{
Debug WriteLine Debug 主线 程 ID     Thread CurrentThread ManagedThreadId
MyBeginXX new   AsyncCallback t  
{
var   result     MyEndXX t
Debug WriteLine Debug     result Trim Substring   100    
Debug WriteLine Debug 异步 线程 ID     Thread CurrentThread ManagedThreadId
Debug WriteLine Debug 主线 程 ID     Thread CurrentThread ManagedThreadId
效果图
效果 系统 提供
启用 异步 方法 UI 界面 卡死
异步 方法 启动 ID 11 线程
APM 异步 模式 启用 线程 执行 耗时 回调 函数 执行 后续 操作
APM 方式 获取 值
while   asyncResult IsCompleted 循环 异步 执行   轮询 方式
{
Thread Sleep 100
var   stream2     request EndGetResponse asyncResult GetResponseStream
asyncResult AsyncWaitHandle WaitOne 阻止 线程 异步   阻塞 等待
var   stream2     request EndGetResponse asyncResult GetResponseStream
补充 方法 委托 异步 BeginInvoke EndInvoke
public   void   MyAction
{
var   func     new   Func string   string t  
{
Thread Sleep 2000
return   name     t     DateTime Now ToString
var   asyncResult     func BeginInvoke 张三   t  
{
string   str     func EndInvoke t
Debug WriteLine str
  null
EAP
EAP   事件 异步 模式 Event based   Asynchronous   Pattern
模式 C# 随之而来
先 EAP 例子
private   void   button3 Click object   sender   EventArgs   e
{
Debug WriteLine Debug 主线 程 ID     Thread CurrentThread ManagedThreadId
BackgroundWorker   worker     new   BackgroundWorker
worker DoWork     new   DoWorkEventHandler s1   s2  
{
Thread Sleep 2000
Debug WriteLine Debug 异步 线程 ID     Thread CurrentThread ManagedThreadId
注册 事件 异步
worker RunWorkerAsync this
Debug WriteLine Debug 主线 程 ID     Thread CurrentThread ManagedThreadId
效果图 阻塞 UI 界面
特征
事件 方式 注册 回调 函数
  XXXAsync 方法 执行 异步 调用
例子 简单 APM 模式 相比 清晰 透明 事件 注册 干嘛 执行 RunWorkerAsync 触发 注册 函数
感觉 想
试着 反编译 源码
只想 说 玩 有意思
TAP
TAP   异步 模式 Task based   Asynchronous   Pattern
目前为止 APM EAP 异步 模式 好用 好像 发现 仔细 想想 多个 异步 方法 先后顺序 执行 主 进程 返回值
定义 三个 委托
public   Func string   string   func1
{
return   new   Func string   string t  
{
Thread Sleep 2000
return   name     t
public   Func string   string   func2
{
return   new   Func string   string t  
{
Thread Sleep 2000
return   age     t
public   Func string   string   func3
{
return   new   Func string   string t  
{
Thread Sleep 2000
return   sex     t
顺序 执行
public   void   MyAction
{
string   str1     string Empty   str2     string Empty   str3     string Empty
IAsyncResult   asyncResult1     null   asyncResult2     null   asyncResult3     null
asyncResult1     func1 BeginInvoke 张三   t  
{
str1     func1 EndInvoke t
Debug WriteLine Debug 异步 线程 ID     Thread CurrentThread ManagedThreadId
asyncResult2     func2 BeginInvoke 26   a  
{
str2     func2 EndInvoke a
Debug WriteLine Debug 异步 线程 ID     Thread CurrentThread ManagedThreadId
asyncResult3     func3 BeginInvoke 男   s  
{
str3     func3 EndInvoke s
Debug WriteLine Debug 异步 线程 ID     Thread CurrentThread ManagedThreadId
  null
  null
  null
asyncResult1 AsyncWaitHandle WaitOne
asyncResult2 AsyncWaitHandle WaitOne
asyncResult3 AsyncWaitHandle WaitOne
Debug WriteLine str1     str2     str3
难看 难读 一点 好像 没什么   真的
asyncResult2 null 第一个 异步 操作 asyncResult2 赋值 asyncResult2 执行 异步 等待 报 异常 无法控制 三个 异步 函数 顺序 执行 拿到 返回值 理论 办法 会然 代码
TAP 登场
调用 Task 类 静态方法 Run 即可 轻轻松松 异步
获取 返回值
var   task1     Task string Run  
{
Thread Sleep 1500
Console WriteLine Debug task1   线程 ID     Thread CurrentThread ManagedThreadId
return   张三
逻辑
task1 Wait
var   value     task1 Result 获取 返回值
Console WriteLine Debug 主   线程 ID     Thread CurrentThread ManagedThreadId
多个 异步 按序 执行
Console WriteLine Debug 主   线程 ID     Thread CurrentThread ManagedThreadId
string   str1     string Empty   str2     string Empty   str3     string Empty
var   task1     Task Run  
{
Thread Sleep 500
str1     姓名 张三
Console WriteLine Debug task1   线程 ID     Thread CurrentThread ManagedThreadId
ContinueWith t  
{
Thread Sleep 500
str2     年龄 25
Console WriteLine Debug task2   线程 ID     Thread CurrentThread ManagedThreadId
ContinueWith t  
{
Thread Sleep 500
str3     爱好 妹子
Console WriteLine Debug task3   线程 ID     Thread CurrentThread ManagedThreadId
Thread Sleep 2500 逻辑 代码
task1 Wait
Debug WriteLine str1     str2     str3
Console WriteLine Debug 主   线程 ID     Thread CurrentThread ManagedThreadId
效果图
异步 按序 执行 代码 逻辑 思路 清晰 感受 很大 现象 100 异步 方法 异步 按序 执行 APM 异步 回调 至少 异步 回调 嵌套 100 次 代码 复杂度 可想而知
延伸 思考
WaitOne 等待 原理
异步 提升 性能
线程 数量 CPU 使用率
WaitOne 等待 原理
在此之前 先 简单 多线程 信号 控制 AutoResetEvent 类
var   asyncWaitHandle     new   AutoResetEvent false
asyncWaitHandle WaitOne
代码   WaitOne   地方 等待 线程 执行   AutoResetEvent   set 方法
var   asyncWaitHandle     new   AutoResetEvent false
asyncWaitHandle Set
asyncWaitHandle WaitOne
  WaitOne   执行 等待
APM   异步 编程 模型 中   WaitOne   等待 点 回头 自定义 异步 方法 异步 等待
public   class   MyWebRequest     IAsyncResult
{
异步 回调 函数 委托
private   AsyncCallback   asyncCallback
private   AutoResetEvent   asyncWaitHandle
public   MyWebRequest AsyncCallback   asyncCallback   object   state
{
asyncCallback     asyncCallback
asyncWaitHandle     new   AutoResetEvent false
设置
public   void   SetComplete string   result
{
Result     result
IsCompleted     true
asyncWaitHandle Set
if   asyncCallback     null
{
asyncCallback this
异步 请求 返回值
public   string   Result   {   get   set  
获取 用户 定义 对象 限定 包含 异步 操作 信息
public   object   AsyncState
{
get   {   throw   new   NotImplementedException  
  获取 用于 等待 异步 操作   System Threading WaitHandle
public   WaitHandle   AsyncWaitHandle
{
get   {   throw   new   NotImplementedException  
get   {   return   asyncWaitHandle  
获取 值 该值 指示 异步 操作 同步
public   bool   CompletedSynchronously
{
get   {   throw   new   NotImplementedException  
获取 值 该值 指示 异步 操作
public   bool   IsCompleted
{
get
private   set
红色 代码 新增 异步 等待
执行 步骤
异步 提升 性能
同步 代码
Thread Sleep 10000 假设 访问 数据库 方法
Thread Sleep 10000 假设 访问 FQ 网站 方法
代码 20 秒
异步
var   task     Task Run  
{
Thread Sleep 10000 假设 访问 数据库 方法
Thread Sleep 10000 假设 访问 FQ 网站 方法
task Wait
10 秒 节约 10 秒
var   task     Task Run  
{
Thread Sleep 10000 假设 访问 数据库 方法
task Wait
异步 执行 耗时 代码 异步
var   task     Task Run  
{
Thread Sleep 10000 假设 访问 数据库 方法
task Wait
Thread Sleep 10000 假设 访问 FQ 网站 方法
耗时 放在 异步 等待 代码 性能 提升
一种 情况
单核 CPU 高 密集 运算 操作 异步 意义 运算 耗 CPU 网络 请求 等待 不耗 CPU
线程 数量 CPU 使用率
答案
单核 做 假设
情况
long   num    
while   true
{
num     new   Random Next 100 100
Thread Sleep 100
单核 启动 线程 CPU 爆满
启动 八次 进程 CPU 爆满
情况
一千多个 线程 CPU 使用率 结论 线程 数量 CPU 使用率
节制 开启 线程
开启 新 线程 过程 耗 资源 线程 池 降低 开启 新 线程 消耗 资源
多线程 切换 时间
线程 占用 内存 保存 线程 上下文 信息
demo http pan baidu com s 1slOxgnF
本文 同步 索引 目录 C# 基础知识
异步 编程 不深 文中 极有 多处 错误 描述 观点
感谢 园友 指正
相互讨论 目的 绝无 想要 误导
推荐
http www cnblogs com wisdomqq archive 2012 03 26 2412349 html
农码 一生 博文 索引
NET   Core
ASP NET   Core   快速 入门 第一 弹 环境 篇
ASP NET   Core   快速 入门 弹 实战篇
Linux 学习
Linux 学习 常用 快捷键 文件 管理 查询
C# 基础知识
特性 东东
反射 反射 做些
依赖 注入
可空 类型 Nullable T 鬼
谈 扩展 方法 理解
EF 知识 经验 推荐
C# 中 Lambda 表达式 演化过程
Linq 表达式 Lambda 表达式 喜欢
先说 IEnumerable foreach 真的 懂 推荐
讲 IQueryable T 揭开 表达式 树 神秘 面纱 推荐
年 搞不懂 术语 概念 协变 逆变 变
C# 异步 世界
C# 异步 世界 推荐
C# 单元测试 快速 入门
权限 管理 学习   ASP NET   Forms 身份 认证
文件 下载 断点续传 客户端 服务端
文件 上传 离不开 表单
一步步 学习 javascript 基础 篇
一步步 学习 javascript 基础 篇 基本概念
一步步 学习 javascript 基础 篇 作用域 作用域 链
一步步 学习 javascript 基础 篇 Object Function 引用 类型
一步步 学习 javascript 基础 篇 面向对象 设计 创建对象 工厂 原型 构造函数 模式
一步步 学习 javascript 基础 篇 面向对象 设计 对象 继承 原型 链 继承
一步步 学习 javascript 基础 篇 函数 表达式 闭包
一步步 学习 javascript 基础 篇 BOM DOM
一步步 学习 javascript 基础 篇 事件 推荐
一步步 学习 javascript 基础 篇 ajax 请求 回退
一步步 开发 博客   NET 版
一步步 开发 博客   NET 版 显示
一步步 搭建 博客   NET 版 评论 功能
一步步 开发 博客   NET 版 注册 登录 功能
一步步 开发 博客   NET 版 文章 发布 功能 百度 编辑器
一步步 开发 博客   NET 版 Lucenne Net     应 站内搜索
一步步 开发 博客   NET 版 响应 式 布局     自定义 样式 推荐
一步步 开发 博客   番外篇 异步 记录 日志     文章 阅读 量 统计
一步步 开发 博客   番外篇 第三方 登录 记录
一步步 开发 博客   NET 版 model   first 替换成 code   first   记录
一步步 开发 博客   NET 版 10 前端 对话框 消息 框
一步步 开发 博客   NET 版 11 Web config 文件 读取 修改
设计模式 学习
面向对象编程 思想 前传 javascript
面向对象编程 思想 单例 模式   创建 型
面向对象编程 思想 工厂 模式   创建 型
面向对象编程 思想 组合 模式   结构型
面向对象编程 思想 适配器 模式   结构型
面向对象编程 思想 装饰 模式   结构型
面向对象编程 思想 享元 模式   结构型
面向对象编程 思想 代理 模式   结构型
面向对象编程 思想 策略 模式   型
面向对象编程 思想 观察者 模式   型
面向对象编程 思想 模板 方法 模式   型
面向对象编程 思想 命令 模式   型
面向对象编程 思想 状态 模式   型
面向对象编程 思想 责任 链 模式   型
面向对象编程 思想 中介 模式   型
面向对象编程 思想 迭代 器 模式   型
分类 文章
写 博客 推荐
各大 招聘 网站 信息 实时 查询 浏览
各大 招聘 网站 信息 实时 查询 浏览
推荐 书单
理解 C#
大话 设计模式
net 之美
net
JavaScript 高级 程序设计
JavaScript 设计模式 开发 实践
C# 异步 世界
接上 篇 C# 异步 世界
篇 分析 async await 异步 模式 说 异步 指 C# async await 异步 表述 称 async await 异步 旧 异步 async await 新 异步
新 异步
只能 说 新 异步 太 简单 仅仅只是 说
方法 async 修饰符 await 关键字 执行 异步 方法 即可 简单 同步 方法 逻辑 异步
public   async   Task int   Test
{
var   num1     await   GetNumber
var   num2     await   GetNumber num1
var   task       GetNumber num2
var   num3     await   task
return   num1     num2     num3
新 异步 优势
在此之前 多种 异步 模式 引入 学习 新 async await 异步 肯定 独特 优势
分 两个 分析 WinForm WPF 单线程 UI 程序 Web 后台 服务程序
WinForm WPF 单线程 UI 程序
代码 旧 异步
private   void   button1 Click object   sender   EventArgs   e
{
var   request     WebRequest Create https github com
request BeginGetResponse new   AsyncCallback t  
{
请求 逻辑 写
label1 Invoke Action     {   label1 Text     旧 异步 执行 完毕   跨 线程 访问 UI 做
  null
代码 同步
private   void   button3 Click object   sender   EventArgs   e
{
HttpClient   http     new   HttpClient
var   htmlStr     http GetStringAsync https github com Result
请求 逻辑 写
label1 Text     同步 执行 完毕 做 跨 线程 UI
代码 新 异步
private   async   void   button2 Click object   sender   EventArgs   e
{
HttpClient   http     new   HttpClient
var   htmlStr     await   http GetStringAsync https github com
请求 逻辑 写
label1 Text     新 异步 执行 完毕 做 跨 线程 UI
新 异步 优势
烦人 回调
同步 代码 阻塞 UI 界面 假死
旧 异步 访问 UI 做 跨 线程
同步 代码 异步 超 清晰 逻辑
说 效果图 来得 新旧 异步 UI 线程 阻塞 同步 阻塞 UI 线程
思考 旧 异步 模式 开启 新 线程 执行 阻塞 UI 线程 理解 新 异步 同步 区别 阻塞 界面
原因 新 异步 执行 await 表达式 前 UI 线程 await 表达式 启用 新 线程 执行 异步 异步 执行 返回 回到 UI 线程 SynchronizationContext await 阻塞 UI 线程 界面 假死
演示 同步 代码 Result UI 单线程 程序 中 Result 异步 代码 同步 代码 一件 危险 事 起码 不太 新 异步 同学 原因 稍候 分析 别跑
Web 后台 服务程序
也许 后台程序 影响 单线程 程序 直观 价值 新 异步 误解
误解 新 异步 提升 Web 程序 性能
正 解 异步 提升 单次 请求 时间 提高 Web 程序 吞吐量
提升 单次 请求 时间
示例 代码 UI 程序 代码
提高 Web 程序 吞吐量
吞吐量 本来 只能 十个 访问 网站 二十个 访问 常说 并发 量
代码 解释 代码   阻塞 UI 线程 等待 请求 UI 线程 占用 代码 新 线程 请求 UI 线程 占用 响应 UI 界面
Web 程序 天生 多线程 web 线程 跑 线程 池 线程 线程 池 线程 创建 销毁 线程 资源 成本 浪费 线程 池 线程 线程 数量 设置 如此一来 web 线程 珍贵 物以稀为贵 滥用 完 用户 请求 503
算是 滥用 文件 读取 URL 请求 数据库 访问 IO 请求 web 线程 做 耗时 IO 操作 阻塞 web 线程 web 线程 阻塞 web 线程 池 线程 web 程序 访问 数
新 异步 横空出世 解放 原本 IO 请求 阻塞 web 线程 想 偷懒 没门 干活 异步 方式 廉价 线程 非 web 线程 池 线程 IO 操作 web 线程 池 线程 解放出来 请求
信 测试
测试步骤
新建 web   api 项目
新建 数据 访问 类 提供 同步 异步 方法 方法 逻辑 执行 读取 时间 线程 id web 线程 池 线程 数
public   class   GetDataHelper
{
  summary
  同步 方法 获取数据
  summary
  returns returns
public   string   GetData
{
var   beginInfo     GetBeginThreadInfo
using   HttpClient   http     new   HttpClient
{
http GetStringAsync https github com Wait 同步 阻塞
return   beginInfo     GetEndThreadInfo
  summary
  异步 方法 获取数据
  summary
  returns returns
public   async   Task string   GetDataAsync
{
var   beginInfo     GetBeginThreadInfo
using   HttpClient   http     new   HttpClient
{
await   http GetStringAsync https github com 异步 等待
return   beginInfo     GetEndThreadInfo
public   string   GetBeginThreadInfo
{
int   t1   t2   t3
ThreadPool GetAvailableThreads out   t1   out   t3
ThreadPool GetMaxThreads out   t2   out   t3
return   string Format { mm ss ffff   线程 Id {   Web 线程 数 {
DateTime Now
Thread CurrentThread ManagedThreadId
t2     t1
public   string   GetEndThreadInfo
{
int   t1   t2   t3
ThreadPool GetAvailableThreads out   t1   out   t3
ThreadPool GetMaxThreads out   t2   out   t3
return   string Format   结束 { mm ss ffff   线程 Id {   Web 线程 数 {
DateTime Now
Thread CurrentThread ManagedThreadId
t2     t1
新建 web   api 控制器
HttpGet
public   async   Task string   Get string   str
{
GetDataHelper   sqlHelper     new   GetDataHelper
switch   str
{
case   异步
return   await   sqlHelper GetDataAsync
case   同步
return   sqlHelper GetData
return   参数 正确
发布 web   api 程序 部署 iis 同步 链接 http localhost 803 api Home str 同步     异步 链接 http localhost 803 api Home str 异步
winform 程序 测试 请求 发起 10 请求
private   void   button6 Click object   sender   EventArgs   e
{
textBox1 Text    
label1 Text    
Task Run  
{
TestResultUrl http localhost 803 api Home str 同步
private   void   button5 Click object   sender   EventArgs   e
{
textBox1 Text    
label1 Text    
Task Run  
{
TestResultUrl http localhost 803 api Home str 异步
public   void   TestResultUrl string   url
{
int   resultEnd    
HttpClient   http     new   HttpClient
int   number     10
for   int   i       i     number   i ++
{
new   Thread async    
{
var   resultStr     await   http GetStringAsync url
label1 Invoke Action  
{
textBox1 AppendText resultStr Replace     r t     r n
if   ++ resultEnd     number
{
label1 Text     执行 完毕
Start
View   Code
重启 iis 并用 浏览器 访问 请求 链接 地址 预热
启动 winform 程序 点击 访问 同步 Web
重复 重新启动 winform 程序 点击 访问 异步 Web
数据 感想
数据 正 解 吻合 仔细观察 单次 请求 用时 相差   步骤 同步 投入 web 线程 数是 10 步骤 异步 投入 web 线程 数是
异步 更少 web 线程 请求 数量 如此一来 剩余 web 线程 多用户 发起 请求
发现 同步 请求 线程 ID 异步 线程 ID 证明 执行 await 异步 前 释放 主线 程
结论
新 异步 提升 Web 服务程序 吞吐量
客户端 web 服务 异步 提高 客户端 次访问 速度
执行 新 异步 前会 释放 web 线程 等待 异步 执行 回到 web 线程 提高 web 线程 利用率
图解
Result 死锁 陷阱
分析 UI 单线程 程序 说 慎用 异步 Result 属性 分析
private   void   button4 Click object   sender   EventArgs   e
{
label1 Text     GetUlrString https github com Result
public   async   Task string   GetUlrString string   url
{
using   HttpClient   http     new   HttpClient
{
return   await   http GetStringAsync url
代码   GetUlrString https github com Result   Result 属性 阻塞 占用 UI 线程 执行 GetUlrString 方法   await 异步 释放 UI 线程 矛盾 线程 资源 抢占 导致 死锁
Result 属性 Wait 方法 阻塞 线程 此等 Web 服务程序 区别 UI 单次 线程 程序 web 服务程序 释放 主线 程 Web 服务 线程 回到 主线 程 UI 程序 回到 UI 线程
说 net 智能 自动 释放 主线 程 等待 异步 执行 完毕 回到 主线 程 是因为 SynchronizationContext 功劳
有个 例外 控制台 程序 SynchronizationContext 段 代码 放在 控制台 运行
static   void   Main string   args
{
Console WriteLine Thread CurrentThread ManagedThreadId
GetUlrString https github com Wait
Console WriteLine Thread CurrentThread ManagedThreadId
Console ReadKey
public   async   static   Task string   GetUlrString string   url
{
using   HttpClient   http     new   HttpClient
{
Console WriteLine Thread CurrentThread ManagedThreadId
return   await   http GetStringAsync url
打印 同一个 线程 ID
AsyncHelper 同步 代码 调用 异步
同步 方法 执行 异步 怎办 办法 肯定
定义 AsyncHelper 静态 类
static   class   AsyncHelper
{
private   static   readonly   TaskFactory   myTaskFactory     new   TaskFactory CancellationToken None
TaskCreationOptions None   TaskContinuationOptions None   TaskScheduler Default
public   static   TResult   RunSync TResult Func Task TResult   func
{
return   myTaskFactory StartNew func Unwrap GetAwaiter GetResult
public   static   void   RunSync Func Task   func
{
myTaskFactory StartNew func Unwrap GetAwaiter GetResult
调用 异步
private   void   button7 Click object   sender   EventArgs   e
{
label1 Text     AsyncHelper RunSync     GetUlrString https github com
死锁
ConfigureAwait
AsyncHelper Task ConfigureAwait 方法 死锁
private   void   button7 Click object   sender   EventArgs   e
{
label1 Text     GetUlrString https github com Result
public   async   Task string   GetUlrString string   url
{
using   HttpClient   http     new   HttpClient
{
return   await   http GetStringAsync url ConfigureAwait false
ConfigureAwait 作用 async 方法 await 后续 操作 恢复 主线 程 保存 线程 上下文
异常
新 异步 抛出 异常 正确 姿势 先 一段 代码
private   async   void   button8 Click object   sender   EventArgs   e
{
Task string   task     GetUlrStringErr null
Thread Sleep 1000 一段 逻辑
textBox1 Text     await   task
public   async   Task string   GetUlrStringErr string   url
{
if   string IsNullOrWhiteSpace url
{
throw   new   Exception url 为空
using   HttpClient   http     new   HttpClient
{
return   await   http GetStringAsync url
调试 执行 执行 流程
执行 完 118 行 异常 抛出来 逆天 等待 await 执行 报错 119 行 逻辑 执行 意义 异常 提前 抛出
提取 方法 做 验证 抛出 异常 朋友 说 太坑 爹 验证 写个 方法 提供 坑爹 方式
异步 函数 匿名 异步 函数 包装 验证
感觉 前种 方式
异步
简单 分析 新 异步 能力 属性 揭秘 异步 本质 神秘 外套
编写 反编译 示例
class   MyAsyncTest
{
public   async   Task string   GetUrlStringAsync HttpClient   http   string   url   int   time
{
await   Task Delay time
return   await   http GetStringAsync url
反编译 代码
点击 看大图
阅读 编译器 自动 命名 类型 重命名
GetUrlStringAsync   方法 模样
public   Task string   GetUrlStringAsync HttpClient   http   string   url   int   time
{
GetUrlStringAsyncdStateMachine   stateMachine     new   GetUrlStringAsyncdStateMachine
{
this     this
http     http
url     url
time     time
builder     AsyncTaskMethodBuilder string Create
state    
stateMachine ._ builder Start ref   stateMachine
return   stateMachine ._ builder Task
方法 签名 完全一致 内容 状态机   GetUrlStringAsyncdStateMachine     调用 状态机 编译器 自动 创建 神秘 状态机 鬼
private   sealed   class   GetUrlStringAsyncdStateMachine     IAsyncStateMachine
{
public   int   state
public   MyAsyncTest   this
private   string   str1
public   AsyncTaskMethodBuilder string   builder
private   TaskAwaiter   taskAwaiter1
private   TaskAwaiter string   taskAwaiter2         异步 方法 三个 形参
public   HttpClient   http
public   int   time
public   string   url
private   void   MoveNext
{
string   str
int   num     this ._ state
try
{
TaskAwaiter   awaiter
MyAsyncTest GetUrlStringAsyncdStateMachine   d __
string   str2
switch   num
{
case  
break
case  
goto   Label 00CD
default                                         异步 方法   await   Task Delay time
awaiter     Task Delay this time GetAwaiter
if   awaiter IsCompleted
{
goto   Label 0077
this ._ state     num    
this taskAwaiter1     awaiter
d __     this
this ._ builder AwaitUnsafeOnCompleted TaskAwaiter   MyAsyncTest GetUrlStringAsyncdStateMachine ref   awaiter   ref   d __
return
awaiter     this taskAwaiter1
this taskAwaiter1     new   TaskAwaiter
this ._ state     num    
Label 0077
awaiter GetResult
awaiter     new   TaskAwaiter                         异步 方法 await   http GetStringAsync url
TaskAwaiter string   awaiter2     this http GetStringAsync this url GetAwaiter
if   awaiter2 IsCompleted
{
goto   Label 00EA
this ._ state     num    
this taskAwaiter2     awaiter2
d __     this
this ._ builder AwaitUnsafeOnCompleted TaskAwaiter string   MyAsyncTest GetUrlStringAsyncdStateMachine ref   awaiter2   ref   d __
return
Label 00CD
awaiter2     this taskAwaiter2
this taskAwaiter2     new   TaskAwaiter string
this ._ state     num    
Label 00EA
str2     awaiter2 GetResult
awaiter2     new   TaskAwaiter string
this ._ str1     str2
str     this ._ str1
catch   Exception   exception
{
this ._ state    
this ._ builder SetException exception
return
this ._ state    
this ._ builder SetResult str
DebuggerHidden
private   void   SetStateMachine IAsyncStateMachine   stateMachine
{
多个 异步 等待 执行 调用 状态机 中 MoveNext 方法 经验 分析 IEumerable 复杂度 高于 猜测 验证 事实
起始 方法   GetUrlStringAsync   第一次 启动 状态机   stateMachine ._ builder Start ref   stateMachine
确实 调用   MoveNext   state 初始值 执行 位置
绕 一圈 回到   MoveNext   现象 成 多个 异步 调用 执行 MoveNext 结束
说 这么久 忘记 目的 编写 测试代码 分析 异步 执行 逻辑
贴 测试代码 忘记
反编译 代码执行 逻辑图
可能性 较大 执行 流程   awaiter Iscompleted     true   情况 留 琢磨
本文 同步 索引 目录 C# 基础知识
本文 demo https github com zhaopeiym BlogDemoCode
推荐
http www cnblogs com wisdomqq archive 2012 03 29 2417723 html
年 搞不懂 术语 概念 协变 逆变 变体
简述 是协 变性 逆变 性 不变性
协 变性 string object   子类 父类 转换
逆变 性 object string   父类 子类 转换
不变性 两种 情况 变 做 分析
泛型 委托 可变性
先 框架 定义 泛型 委托 Func Action 做 例子 请 戳
协变 string object
Func string   func1         农码 一生
Func object   func2     func1
逆变 object string
Action object   func3     t     {  
Action string   func4     func3
代码
定义 委托 试试
X 看人 不来 自定义 委托 协变
系统 定义 Func 自定义
public   delegate   TResult   Func out   TResult
out 鬼
out 泛型 类型 参数 out   关键字 指定 类型 参数 协变   泛型 接口 委托 中   out   关键字 来源
in 泛型 类型 参数 in   关键字 指定 类型 参数 逆变   泛型 接口 委托 中   in   关键字 来源
修改 自定义 委托
完美
逆变 性
逆变 可行 修改 泛型 类型 参数
发现 委托 参数 变 本来 返回值 改成 输入 参数 才行
结论
in 输入 参数 逆变 父类 子类   object string
out 返回值 可协变 子类 父类   string object
假设 泛型 参数 中 in out 改
delegate   Tout   MyFunc in   Tin   out   Tout Tin   obj
MyFunc object   string   str1     t     农码 一生
MyFunc string   string   str2     str1 第一个 泛型 逆变 object string
MyFunc object   object   str3     str1 第二个 泛型 协变 string object
MyFunc string   object   str4     str1 第一个 泛型 逆变 第二个 泛型 协变
编译 C# 代码
结论
逆变 编译 强制 类型转换
代码 写成
delegate   Tout   MyFunc in   Tin   out   Tout Tin   obj
MyFunc string   string   str5     t     农码 一生
MyFunc object   object   str6     t     农码 一生
MyFunc string   object   str7     t     农码 一生
泛型 接口 可变性
框架 默认 接口
协变 子类 父类
IEnumerable string   list     new   List string
IEnumerable object   list2     list
逆变 父类   子类
IComparable object   list3     null
IComparable string   list4     list3
试试 自定 泛型 接口
定义 测试 类型 接口
 
public   class   People
{  
老师 继承 People
public   class   Teacher     People
{  
运动
public   interface   IMotion T
{  
跑步
public   class   Run T     IMotion T
{  
测试 协 变性
接口   interface   IMotion T   定义   interface   IMotion out   T
运动
public   interface   IMotion out   T {
IMotion Teacher   x     new   Run Teacher
IMotion People   y     x
测试 逆变 性   interface   IMotion T     定义   interface   IMotion in   T
运动
public   interface   IMotion in   T {
IMotion People   x2     new   Run People
IMotion Teacher   y2     x2
泛型 接口 逆变 编译 强制 转换
写成
IMotion Teacher   y3     new   Run People
不变性
逆变 性 代码 编译 强制 转换 假设 不用 out in 手动 强制 转换
 
public   class   People   {  
老师 继承 People
public   class   Teacher     People   {  
运动
public   interface   IMotion T   {  
跑步
public   class   Run T     IMotion T   {  
协变
IMotion Teacher   x     new   Run Teacher
IMotion People   y     IMotion People x
逆变
IMotion People   x2     new   Run People
IMotion Teacher   y2     IMotion Teacher x2
IMotion Teacher   y3     IMotion Teacher new   Run People
天才 发现 编译 成功 协变 逆变 真的 天才 运行 试试
太 真的 绕过去 Microsoft 搞 out in 关键字
同一个 泛型 参数 既想 有协 变性 想 逆变 性 咋办 答案 可行 第三种 情况 协变 逆变 称为 不变性
IMotion 定义 两个 方法
运动
public   interface   IMotion T
{
T   Show
void   Match T   t
测试 代码 强制 转换 协变 逆变 只能 out in 泛型 参数 添加 out in 属性
发现 out in out 时 有个 传入 参数 为泛 型   void   Match T   t   方法 in 时 有个 返回 参数 为泛 型   T   Show   方法 矛 锋利 盾 坚硬
协变 逆变 此为 变体
知识
C# 4.0   IEnumerable T     IComparable T     IQueryable T   接口 支持 可变性 4.0 支持 4.0 定义 泛型 接口 添加 out in 关键字 兴趣 切换 版本
延伸 思考
in 输入 参数 只能 逆变 分析
 
public   class   People   {  
老师 继承 People
public   class   Teacher     People
{
薪水
public   decimal   Salary   {   get   set  
运动
public   interface   IMotion in   T
{
void   Match T   t
跑步
public   class   Run T     IMotion T
{
public   void   Match T   t
{
假设 逻辑 .....
out 返回值 只能 协变 分析
 
public   class   People   {  
老师 继承 People
public   class   Teacher     People
{
薪水
public   decimal   Salary   {   get   set  
运动
public   interface   IMotion out   T
{
T   Show
void   Match T   t
跑步
public   class   Run T     IMotion T
{
public   T   Show
{
return   default T
public   void   Match T   t
{
        假设 逻辑 .....
两个 关键点
传入 参数 in 参数 当成 父类 逆变 子类 当成 父类 里氏 替换 原则 父类 子类 子类 父类 方法 属性
返回值 out 返回值 类型 父类 接收 协变 父类 接收 子类 子类 接收 父类 数据 父类 代表 对象 强制 转给 子类 string   str     string objcet
越想 越 头晕 想 明白 慢慢 想 动动手
实在 想 头 当成 乌龟 屁股 龟 腚 C# 做 一种
泛型 接口 泛型 委托 可变性
协变     和谐 变化     子类 转父 类     string 转 object     out 标识   返回值
逆变     逆天 变化     父类 转子 类   object 转 string     in 标识   传入 参数     父亲 变 儿子 越活 越 年轻 逆天
逆变 编译 C# 代码 中 强制 类型转换
示例
IEnumerable string   list     new   List string     IEnumerable object   list2     list   协变 IEnumerable object   list2     new   List string     写成
IComparable object   list3     null IComparable string   list4     list3   逆变     编译     IComparable string   list4     IComparable string   list3
支持 类 类型 参数 可变性
泛型 接口 泛型 委托 拥有 可变 类型 参数 out in
可变性 支持 引用 转换 用于 值 类型
类型 参数   out     ref   禁止 可变性
高深 技术 知识 理解 协变 逆变 变体 术语 概念
本文 同步 索引 目录 C# 基础知识
同类 文章 推荐
http www cnblogs com haoyifei p 5760959 html
http www cnblogs com LoveJenny archive 2012 03 13 2392747 html
http www cnblogs com Ninputer archive 2008 11 22 generic covariant html
面向对象编程 思想 前传 javascript
写 面向对象编程 思想 设计模式 中 js 发现 基础知识 难 理解 读懂 js 面向对象 代码 先 快速 补 面向对象编程 思想 设计模式
鸭子 类型
javascript 一门 典型 动态 类型 语言 弱 类型 语言
鸭子 类型 走起路来 鸭子 鸭子 鸭子
var   鸭子     {
走路   function     {  
咕咕 咕   function     {  
var   鹦鹉     {
走路   function     {  
咕咕 咕   function     {  
鹦鹉 走路 咕咕 咕 方法 js 世界 里 当成 鸭子
调用
var   鸭子    
鸭子 push 鸭子
鸭子 push 鹦鹉
for   var   i       i     鸭子 length   i ++   {
鸭子 i 走路
js 世界 抽象 接口 约定 鸭子
javascript 面向对象
javascript 直译式 脚本语言 动态 类型 弱 类型 语言 函数 一等 公民 语言 原型 面向对象 语言 面向对象 三大 特性 封装 继承 多态 js
封装
var   Person     function     {
var   sex     爷们
return   {
name   农码 一生
getInfo   function     {
console log name     this name     sex     sex
js 语法 提供 private 关键字 利用 闭包来 私有 字 段 封装 目的
继承
字面 量
var   Person     {
name   农码 一生
getName   function     {
console log this name
var   obj     Person
obj getName
函数 构造 器
var   Person     function     {
this name     农码 一生
Person prototype getName     function     {
console log this name
var   obj     function     {  
obj prototype     new   Person obj 继承 Person
var   o     new   obj
o getName 调用 原型 中 getName 类似 C# 中 调用 父类 方法
多态
多态 鸭子 类型 表现
var   鸭子    
鸭子 push 鸭子
鸭子 push 鹦鹉
for   var   i       i     鸭子 length   i ++   {
鸭子 i 走路 鹦鹉 跳 走 鸭子 左右摇摆 走 多态 表现
鹦鹉 跳 走 鸭子 左右摇摆 走 多态 表现
原型
原型 js 中是 类 创建对象 C# 中 new 关键字 实例 化 对象 js 中 new 关键字 构造 原型 对象 C# 中 对象 继承 Object js 中 对象 原型 Object
var   Person     function     {
this name     农码 一生
this sex     爷们
console log Person prototype
对象 添加 方法 写 原型 这是 写 对象 里会 试试
var   Person     function     {
this name     农码 一生
this sex     爷们
this getInfo     function     {
console log name     this name     sex     this sex
好像 看不出 其实不然
发现 每次 构造 对象 中 方法 开辟 空间 对象 方法   方法 放入 原型
这样一来 构造 对象 方法 公用 单例
想想 原型 词 形象 原本 模型 继承 例子
var   Person     function     {
this name     农码 一生
this sex     爷们
this getInfo     function     {
console log name     this name     sex     this sex
var   Student     function     {  
Student prototype     new   Person 继承
var   s1     new   Student
var   s2     new   Student
console log s1 getInfo     s2 getInfo
getInfo Person Student 原型 prototype Person 对象 单例 构造 Student 对象 getInfo 方法 同一个
构造 多个 Person 多个 getInfo 方法 getInfo 方法 放入 Person 原型 中
var   Person     function     {
this name     农码 一生
this sex     爷们
Person prototype getInfo     function     {
console log name     this name     sex     this sex
仔细 推敲 这句 话 getInfo 方法 放入 Person 原型 中 Person 原型 Object getInfo 方法 放到 Object
不信 请
原型 原型 原型 方法 猜猜 打印 版本
var   Person     function     {
this name     农码 一生
var   Student     function     {  
Student prototype     new   Person 继承
var   stu     new   Student
Student prototype getName     function     {
console log 名字     this name
Person prototype getName     function     {
console log My   name   is     this name
stu getName
注释 掉 中文版
有没有 特 神奇 原因 图来 回答
另个 角度 说 对象 原型 中 已有 方法 等效于 C# 中虚 方法 重写
this 指向
var   name     张三
var   obj     {
name 李四
getName   function {
console log this name
obj getName
没什么 疑问
window name     张三
var   obj     {
name 李四
getName   function {
console log this name
obj getName
window func     obj getName
window func
晕 没关系 告诉 简单 实用 方法 方法 this 指向
call
方法 this 指向 口诀 方法 说 请
window name     张三
var   obj     {
name   李四
getName   function     {
console log this name
obj getName
window func     obj getName
window func call obj
window 点 this 指向 obj
call 改变 this 执行
特性 有用 编写 拉 选中 事件
function   func   {
console log 点击     this find option selected text
element1 change function     {
func call this
element2 change function     {
func call this
写 func 方法 不用 下拉框 元素
apply
apply call 区别
function   func age   sex   {
console log name     this name     age     age     sex     sex
var   obj     {
name   晓梅
func call obj   18   妹子
func apply obj 18 小美女
call apply 第一个 参数 this 指向 对象 call 第二个 参数 方法 func 参数 apply 第二个 参数 数组 包含 方法 参数
band
function   func age   sex   {
console log name     this name     age     age     sex     sex
var   obj     {
name   晓梅
var   func1     func bind obj   18   妹子
func1
apply call 区别 改变 this 指向 执行 参数 传入 方式 call
js 中 闭包
闭包 理解 回收 变量 闭包
常见 闭包 全局变量 定义 销毁 自动 设为 null
平时 说 闭包 非 销毁 变量 说 私有 变量 示例
var   Person     function     {
var   sex     爷们
return   {
name   农码 一生
getInfo   function     {
console log name     this name     sex     sex
说 闭包 是因为 sex 字段 永远 销毁 想想 销毁 调用 getInfo 找 不到 sex 字段 销毁 销毁
闭包 作用 私有化 一例
for   var   i       i     10   i ++   {
var   t     setTimeout function     {
console log i
  100
想象 打印
计时器 循环 执行 完 变量 i 10
闭包 每次 循环 保存 闭包 变量
for   var   i       i     10   i ++   {
function   i   {
var   t     setTimeout function     {
console log i
  100
i
高阶 函数
高阶 函数 名字 特牛 逼 js 中
私有 变量 例子
var   Person     function     {
var   sex     爷们
return   {
name   农码 一生
getInfo   function     {
console log name     this name     sex     sex
函数 做 return 时 高阶 函数
var   getInfo     function   callback   {
ajax url   function   data   {
if   typeof   callback     function   {
callback data
getInfo function   data   {
alert data userName
getInfo 执行 传入 参数 函数
函数 当成 参数传递 时 高阶 函数
本文 同步 索引 目录 设计模式 学习
demo https github com zhaopeiym BlogDemoCode
推荐 理解 javascript 原型 闭包 系列
生命 运动 静止  
UML 类图 学习
下载 Visio   地址
下载 完毕 自行 安装 破解 生 天朝 必有 技能
右键 新建   Microsoft   Visio   绘图 安装 2013
双击 打开
UML 类图
常用 几种
斜体 抽象类
公有 pubic 私有 private
接口
虚线 空间 三级 接口
虚线 箭头 依赖 关系
实线 空心 三角 箭头 继承 关系
简单 Visio 提示 画 几次 熟悉
vs 中 自动 已有 类 创建 UML 类图
效果 不错
有人 说 vs17 查看 类图 取消
no 功能 取消 是因为 安装 安装 组件
17 安装 速度 vs 好多 东西 默认 安装
一步步 学习 javascript 基础 篇 ajax 请求 回退
需求
ajax 异步 请求
url 标识 请求 参数 复制 url 新页面 打开 ajax 效果
ajax 异步 请求 刷新 url 请求 数据 url 记录 参数 改变 url 添加 参数 改变 url 请求 url 这样一来 ajax 优势 作用 参数 请求 url 做 过单 页面 SPA   Single page   Application 描点 修改 描点 发送 url 请求
博客园 分页
demo1
DOCTYPE   html
html   xmlns http www w3 org 1999 xhtml
head
meta   http equiv Content Type   content text html   charset utf  
title title
style   type text css
ul   {
list style   none
ul   li   {
float   left
margin left   10px
style
head
body
div   style color   red   margin left   50px   demo1 默认 回退 效果 div
div
ul
li a   href tab1 tab1 a li
li a   href tab2 tab2 a li
li a   href tab3 tab3 a li
li a   href tab4 tab4 a li
li a   href tab5 tab5 a li
ul
div
input   style margin left 15px   type button   value 回退   onclick history go  
a   href home html 主页 a
div   class content   style font size 44px color red margin top 50px text align center
div
script   src Scripts jquery 1.8 js script
script   type text javascript
function     {
刷新 url 时 停留 ajax 效果
var   hash     window location hash
ul find a href     hash     click
ul click function   e   {
if   e target localName     a   return
var   value     e target attr href
get temp html   value   function   obj   { ajax get 请求
请求 发送 成功 修改 页面 元素 内容
content html     value
  text
script
body
html
效果图
gif 动态图 发现 点击 tab ajax 异步 加载 点击 回退   url 描点 变 内容 变 博客园 分页 回退 效果 肯定 不太好 效果 history go 不太 请 戳
需求
ajax 异步 请求
url 标识 请求 参数 复制 url 新页面 打开 ajax 效果
点击 回退 页面 回到 主页
通过观察 gif 动图 发现 回退 顺序 url 改变 记录 顺序 每次 点击 ajax 请求 累加 计数 一次性 退回 主页
demo2
input   style margin left 15px   type button   value 回退   onclick go  
a   href home html 主页 a
div   class content   style font size 44px color red margin top 50px text align center
div
script   src Scripts jquery 1.8 js script
script   type text javascript
function     {
刷新 url 时 停留 ajax 效果
var   hash     window location hash
ul find a href     hash     click
var   num    
ul click function   e   {
num
if   e target localName     a   return
var   value     e target attr href
get temp html   value   function   obj   {
content html     value
  text
function   go   {
history go num
script
效果图
ok 效果 需求 说 感觉 不太好 回退 返回 点击 效果
需求
ajax 异步 请求
url 标识 请求 参数 复制 url 新页面 打开 ajax 效果
点击 回退 返回 点击 效果
拿到 需求 头痛 回退 点击 效果 有没有 回退 事件 还好 H5   window onpopstate   url 监听 事件
demo3
input   style margin left 15px   type button   value 回退   onclick history go  
a   href home html 主页 a
div   class content   style font size 44px color red margin top 50px text align center
div
script   src Scripts jquery 1.8 js script
script   type text javascript
function     {
刷新 url 时 停留 ajax 效果
var   hash     window location hash
ul find a href     hash     click
ul click function   e   {
if   e target localName     a   return 点击 a 标签 返回
var   value     e target attr href
get temp html   value   function   obj   {
content html     value
  text
if   history pushState   {
window onpopstate     function     {
var   hash     window location hash
ul find a href     hash     click
script
效果图
乍一看 好像 完美 url 内容 发生 改变 其实不然 debugger 调试 一看 知
仔细 看上 图 发现     ul click   a 标签 两次 点击 事件 瑕疵 点击 a 标签 触发 改变 url 导致 触发 onpopstate 事件 onpopstate 事件 点击 a 标签 导致 两次 执行 a 标签 点击 事件
执行 两次 a 标签 点击 事件 思路 肯定 修改 url 触发 onpopstate 事件 回退 触发 用到   history pushState  
需求
ajax 异步 请求
url 标识 请求 参数 复制 url 新页面 打开 ajax 效果
点击 回退 返回 点击 效果 执行 多余 代码
script   type text javascript
function     {
刷新 url 时 停留 ajax 效果
var   hash     window location hash
ul find a href     hash     click
ul click function   e   {
debugger
e preventDefault 执行 事件 关联 默认 动作
if   e target localName     a   return 点击 a 标签 返回
var   value     e target attr href
get temp html   value   function   obj   {
content html     value
if   e   &&   e clientX   判断 是否是 鼠标 点击 触发
history pushState null   value   location href split     value 塞入 历史记录 改变 url
  text
if   history pushState   {
window onpopstate     function     {
debugger
var   hash     window location hash
ul find a href     hash     click
debugger
script
    if   e   &&   e clientX   判断 是否是 鼠标 点击 触发   这句 每次 触发 onpopstate   历史记录 塞进去 一条 死循环 出不来
效果图
执行 a 标签 点击 事件 回退 功能 道理 完美 回过头来 想想 锚点 记录 参数 是因为 修改 锚点 请求 url 巧用 锚点 history pushState url 塞入 历史记录 改变 url url 发送 请求 锚点 答案
需求
ajax 异步 请求
url 标识 请求 参数 复制 url 新页面 打开 ajax 效果
点击 回退 返回 点击 效果 描点
代码 修改
demo4
script   type text javascript
function     {
刷新 url 时 停留 ajax 效果
var   hash     location href split
ul find a href     hash     click
ul click function   e   {
e preventDefault 执行 事件 关联 默认 动作
if   e target localName     a   return
var   value     e target attr href
if   e   &&   e clientX   判断 是否是 鼠标 点击 触发
history pushState null   null   location href split         value 塞入 历史记录 改变 url
get temp html   value   function   obj   {
document title     value
content html     value
  text
if   history pushState   {
window addEventListener popstate   function     {
var   hash     location href split
ul find a href     hash     click
script
效果图
完整 演示 地址 http hi haojima net demo history home html
内容 胡说八道
ajax 回退 效果 分析 感谢您 阅读 希望 一点点 作用
文章 首链 http www cnblogs com zhaopei p 5637889 html
谈 扩展 方法 理解
扩展 方法
说 扩展 方法 先 说 扩展 方法
定义   Person   类
public   class   Person
{
  summary
  出生日期
  summary
public   DateTime   BirthTime   {   get   set  
  summary
  死亡 日期
  summary
public   DateTime   DeathTime   {   get   set  
类 第三方 dll 引用 添加 方法   GetAge   获取 年龄 想到 子类 继承
public   class   MyPerson     Person
{
public   int   GetAge
{
if   DeathTime HasValue
return   DeathTime Value     BirthTime Days     365
else
return   DateTime Now     BirthTime Days     365
需求 新增 方法 继承 真的 最合适 暂且不说   定义 密封 类   public   sealed   class   Person   继承 只能 另想办法
随意 写个 静态 类
public   static   class   ExtensionClass
{
public   static   int   GetAge Person   person
{
if   person DeathTime HasValue
return   person DeathTime Value     person BirthTime Days     365
else
return   DateTime Now     person BirthTime Days     365
调用     age     ExtensionClass GetAge p   看似 不错 说 扩展 方法 关系 见证 奇迹
地方 唯一 变化 参数 加里 this 关键字 仅仅如此 讲 扩展 方法
调用     var   age     p GetAge   相比   age     ExtensionClass GetAge p   简单明了
说 扩展 密封 类 方法 时 扩展 方法 一种 情况 扩展 接口 扩展 IList 排序 写个 扩展 方法 继承 接口 强制 接口 方法 想 心中 答案 选择 方式
扩展 方法
扩展 方法 有没有 感觉 神奇 添加 this 关键字 当成 扩展 方法 扩展 方法 东东 代码 好像 静态方法 说不清道不明 关系 分析
定义 静态方法 扩展 方法
public   static   class   ExtensionClass
{
public   static   int   GetAge2 Person   person
{
if   person DeathTime HasValue
return   person DeathTime Value     person BirthTime Days     365
else
return   DateTime Now     person BirthTime Days     365
public   static   int   GetAge this   Person   person
{
if   person DeathTime HasValue
return   person DeathTime Value     person BirthTime Days     365
else
return   DateTime Now     person BirthTime Days     365
调用
var   p     new   Person   {   BirthTime     DateTime Parse 1990 07 19  
var   age     p GetAge
age     ExtensionClass GetAge2 p
编译 IL 代码
反编译 成 IL 发现 理解 成 扩展 方法 本质 静态方法 扩展 方法 C# 一种 形式 表现 静态方法 有何 妙用 讲解   编译 带上 静态 类名
扩展 方法 做些
已有 静态方法 转 成 扩展 方法
public   static   bool   IsNullOrEmpty this   string   str
{
return   string IsNullOrEmpty str
调用
string   str     null
var   isNull     str IsNullOrEmpty
感觉 相比 期 静态方法 调用 优雅 接近 自然语言
编写 类 string 为例
  summary
  转 DateTime
  summary
  param   name str param
  returns returns
public   static   DateTime   MyToDateTime this   string   str
{
if   string IsNullOrEmpty str
return   null
else
return   DateTime Parse str
  summary
  转 double
  summary
  param   name str param
  returns returns
public   static   double   MyToDouble this   string   str
{
if   string IsNullOrEmpty str
return  
else
return   double Parse str
  summary
  转 int
  summary
  param   name str param
  returns returns
public   static   int   MyToInt this   string   str
{
if   string IsNullOrEmpty str
return  
else
return   int Parse str
  summary
  指示 指定 字符串   null     System String Empty   字符串
  summary
  param   name str param
  returns returns
public   static   bool   IsNullOrEmpty this   string   str
{
return   string IsNullOrEmpty str
  summary
  字符串 null 返回 空 字符串 返回 原 字符串
  summary
  param   name str param
  returns returns
public   static   string   GetValueOrEmpty this   string   str
{
if   str IsNullOrEmpty
return   string Empty
return   str
View   Code
扩展 方法 附加 用处 扩展 方法 威力 Linq 服务 体现 IEnumerable IQueryable 链式 编程 链式 编程
初始化   Person   集合
List Person   persons     new   List Person
{
new   Person {   BirthTime DateTime Parse 1990 01 19
new   Person {   BirthTime DateTime Parse 1993 04 17
new   Person {   BirthTime DateTime Parse 1992 07 19   DeathTime DateTime Parse 2010 08 18
new   Person {   BirthTime DateTime Parse 1990 03 14
new   Person {   BirthTime DateTime Parse 1991 08 15
new   Person {   BirthTime DateTime Parse 1993 07 29
new   Person {   BirthTime DateTime Parse 1991 06 19
需求 查询 活人 出生日期 排序
public   static   class   ExtensionClass
{
  summary
  条件 查询
  summary
  typeparam   name T typeparam
  param   name list param
  param   name func param
  returns returns
public   static   IList T   MyWhere T this   IList T   list   Func T   bool   func
{
List T   newList     new   List T
foreach   var   item   in   list
{
if   func item
newList Add item
return   newList
  summary
  升序 排序
  summary
  typeparam   name T typeparam
  param   name list param
  param   name func param
  returns returns
public   static   IList T   MyOrderBy T this   IList T   list   Func T   DateTime   func
{
if   list Count    
return   list
for   int   i       i     list Count   i ++
{
for   int   j     i       j     list Count   j ++
{
var   item1     list j    
var   item2     list j
if   func item1     func item2 Ticks    
{
list j         item2
list j     item1
return   list
  summary
  降序 排序
  summary
  typeparam   name T typeparam
  param   name list param
  param   name func param
  returns returns
public   static   IList T   MyOrderByDescending T this   IList T   list   Func T   DateTime   func
{
if   list Count    
return   list
for   int   i       i     list Count   i ++
{
for   int   j       j     list Count     i   j ++
{
var   item1     list j    
var   item2     list j
if   func item1     func item2 Ticks    
{
list j         item2
list j     item1
return   list
调用 演示 讨论 算法 高效
var   newPersons     persons MyWhere t     t DeathTime     null MyOrderByDescending t     t BirthTime
foreach   var   item   in   newPersons
{
Console WriteLine item BirthTime
简单 函数 式 编程 图
一句 代码 搞定 逻辑 自然语言 流畅 net IEnumerable 扩展
执行 结构 一模一样
扩展 方法 当成 静态方法
var   p1     ExtensionClass MyWhere persons   t     t DeathTime     null
var   p2     ExtensionClass MyOrderByDescending p1   t     t BirthTime
var   p3     ExtensionClass MyOrderBy p2   t     t BirthTime
信 有图 真相
C# 代码
反编译 C# 代码 编译 扩展 方法 形式
反编译 IL 代码
编译 代码 做 程序员 喜欢 方式
扩展 方法 疑惑 忘记 规则 不用 查找 资料 说
第一个 参数 扩展 操作 类型 称为 扩展 类型
指定 扩展 方法 扩展 类型 名称 附加 this 修饰符
方法 扩展 方法 访问 要用 using 指令 导入 扩展 类型 命名 空间 扩展 类型 调用 代码 同一个 命名 空间 中
需 记住 编写 扩展 方法 时 先 当成 静态方法 编写 可行 转 成 扩展 方法 形式
代码
using   System
using   System Collections Generic
using   System Linq
using   System Linq Expressions
using   System Text
using   System Threading Tasks
using   System Data Entity Utilities
using   System Diagnostics CodeAnalysis
using   NPOI HSSF UserModel
using   NPOI SS UserModel
using   System IO
namespace   test
{
class   Program
{
static   void   Main string   args
{
  工具 类
  链式 编程
string   str     null
var   isNull     str IsNullOrEmpty
var   p     new   Person   {   BirthTime     DateTime Parse 1990 07 19  
var   age     p GetAge
age     ExtensionClass GetAge2 p
List Person   persons     new   List Person
{
new   Person {   BirthTime DateTime Parse 1990 01 19
new   Person {   BirthTime DateTime Parse 1993 04 17
new   Person {   BirthTime DateTime Parse 1992 07 19   DeathTime DateTime Parse 2010 08 18
new   Person {   BirthTime DateTime Parse 1990 03 14
new   Person {   BirthTime DateTime Parse 1991 08 15
new   Person {   BirthTime DateTime Parse 1993 07 29
new   Person {   BirthTime DateTime Parse 1991 06 19
var   newPersons     persons MyWhere t     t DeathTime     null MyOrderByDescending t     t BirthTime
var   p1     ExtensionClass MyWhere persons   t     t DeathTime     null
var   p2     ExtensionClass MyOrderByDescending p1   t     t BirthTime
var   p3     ExtensionClass MyOrderBy p2   t     t BirthTime
foreach   var   item   in   newPersons
{
Console WriteLine item BirthTime
Console ReadKey
public   sealed   class   Person
{
  summary
  出生日期
  summary
public   DateTime   BirthTime   {   get   set  
  summary
  死亡 日期
  summary
public   DateTime   DeathTime   {   get   set  
public   class   MyPerson     Person
{
        public   int   GetAge
        {
                if   DeathTime HasValue
                        return   DeathTime Value     BirthTime Days     365
                else
                        return   DateTime Now     BirthTime Days     365
       
public   static   class   ExtensionClass
{
  summary
  条件 查询
  summary
  typeparam   name T typeparam
  param   name list param
  param   name func param
  returns returns
public   static   IList T   MyWhere T this   IList T   list   Func T   bool   func
{
List T   newList     new   List T
foreach   var   item   in   list
{
if   func item
newList Add item
return   newList
  summary
  升序 排序
  summary
  typeparam   name T typeparam
  param   name list param
  param   name func param
  returns returns
public   static   IList T   MyOrderBy T this   IList T   list   Func T   DateTime   func
{
if   list Count    
return   list
for   int   i       i     list Count   i ++
{
for   int   j     i       j     list Count   j ++
{
var   item1     list j    
var   item2     list j
if   func item1     func item2 Ticks    
{
list j         item2
list j     item1
return   list
  summary
  降序 排序
  summary
  typeparam   name T typeparam
  param   name list param
  param   name func param
  returns returns
public   static   IList T   MyOrderByDescending T this   IList T   list   Func T   DateTime   func
{
if   list Count    
return   list
for   int   i       i     list Count   i ++
{
for   int   j       j     list Count     i   j ++
{
var   item1     list j    
var   item2     list j
if   func item1     func item2 Ticks    
{
list j         item2
list j     item1
return   list
public   static   int   GetAge2 Person   person
{
if   person DeathTime HasValue
return   person DeathTime Value     person BirthTime Days     365
else
return   DateTime Now     person BirthTime Days     365
public   static   int   GetAge this   Person   person
{
if   person DeathTime HasValue
return   person DeathTime Value     person BirthTime Days     365
else
return   DateTime Now     person BirthTime Days     365
public   static   bool   IsNullOrEmpty this   string   str
{
return   string IsNullOrEmpty str
View   Code
本文 同步 C# 基础知识 系列
一步步 开发 博客   NET 版 10 前端 对话框 消息 框
前端 对话框 消息 框 优秀 插件 数 造 轮子 更好 轮子 说 造 轮子 肯定 博客 系统 包括 日志 记录 响应 式 布局 评论 功能 插件 废话 不多时 对话框 消息 框
对话框
拖动 点击 按钮 回调
画 简单 模型 框
div   class hi dialog box   clearfix
div   class hi dialog title 系统 提示 div
div   class hi dialog content
div
div   class hi dialog foot
input   type button   class hi dialog determine   value  
input   type button   class hi dialog cancel   value 取消  
div
div
添上 样式
div hi dialog box   {
border   1px   808080   solid
width   350px
height   200px
border radius   3px
div hi dialog box   div hi dialog title   {
border   1px   808080   solid
margin   1px
padding   1px
background color   dedcdc
height   14%
cursor   move
font size   20px
div hi dialog box   div hi dialog content   {
height   65%
margin   5px
div hi dialog box   div hi dialog foot   {
margin   1px
padding   1px
height   14%
div hi dialog box   div hi dialog foot   input   {
float   right
margin left   5px
font size   16px
View   Code
效果图
那么回事 拖动 拖动 说白了 鼠标 不停 修改 定位
修改 样式
js 代码 拖动 效果
鼠标 按下 时
div hi dialog title mousedown function   event   {
html unbind 清除 事件 方法
var   click clientX     event clientX 记录 鼠标 按下 时 窗口   x   坐标
var   click clientY     event clientY 记录 鼠标 按下 时 窗口   y   坐标
取 对话框 容器
var   dialogBox     this closest div hi dialog box
记录 对话框 容器 位置
var   dialogBoxX     parseInt dialogBox css left
var   dialogBoxY     parseInt dialogBox css top
鼠标 时
html mousemove dialog mousemove     function   event   {
鼠标 按下 量 位置
var   top     event clientY     click clientY     dialogBoxY
var   left     event clientX     click clientX     dialogBoxX
修改 对话框 位置 效果
dialogBox css {   left   left   top   top  
鼠标 按键 松开 时
html mouseup function     {
清除 鼠标 事件
html unbind mousemove   dialog mousemove
jquery min js 拖动 一句 代码 搞定   div hi dialog title draggable
js 代码 对话框 拖动 效果 当鼠标 对话框 标题 区域 按下 鼠标 拖动 鼠标 实时 计算 改变 容器 位置 鼠标 按键 松开 清除 鼠标 事件
点击 按钮 回调
点击 取消 执行 回调 删除 点击 肯定 做 删除 操作
点击 自动 关闭 对话框 执行 执行 操作 同学会 说 这算 狗屁 对话框 html 代码 编码 简单 说 思路 简单 整理
效果图
代码 简单 细化 效果 背景 遮罩 点击 对话框
  DOCTYPE   html
  html   xmlns http www w3 org 1999 xhtml
  head
          meta   http equiv Content Type   content text html   charset utf  
          title title
          style   type text css
                    {
                          box sizing   border box
                 
10
11                   clearfix after   {
12                           content    
13                           display   table
14                           clear   both
15                  
16
17                   clearfix   {
18                           zoom  
19                  
20
21                   div hi dialog box   {
22                           border   1px   808080   solid
23                           width   350px
24                           height   200px
25                           position   absolute
26                           top   200px
27                           left   40%
28                           border radius   3px
29                  
30
31                           div hi dialog box   div hi dialog title   {
32                                   border   1px   808080   solid
33                                   margin   1px
34                                   padding   1px
35                                   background color   dedcdc
36                                   height   14%
37                                   cursor   move
38                                   font size   20px
39                          
40
41                           div hi dialog box   div hi dialog content   {
42                                   height   65%
43                                   margin   5px
44                                   overflow   auto
45                          
46
47                           div hi dialog box   div hi dialog foot   {
48                                   margin   1px
49                                   padding   1px
50                                   height   14%
51                          
52
53                                   div hi dialog box   div hi dialog foot   input   {
54                                           float   right
55                                           margin left   5px
56                                           font size   16px
57                                  
58           style
59   head
60   body
61           input   value 对话框   onclick click1   type button  
62           input   value 对话框 取消   onclick click2   type button  
63           div   class messg   style margin   10px   color   red   font size   23px div
64
65           script   src Scripts jquery 1.8 js script
66           script   type text javascript
67                   var   hiDialog     {
68                           init   function   title   messg   determineCallback   cancelCallback   {
69
70                                   title     title     系统 提示
71                                   var   determine       cancel    
72                                   if   typeof   determineCallback     function
73                                           determine     input   type button   class hi dialog determine   value  
74                                   if   typeof   cancelCallback     function
75                                           cancel     input   type button   class hi dialog cancel   value 取消  
76
77                                   if   div hi dialog box length   {
78                                           var   hi dialog box     div   class hi dialog box   clearfix
79                                                                           div   class hi dialog title div
80                                                                           div   class hi dialog content
81                                                                           div
82                                                                           div   class hi dialog foot
83                                                                           div
84                                                                   div
85                                           body append hi dialog box
86                                  
87
88                                   var   box     div hi dialog box
89                                   box find div hi dialog title html title
90                                   box find div hi dialog content html messg
91                                   box find div hi dialog foot html determine     cancel
92                                   div hi dialog box show
93
94                                   box find hi dialog determine click function     {
95                                           determineCallback
96                                           hiDialog close
97                                  
98                                   box find hi dialog cancel click function     {
99                                           cancelCallback
100                                           hiDialog close
101                                  
102
103                                   鼠标 按下 时
104                                   div hi dialog title mousedown function   event   {
105                                           html unbind
106                                           var   click clientX     event clientX
107                                           var   click clientY     event clientY
108                                           var   dialogBox     this closest div hi dialog box
109                                           var   dialogBoxX     parseInt dialogBox css left
110                                           var   dialogBoxY     parseInt dialogBox css top
111                                           鼠标 时
112                                           html mousemove dialog mousemove     function   event   {
113                                                   var   top     event clientY     click clientY     dialogBoxY
114                                                   var   left     event clientX     click clientX     dialogBoxX
115                                                   dialogBox css {   left   left   top   top  
116                                          
117                                           鼠标 按键 松开 时
118                                           html mouseup function     {
119                                                   html unbind mousemove   dialog mousemove
120                                          
121                                  
122                          
123                           close   function     {
124                                   div hi dialog box hide
125                          
126                  
127           script
128           script   type text javascript
129                   function   click1   {
130                           hiDialog init 系统 提示   测试   function     {
131                                   点击 回调 执行
132                                   messg text 点击
133                          
134                  
135
136                   function   click2   {
137                           hiDialog init 系统 对话框   乱七八糟   function     {
138                                   messg text 点击
139                             function     {
140                                   messg text 点击 取消
141                          
142                  
143           script
144   body
145   html
View   Code
消息 框
自动 定时 关闭 消息 框 消息 分类 警告 错误 成功
画 简单 模型 框
div   class hi message box
img   class hi message type   src  
span   class hi message messg 爱 span
div
添上 样式
style   type text css
div hi message box   {
padding   10px
padding top   15px
padding bottom   20px
background color   aee0c1
min width   200px
max width   500px
font size   19px
border radius   3px
style
效果图
简单 定时 关闭 消息 功能
定时 关闭 消息 表骂 简单 想 写
setTimeout function     {
div hi message box fadeOut slow
  1200
效果图
消息 类型 参数 加 图片
setTimeout function     {
div hi message box fadeOut slow
  1200
var   box     div hi message box
box find img hi message type attr src   imgs Warning 24px png
效果图
图标 那么回事
稍微 整理 代码
效果图
代码 消息 框 简单 太 参数 定位 消息 框 位置 设置 定时 关闭 时间 触发 消息 框
  DOCTYPE   html
  html   xmlns http www w3 org 1999 xhtml
  head
          meta   http equiv Content Type   content text html   charset utf  
          title title
          style   type text css
                    {
                          box sizing   border box
                 
10
11                   clearfix after   {
12                           content    
13                           display   table
14                           clear   both
15                  
16
17                   clearfix   {
18                           zoom  
19                  
20
21                   div hi message box   {
22                           padding   10px
23                           padding top   15px
24                           padding bottom   20px
25                           background color   aee0c1
26                           position   absolute
27                           min width   200px
28                           max width   500px
29                           font size   19px
30                           border radius   3px
31                           top 200px
32                           left 45%
33                  
34
35                           div hi message box   img   {
36                                   vertical align   bottom
37                          
38           style
39   head
40   body
41           input   type button   onclick success   value 成功 消息  
42           input   type button   onclick error   value 失败 消息  
43           input   type button   onclick warn   value 警告 消息  
44           script   src Scripts jquery 1.8 js script
45           script   type text javascript
46                   var   hiMessageBox     {
47                           init   function   type   messg   {
48                                   var   hiMessageBox     div   class hi message box
49                                                                           img   class hi message type   src  
50                                                                           span   class hi message messg span
51                                                                   div
52
53
54                                   if   div hi message box length   {
55                                           body append hiMessageBox
56                                  
57                                   var   box     div hi message box
58                                   box find hi message messg text messg
59                                   switch   type   {
60                                           case   success   成功
61                                                   box find img hi message type attr src   imgs Tick 24px png
62                                                   break
63                                           case   warn   警告
64                                                   box find img hi message type attr src   imgs Warning 24px png
65                                                   break
66                                           case  
67                                                   box find img hi message type attr src   imgs Delete 24px png
68                                                   break
69                                  
70                                   div hi message box fadeIn slow
71                                   setTimeout function     {
72                                           div hi message box fadeOut slow
73                                     1200
74                          
75                           success   function   messg   {
76                                   this init   messg
77                          
78                           warn   function   messg   {
79                                   this init   messg
80                          
81                           error   function   messg   {
82                                   this init   messg
83                          
84                  
85           script
86           script   type text javascript
87                   function   success   {
88                           hiMessageBox success 成功
89                  
90                   function   error   {
91                           hiMessageBox error 失败
92                  
93                   function   warn   {
94                           hiMessageBox warn 警告
95                  
96           script
97   body
98   html
View   Code
演示 地址 对话框 演示 地址     消息 框 演示 地址
一步步 搭建 博客
简单 对话框 消息 框 感谢您 阅读 希望 一点点 作用
文章 首链 http www cnblogs com zhaopei p MessageBox DialogBox html
可空 类型 Nullable T 鬼
值 类型 为空
引用 类型 默认值 null 而值 类型 默认值 非 null
引用 类型 为空 引用 类型 变量 保存 对象 地址 引用 url 页面 引用 类型 值为 null 变量值 指向 空 引用 空 url
值 空值 简单 int 值 2147483648 2147483647 null 值留 位置
用到 可空 类型
举个 栗子 定义 Person 三个 属性 出生日期 BeginTime 死亡 日期 EndTime 年龄 Age
健在 人世 请问 死亡 日期 赋值 有人 聪明 说 为空 需求
微软 C# 2.0 引入 null 值 类型   System Nullable T   定义 Person 类
  public   class   Person
  {
            summary
            出生日期
            summary
          public   DateTime   BeginTime   {   get   set  
            summary
            死亡 日期
            summary
10           public   System Nullable DateTime   EndTiem   {   get   set  
11           public   int   Age
12           {
13                   get
14                   {
15                           if   EndTiem HasValue 挂 有值 证明 死
16                           {
17                                   return   EndTiem Value     BeginTime Days
18                          
19                           else 挂
20                           {
21                                   return   DateTime Now     BeginTime Days
22                          
23                  
24          
25  
年龄
static   void   Main string   args
{
Person   p1     new   Person
{
BeginTime     DateTime Parse 1990 07 19
Person   p2     new   Person
{
BeginTime     DateTime Parse 1893 12 26
EndTiem     DateTime Parse 1976 09 09
Console WriteLine     p1 Age     岁
Console WriteLine 毛 爷爷     p2 Age     岁
Console ReadKey
可空 类型
用到   System Nullable DateTime   可空 时间 类型 平时   DateTime   类型 T 加 问号 两种 等效 微软 语法 糖
  System Nullable T   何物
搜噶 结构 属性   HasValue Value 属性 简单 结构 两个 属性 存值 存 有值 试试
不好意思 失望 说 值 类型 赋值 null 结构 值 类型
微软 定义 结构 赋值 null 奇怪 奇怪 微软 搞 待遇
就让 止步 NO 微软 IL 语言 脱 衣服 明白 地方 看个 脱衣服
几种 方式 可空 类型 赋值
static   void   Main string   args
{
System Nullable int   number1     null
System Nullable int   number2     new   System Nullable int
System Nullable int   number3     23
System Nullable int   number4     new   System Nullable int 88
Console ReadKey
reflector 编译 IL
原来如此 可空 类型 赋值 等效于 构造 实例 赋 null 时 调用 空 构造函数 有值 时 值 传入 参数 构造函数 柳暗花明又一村 截图 中   MyNullable T   模拟 可空 类型 往下
public   struct   MyNullable T   where   T     struct
{
错误                 结构 包含 显式 参数 构造函数
还好   bool 默认值 false 显示   this ._ hasValue     false 影响
public   MyNullable
{
        this ._ hasValue     false
public   MyNullable T   value 参 构造函数
{
this ._ hasValue     true
this ._ value     value
private   bool   hasValue
public   bool   HasValue 不为 空
{
get   {   return   hasValue  
private   T   value
public   T   Value 值
{
get
{
if   this ._ hasValue 值 访问 抛出 异常
{
throw   new   Exception   可为 空 对象 值
return   value
西 模拟出 可空 类型 赋值 只能 构造函数 方式 自定义 可空 类型
代码
using   System
using   System Collections Generic
using   System Linq
using   System Text
using   System Threading Tasks
namespace   可空 类型
{
public   class   Person
{
  summary
  出生日期
  summary
public   DateTime   BeginTime   {   get   set  
  summary
  死亡 日期
  summary
public   MyNullable DateTime   EndTiem   {   get   set     改用 MyNullable
  summary
  年龄
  summary
public   double   Age
{
get
{
if   EndTiem HasValue 挂 有值 证明 死
{
return   EndTiem Value     BeginTime Days     365
else 挂
{
return   DateTime Now     BeginTime Days     365
public   struct   MyNullable T   where   T     struct
{
错误                 结构 包含 显式 参数 构造函数
还好   bool 默认值 false 显示   this ._ hasValue     false 影响
public   MyNullable
{
        this ._ hasValue     false
public   MyNullable T   value 参 构造函数
{
this ._ hasValue     true
this ._ value     value
private   bool   hasValue
public   bool   HasValue 不为 空
{
get   {   return   hasValue  
private   T   value
public   T   Value 值
{
get
{
if   this ._ hasValue 值 访问 抛出 异常
{
throw   new   Exception   可为 空 对象 值
return   value
class   Program
{
static   void   Main string   args
{
Person   p1     new   Person
{
BeginTime     DateTime Parse 1990 07 19
Person   p2     new   Person
{
BeginTime     DateTime Parse 1893 12 26
EndTiem     new   MyNullable DateTime DateTime Parse 1976 09 09 MyNullable 参 构造函数
Console WriteLine     p1 Age     岁
Console WriteLine 毛 爷爷     p2 Age     岁
Console ReadKey
View   Code
系统 可空 类型
可空 类型 结构 值 类型
可空 类型 null 值 引用 类型 null 可空 类型 引用 类型 null 结构 一种 方式 null
同学 问 赋值 办法 编译器 支持
内容 胡说八道 希望 一点点 用处 感谢 阅读
首发 链接 http www cnblogs com zhaopei p 5537759 html  
  2016 06 05 更新
提出 疑问 赋值 本来 解决办法 感谢 园友 冲杀 提供 解决方案
implicit 关键字 用于 声明 隐式 用户 定义 类型转换 运算符
public   static   implicit   operator   MyNullable T T   value
{
return   new   MyNullable T value
  struct   MyNullable T   中 添加 代码 赋值 作用 等效于 重写 赋值 符号
完整 代码
using   System
using   System Collections Generic
using   System Linq
using   System Text
using   System Threading Tasks
namespace   test
{
public   class   Person
{
  summary
  出生日期
  summary
public   DateTime   BeginTime   {   get   set  
  summary
  死亡 日期
  summary
public   MyNullable DateTime   EndTiem   {   get   set     改用 MyNullable
  summary
  年龄
  summary
public   double   Age
{
get
{
if   EndTiem HasValue 挂 有值 证明 死
{
return   EndTiem Value     BeginTime Days     365
else 挂
{
return   DateTime Now     BeginTime Days     365
public   struct   MyNullable T   where   T     struct
{
错误                 结构 包含 显式 参数 构造函数
还好   bool 默认值 false 显示   this ._ hasValue     false 影响
public   MyNullable
{
        this ._ hasValue     false
public   MyNullable T   value 参 构造函数
{
this ._ hasValue     true
this ._ value     value
private   bool   hasValue
public   bool   HasValue 不为 空
{
get   {   return   hasValue  
private   T   value
public   T   Value 值
{
get
{
if   this ._ hasValue 值 访问 抛出 异常
{
throw   new   InvalidOperationException   可为 空 对象 值
return   value
public   static   implicit   operator   MyNullable T T   value
{
return   new   MyNullable T value
class   Program
{
static   void   Main string   args
{
Person   p1     new   Person
{
BeginTime     DateTime Parse 1990 07 19
Person   p2     new   Person
{
BeginTime     DateTime Parse 1893 12 26
EndTiem     DateTime Parse 1976 09 09
new   MyNullable DateTime DateTime Parse 1976 09 09
MyNullable 参 构造函数
Console WriteLine     p1 Age     岁
Console WriteLine 毛 爷爷     p2 Age     岁
Console ReadKey
View   Code
自定义 可空 类型 赋值 想要 赋值 null
编译 错误 想到 值 赋值 隐式 转换 null null 引用 类型 特定 值
加 重载
隐式 转换
public   static   implicit   operator   MyNullable T string   value
{
if   value     null
return   new   MyNullable T
throw   new   Exception 赋值 右边 字符串
编译 期间 抛出 错误 只能 null
需求 异常
可惜 美中不足   p2 EndTiem   赋值 非空 字符串 时 运行 时才 报错 系统 可空 类型 编译 期 报错 大神 有解
赋值 小小 激动 一把 特意 查 关键字   implicit   operator   小小 激动 一把 重写 赋值 重写                               运算符
先 重写 自定义 可空 类型 运算符
重写 运算符
public   static   bool   operator   MyNullable T   operand   MyNullable T   operand2
{
if   operand HasValue   &&   operand2 HasValue
{
return   true
else   if   operand HasValue   &&   operand2 HasValue
{
if   operand2 Value Equals operand Value
{
return   true
return   false
重写 运算符
public   static   bool   operator   MyNullable T   operand   MyNullable T   operand2
{
return   operand     operand2
Console WriteLine p1 EndTiem     null     p1 EndTiem     null ToString
Console WriteLine p2 EndTiem     null     p2 EndTiem     null ToString
Console WriteLine p1 EndTiem     DateTime Parse 1976 09 09     p1 EndTiem     DateTime Parse 1976 09 09 ToString
Console WriteLine p2 EndTiem     DateTime Parse 1976 09 09     p2 EndTiem     DateTime Parse 1976 09 09 ToString
p1 EndTiem     DateTime Parse 2016 06 06
p2 EndTiem     null
Console WriteLine
Console WriteLine 赋值   p1 EndTiem     DateTime Parse 2016 06 06     p2 EndTiem     null  
Console WriteLine p1 EndTiem     null     p1 EndTiem     null ToString
Console WriteLine p2 EndTiem     null     p2 EndTiem     null ToString
Console WriteLine p1 EndTiem     DateTime Parse 2016 06 06     p1 EndTiem     DateTime Parse 2016 06 06 ToString
Console WriteLine p2 EndTiem     DateTime Parse 2016 06 06     p2 EndTiem     DateTime Parse 2016 06 06 ToString
完全符合
完整 代码
using   System
using   System Collections Generic
using   System Linq
using   System Text
using   System Threading Tasks
namespace   test
{
public   class   Person
{
  summary
  出生日期
  summary
public   DateTime   BeginTime   {   get   set  
  summary
  死亡 日期
  summary
public   MyNullable DateTime   EndTiem   {   get   set     改用 MyNullable
  summary
  年龄
  summary
public   double   Age
{
get
{
if   EndTiem HasValue 挂 有值 证明 死
{
return   EndTiem Value     BeginTime Days     365
else 挂
{
return   DateTime Now     BeginTime Days     365
public   struct   MyNullable T   where   T     struct
{
错误                 结构 包含 显式 参数 构造函数
还好   bool 默认值 false 显示   this ._ hasValue     false 影响
public   MyNullable
{
        this ._ hasValue     false
public   MyNullable T   value 参 构造函数
{
this ._ hasValue     true
this ._ value     value
private   bool   hasValue
public   bool   HasValue 不为 空
{
get   {   return   hasValue  
private   T   value
public   T   Value 值
{
get
{
if   this ._ hasValue 值 访问 抛出 异常
{
throw   new   InvalidOperationException   可为 空 对象 值
return   value
隐式 转换
public   static   implicit   operator   MyNullable T T   value
{
return   new   MyNullable T value
隐式 转换
public   static   implicit   operator   MyNullable T string   value
{
if   value     null
return   new   MyNullable T
throw   new   Exception 赋值 右边 字符串
编译 期间 抛出 错误 只能 null
重写 运算符
public   static   bool   operator   MyNullable T   operand   MyNullable T   operand2
{
if   operand HasValue   &&   operand2 HasValue
{
return   true
else   if   operand HasValue   &&   operand2 HasValue
{
if   operand2 Value Equals operand Value
{
return   true
return   false
重写 运算符
public   static   bool   operator   MyNullable T   operand   MyNullable T   operand2
{
return   operand     operand2
class   Program
{
static   void   Main string   args
{
Person   p1     new   Person
{
BeginTime     DateTime Parse 1990 07 19
Person   p2     new   Person
{
BeginTime     DateTime Parse 1893 12 26
EndTiem     DateTime Parse 1976 09 09
new   MyNullable DateTime DateTime Parse 1976 09 09
MyNullable 参 构造函数
Console WriteLine     p1 Age     岁
Console WriteLine 毛 爷爷     p2 Age     岁
Console WriteLine
Console WriteLine p1 EndTiem     null     p1 EndTiem     null ToString
Console WriteLine p2 EndTiem     null     p2 EndTiem     null ToString
Console WriteLine p1 EndTiem     DateTime Parse 1976 09 09     p1 EndTiem     DateTime Parse 1976 09 09 ToString
Console WriteLine p2 EndTiem     DateTime Parse 1976 09 09     p2 EndTiem     DateTime Parse 1976 09 09 ToString
p1 EndTiem     DateTime Parse 2016 06 06
p2 EndTiem     null
Console WriteLine
Console WriteLine 赋值   p1 EndTiem     DateTime Parse 2016 06 06     p2 EndTiem     null  
Console WriteLine p1 EndTiem     null     p1 EndTiem     null ToString
Console WriteLine p2 EndTiem     null     p2 EndTiem     null ToString
Console WriteLine p1 EndTiem     DateTime Parse 2016 06 06     p1 EndTiem     DateTime Parse 2016 06 06 ToString
Console WriteLine p2 EndTiem     DateTime Parse 2016 06 06     p2 EndTiem     DateTime Parse 2016 06 06 ToString
Console ReadKey
View   Code
转换 关键字 operator explicit implicit 解析 资料 http www cnblogs com hunts archive 2007 01 17 operator explicit implicit html
玩出 花样
本文 同步 C# 基础知识 系列
一步步 开发 博客   NET 版 11 Web config 文件 读取 修改
Web config 读取
Web config 读取 属性 平时 appSettings 节点 配置
代码
  ConfigurationManager AppSettings OAuth QQ ClientId
  ConfigurationManager AppSettings OAuth QQ CallbackUrl
  ConfigurationManager AppSettings OAuth QQ ClientScrert
  ConfigurationManager AppSettings OAuth Sina ClientId
  ConfigurationManager AppSettings OAuth Sina ClientScrert
  ConfigurationManager AppSettings OAuth Sina CallbackUrl
........
简单 清晰 总 感觉 缺少 一点 面向对象 感觉 少 无所谓 几十个 百个 分类 定义
自定义 配置
customCon
邮件 配置
mail   mailPwd   mailHost   mailFrom  
QQ 登陆
oAuthQQ   OAuth QQ ClientId   OAuth QQ ClientScrert   OAuth QQ CallbackUrl haojima net hi login html  
新浪 登录
oAuthSina   OAuth Sina ClientId   OAuth Sina ClientScrert   OAuth Sina CallbackUrl haojima net hi login html  
customCon
发现   customCon   编辑器 不认 定义 如何是好 申明 自定义 标签
感觉 分类 读取 自定义 标签 值
继承 ConfigurationSection
  summary
  自定义 配置
  summary
public   class   CustomCon     ConfigurationSection
{
  summary
  邮箱 设置
  summary
ConfigurationProperty mail   IsRequired     true
public   MailElement   Mail
{
get   {   return   MailElement this mail  
  summary
  qq 登录
  summary
ConfigurationProperty oAuthQQ   IsRequired     true
public   OAuthQQElement   OAuthQQ
{
get   {   return   OAuthQQElement this oAuthQQ  
  summary
  新浪 登录
  summary
ConfigurationProperty oAuthSina   IsRequired     true
public   OAuthSinaElement   OAuthSina
{
get   {   return   OAuthSinaElement this oAuthSina  
MailElement OAuthQQElement OAuthSinaElement   定义
region   MailElement 邮箱
public   class   MailElement     ConfigurationElement
{
  summary
  发件人 密码
  summary
ConfigurationProperty mailPwd   IsRequired     true
public   string   Pwd
{
get   {   return   this mailPwd ToString  
set   {   this mailPwd     value  
  summary
  SMTP 邮件 服务器
  summary
ConfigurationProperty mailHost   IsRequired     true
public   string   Host
{
get   {   return   this mailHost ToString  
set   {   this mailHost     value  
  summary
发件人 邮箱
  summary
ConfigurationProperty mailFrom   IsRequired     true
public   string   From
{
get   {   return   this mailFrom ToString  
set   {   this mailFrom     value  
endregion
region   OAuthQQElement QQ
public   class   OAuthQQElement     ConfigurationElement
{
ConfigurationProperty OAuth QQ ClientId   IsRequired     true
public   string   ClientId
{
get   {   return   this OAuth QQ ClientId ToString  
set   {   this OAuth QQ ClientId     value  
ConfigurationProperty OAuth QQ ClientScrert   IsRequired     true
public   string   ClientScrert
{
get   {   return   this OAuth QQ ClientScrert ToString  
set   {   this OAuth QQ ClientScrert     value  
ConfigurationProperty OAuth QQ CallbackUrl   IsRequired     true
public   string   CallbackUrl
{
get   {   return   this OAuth QQ CallbackUrl ToString  
set   {   this OAuth QQ CallbackUrl     value  
endregion
region   OAuthSinaElement 新浪
public   class   OAuthSinaElement     ConfigurationElement
{
ConfigurationProperty OAuth Sina ClientId   IsRequired     true
public   string   ClientId
{
get   {   return   this OAuth Sina ClientId ToString  
set   {   this OAuth Sina ClientId     value  
ConfigurationProperty OAuth Sina ClientScrert   IsRequired     true
public   string   ClientScrert
{
get   {   return   this OAuth Sina ClientScrert ToString  
set   {   this OAuth Sina ClientScrert     value  
ConfigurationProperty OAuth Sina CallbackUrl   IsRequired     true
public   string   CallbackUrl
{
get   {   return   this OAuth Sina CallbackUrl ToString  
set   {   this OAuth Sina CallbackUrl     value  
endregion
View   Code
代码 层面 建立 config 一一对应 关联 取值
CustomCon   custom     CustomCon ConfigurationManager GetSection customCon
var   url     custom OAuthQQ CallbackUrl 获取 值
var   id     custom OAuthQQ ClientId 获取 值
甚爽 原先   appSettings   对象 感觉 配置 过多 分类 清晰
Web config 写入
Web config 写入 需求 读取 要说 写入 好多 人问 博客 系统 数据库 每次 解释 coder   first 代码生成 数据库 次数 实在 受不了 做个 引导 页面 初次 提示 设置 数据库 邮箱 这样的话 编程 基础 搭建 博客 系统 降低 门槛
第一次 启动 程序 检查 数据库 连接 引导 页面 设置 过程 不用 编辑 Web config 文件
效果图 数据 写入 Web config 文件
简单 稍微 改 代码
改成   WebConfigurationManager OpenWebConfiguration   读取 代码 编辑 忘   config Save   更新 Web config
只能 修改 自定义 节点 数据 最最 想 更新 数据库 连接 请 数据库 连接 操作
  summary
  修改 数据库 连接
  summary
  param   name key param
  param   name connectionString param
  param   name providerName param
public   static   void   SetConnectionString string   key   string   connectionString   string   providerName     System Data SqlClient
{
ConnectionStringsSection   connectionSetting     ConnectionStringsSection config GetSection connectionStrings
if   connectionSetting ConnectionStrings key     null 节点 添加
{
ConnectionStringSettings   connectionStringSettings     new   ConnectionStringSettings key   connectionString   providerName
connectionSetting ConnectionStrings Add connectionStringSettings
else 节点 修改
{
connectionSetting ConnectionStrings key ConnectionString     connectionString
connectionSetting ConnectionStrings key ProviderName     providerName
config Save
细看 代码 大同小异 自定义 类 改成   ConnectionStringsSection   net 默认 连接 对象
一步步 搭建 博客
胡说八道
说 思路 自由发挥 感谢您 阅读 希望 一点点 作用
文章 首链 http www cnblogs com zhaopei p 5677053 html
EF 知识 经验
以下内容 特别 申明 默认 EF6.0 版本 code   first 模式
推荐 MiniProfiler 插件
工欲善其事 必先利其器
EF 很大 程度 提高 开发 速度 随之 带来 性能 低下 写法 生成 不太 高效 sql
SQL   Server   Profiler 监控 执行 sql 实属 麻烦 每次 打开 过滤 清除 关闭
强烈推荐 插件 MiniProfiler 实时 监控 页面 请求 执行 sql 语句 执行 时间 简单 针对性 强
如图 介绍 请 移步
数据
新建 实体 Score 成绩 分数 表 Student 学生 表 Teacher 老师 表
给出 demo 代码 下载 链接
foreach 循环 陷进
延迟 加载
请 图 红框 StudentId 有值 Studet null code   first 设置 导航 属性 virtual 加载 延迟 加载 数据
循环 中 访问 导航 属性 异常 virtual 后会报 异常
已有 打开   Command   相关联   DataReader 关闭
解决方案
方案 设定 ConnectionString MultipleActiveResultSets true SQL   2005 版本
方案 先 读出 放置 List 中
两点 仅为 热身 说 陷阱 刚刚开始
点击 打开 MiniProfiler 工具
解决方案 Include 显示 连接 查询 手动 导入 using   System Data Entity   Include 只能 传表名 字符串
MiniProfiler 监控 瞬间 101 条 sql 条 性能 可想而知
AutoMapper 工具
Include 显示 执行 表 连接 查询 不错 查询 数据 字段 查询 字段 浪费 内存 存储空间 应用程序 数据库 数据传输 带宽
监控 sql
生成 sql 查询 字 段 少 显示 列出来 字段 StudentId StudentId 连接 查询 条件
方式 不错 有没有 更好 方案 方式 答案 肯定 屁话 表字 段 字 段 导航 属性 手动 映射 显得 好看 介绍 AutoMapper 映射
NuGet 下载 AutoMapper 导入 命名 空间   using   AutoMapper   using   AutoMapper QueryableExtensions
查询 语句 一个个 手动 映射 映射 独立 配置 CreateMap 写 Global asax 文件 分离 映射 清晰 查询 语句 细心 同学 方式 免去 主动 Include
生成 sql 些许 生成 一条 sql 正确 一条 CASE   WHEN   Extent2 Id   IS   NOT   NULL   THEN     END   AS   C1 条 语句 实际意义 这是 AutoMapper 生成 sql 理解 EF 生成
做 好处
循环 中 访问 导航 属性 执行 sql 语句
查询 语句 中太多 手动 映射 影响 代码 阅读
AutoMapper 资料
http www cnblogs com xishuai p 3712361 html
http www cnblogs com xishuai p 3700052 html
http www cnblogs com farb p AutoMapperContent html
联表 查询 统计
查询 前 100 学生 考试 类型 模拟考试 正式 考试 考试 次数 语文 平均分 学生 姓名 考试 次数 大于 等于 次 考试 类型 分类 统计
代码
代码 第一 惨 循环 执行 sql 监控
稍微 改动 101 条 sql 条
变 条
打开 查看 详细 sql 语句
发现 仅仅只是 查询 集合 考试 类型 统计 程序 拿到 数据 计算 数据库 计算 返回 浪费 数据库 查询 数据传输
连接 查询 分组 统计 SelectMany
监控 sql 简洁
SelectMany 资料
http www cnblogs com lifepoem archive 2011 11 18 2253579 html
http www cnblogs com heyuquan p Linq to Objects html
性能 提升 AsNonUnicode
监控 sql
EF 情况 生成 sql 带上 N DbFunctions AsNonUnicode 生成 sql N 发现 带上 N sql N   sql 查询 速度慢
oracle 带不带 N 查询 效率 差别 特别 sql   server 测试 发现 差别 发现 EF6 数据库 中是 nvarchar 生成 N sql oracle 数据库 测试 兴趣 同学 测试
性能 提升 AsNoTracking
生成 sql
sql 生成 一模一样 执行 时间 却是 4.8 倍 原因 仅仅只是 第一条 EF 语句 多加 AsNoTracking
AsNoTracking 干什么 跟踪 查询 查询 对象 做 修改 做 数据 集合 查询 显示 集合 修改 更新 数据库 忘记 AsNoTracking
查询 过程 做 select 映射 加 AsNoTracking db Students Where t t Name Contains 张三 select t new   t Name t Age ToList
多字段 组合 排序 字符串
查询 名字 带有 张三 学生 先 名字 排序 年龄 排序
名字 排序 年龄 排序 覆盖 ThenBy 组合 排序
不错 不错 想要 效果 不想 ThenBy 升序
生成 sql OrderBy ThenBy 降序 OrderByDescending ThenByDescending
看似 好像 完美 其实不然 情况 排序 动态 前端 页面 操作 字段 排序 后台 做
判断 有没有 感觉 SB 更好 解决方案 OrderBy 字符串
解决方案
guget 下载 System Linq Dynamic
导入 System Linq Dynamic 命名 空间
编写 OrderBy 扩展 方法
长 代码 写成
生成 sql
想要 效果 完全符合 感觉 美美 哒
传入 排序 字 段 要加 排序 关键字   asc desc
lamdba 条件 组合
情况 查询 情况
查询 name 张三   学生
查询 name 张三     age 18 学生
代码
味到 臭味 灵活 组装 Lamdba 条件
解决方案
段 代码 是从 网上 偷 链接 找 不到
代码 写成
有没有 美美 哒 一点 生成 sql 正确
EF 预热
http www cnblogs com dudu p entity framework warm up html
count 坏 Any 用法
查询 名字 张三 学生 代码 写
第一种 第二种 第三种 第一种 有人 说 count 坏 想 想 坏 三个 语句 性能
性能 之差 三百多 倍 count 确实 坏 想 人用 坏
Any 干嘛 官方 解释
反复 阅读 中文 解释 理解 早 有人 提出 疑问 实在 看不懂 MSDN   Any   解释
理解 集合 中 元素 某一 条件 any 用法
查询 教过 张三 李四 老师
代码
两种 方式 我会 习惯 写 第一种 生成 sql 执行 效率 看法 改变
效率 之差 六倍
count
奇怪 结论
导航 属性 count any 性能 区别 FirstOrDefault     null 方式 性能 最差
属性 判断 any FirstOrDefault     null 性能 区别 count 性能 差
属性 导航 属性 any 判断 稳当
透明 标识符
原因 写 逻辑 语句
写成 更好
生成 sql
第二种 方式 生成 sql 干净 性能 更好
EntityFramework Extended
推荐 插件 EntityFramework Extended 不错
亮点 批量 修改 删除 不用 EF 默认 先 做 查询 操作
官方 EF 提供 支持 EntityFramework Extended 以下几点
支持 sql   server
批量 修改 删除 时 事务 异常 回滚
联级 删除
EF SaveChanges   详见
http www cnblogs com GuZhenYin p 5482288 html
纠正 EntityFramework Extended 说 回滚 感谢 GuZhenYin 园友 指正 原谅 动手 测试
NuGet 下载 EntityFramework Extended   导入 命名 空间   using   EntityFramework Extensions  
测试代码 注释 掉 手 抛 异常 代码 更新 数据库
using   var   ctxTransaction     db Database BeginTransaction
{
try
{
db Teachers Where t     true Update t     new   Teacher   {   Age      
throw   new   Exception 手动 抛出 异常
ctxTransaction Commit 提交 事务
catch   Exception
{
ctxTransaction Rollback 回滚 事务
自定义 IQueryable 扩展 方法
整理 自定义 IQueryable 扩展
补充
First Single 区别 TOP TOP 查询 条 数据 抛出 异常 Single First 慢
补充
打包 nuget 提供 安装   Install Package   Talk Linq Extensions   nuget 搜索   Talk Linq Extensions
https github com zhaopeiym Talk wiki Talk Linq Extensions demo
结束
源码 下载 http pan baidu com s 1o8MYozw
本文 同步 C# 基础知识 系列
热心 园友 补充
一步步 开发 博客   NET 版 model   first 替换成 code   first   记录
改用 code   first
用过 code   first 想 回 model   first db   first 问 code   first model   first 当成 code   first
工作 中 code   first 越用 越 习惯 越用 越 喜欢
原因
再也 每次 生成 笨重 edmx 文件 性急
再也 不用 当心 保存 tt 文件 丢失 特性 注销 扩展 方法
再也 不用 微软 验证 插件 写 Metadata 文件
再也 不用 扩展 tt 文件 生成 实体类 写 partial 类
再也 不用 生成 实体 修改 坑爹 tt 文件 语法 代码 默认 实体 继承 父类
再也 不用 查找 edmx 文件 打不开 编辑 庞大 edmx 文件 中 找 坑爹 错误
暂时 没想到 ....
说 改 改
修改 前 实体 db   first tt 文件 生成
修改 实体 code   first 手写
实体 更新 数据库 表 结构 执行命令 Enable Migrations
The   EntityFramework   package   is   not   installed   on   project   原因 选择 默认 项目
The   project   Blogs Model   failed   to   build 原因 建 继承 DbContext 类
ok 提示 启用 迁移
执行命令 Add Migration   blogs
异常   数据库 中 获取 提供 程序 信息 时 出错   Entity   Framework   连接 字符串 正确 导致 详细信息 请 查看 内部 异常 确保 连接 字符串 正确
乖乖 字符串 链接 正确
忘记 数据 连接 上下文 构造函数 中 传入 配置文件 数据库 链接 名
public   BlogDbContext
  base HiBlogsTest
{
执行 Add Migration   blogs 出错
异常 加载 指定 元 数据 资源 百度 链接 字符串 http www cnblogs com chengxiaohui articles 2106765 html
add   name HiBlogsTest   connectionString metadata res Model1 csdl res Model1 ssdl res Model1 msl provider System Data SqlClient
provider   connection   string quot
data   source
initial   catalog HiBlogsTest
user   id sa
password 123qwe
MultipleActiveResultSets True
App EntityFramework quot   providerName System Data EntityClient  
改成 一堆 csdl ssdl msl 留个 简单 链接 干净
add   name HiBlogsTest   connectionString Data   Source Initial   Catalog HiBlogsTest User   ID sa Password 123qwe   providerName System Data SqlClient  
ok 终于 红色 字
自动 生成 blogs 文件 数据库 有表 结构
空空如也 屁 原因 BlogDbContext 上下文 中 添加 实体 告诉 程序 生成 实体 数据库
BlogDbContext 类 添加 数据 代码
public   class   BlogDbContext     DbContext
{
public   BlogDbContext
  base HiBlogsTest
{
public   DbSet BlogInfo   BlogInfos   {   get   set  
public   DbSet BlogComment   BlogComments   {   get   set  
public   DbSet BlogReadInfo   BlogReadInfos   {   get   set  
public   DbSet BlogTag   BlogTags   {   get   set  
public   DbSet BlogType   BlogTypes   {   get   set  
public   DbSet BlogUser   BlogUsers   {   get   set  
public   DbSet BlogUserInfo   BlogUserInfos   {   get   set  
执行   Add Migration   blogs   执行   update database
终于 表 数据
表 不行 主外键
修改 BlogDbContext
public   class   BlogDbContext     DbContext
{
public   BlogDbContext
  base HiBlogsTest
{
protected   override   void   OnModelCreating DbModelBuilder   modelBuilder
{
base OnModelCreating modelBuilder
var   entityBlogUser     modelBuilder Entity BlogUser
entityBlogUser HasMany p     p BlogInfos WithRequired t     t BlogUser
Map m     m MapKey BlogUserId
entityBlogUser HasRequired p     p BlogUserInfo WithRequiredPrincipal t     t BlogUser
Map m     m MapKey BlogUserId
entityBlogUser HasMany p     p BlogTags WithRequired t     t BlogUser
Map m     m MapKey BlogUserId
entityBlogUser HasMany p     p BlogTypes WithRequired t     t BlogUser
Map m     m MapKey BlogUserId
entityBlogUser HasMany p     p BlogComments WithRequired t     t BlogUser
Map m     m MapKey BlogUserId
var   entityBlogInfo     modelBuilder Entity BlogInfo
entityBlogInfo HasMany p     p BlogTags WithMany t     t BlogInfos
Map m     m ToTable BlogInfo BlogTag
entityBlogInfo HasMany p     p BlogTypes WithMany t     t BlogInfos
Map m     m ToTable BlogInfo BlogType
entityBlogInfo HasMany p     p BlogComments WithRequired t     t BlogInfo
Map m     m MapKey BlogInfoId
entityBlogInfo HasMany p     p BlogReadInfos WithRequired t     t BlogInfo
Map m     m MapKey BlogInfoId
public   DbSet BlogInfo   BlogInfos   {   get   set  
public   DbSet BlogComment   BlogComments   {   get   set  
public   DbSet BlogReadInfo   BlogReadInfos   {   get   set  
public   DbSet BlogTag   BlogTags   {   get   set  
public   DbSet BlogType   BlogTypes   {   get   set  
public   DbSet BlogUser   BlogUsers   {   get   set  
public   DbSet BlogUserInfo   BlogUserInfos   {   get   set  
View   Code
命令 Add Migration   blogs   执行   update database
错误
  FOREIGN   KEY   约束   FK dbo BlogInfo dbo BlogUser BlogUserId   引入 表   BlogInfo   导致 循环 多重 级联 路径 请 指定   ON   DELETE   NO   ACTION     ON   UPDATE   NO   ACTION 修改   FOREIGN   KEY   约束 创建 约束 请参阅 错误 消息
外键 删掉 一个个 建 终于 发现 下图 数据库 关系 图 mssql 生成
百度 约束 联级 删除 数据 做 约束 实在话 没玩过 联级 删除 需求 常用 找个 方法 禁用 可否
加 WillCascadeOnDelete false http www cnblogs com chear archive 2012 11 09 2762145 html
public   class   BlogDbContext     DbContext
{
public   BlogDbContext
  base HiBlogsTest
{
protected   override   void   OnModelCreating DbModelBuilder   modelBuilder
{
base OnModelCreating modelBuilder
var   entityBlogUser     modelBuilder Entity BlogUser
entityBlogUser HasMany p     p BlogInfos WithRequired t     t BlogUser
Map m     m MapKey BlogUserId WillCascadeOnDelete false
等效
modelBuilder Entity BlogInfo HasRequired p     p BlogUser WithMany t     t BlogInfos
BlogUser 表 BlogUserInfo 从表 建立 外键
entityBlogUser HasRequired p     p BlogUserInfo WithRequiredPrincipal t     t BlogUser
Map m     m MapKey BlogUserId WillCascadeOnDelete false
等效于 HasRequired p     WithOptional i    
BlogUserInfo 表 BlogUser 从表 建立 外键
modelBuilder Entity BlogUser HasRequired p     p BlogUserInfo WithRequiredDependent t     t BlogUser
Map m     m MapKey BlogUserId WillCascadeOnDelete false
等效于   HasOptional p     WithRequired i    
entityBlogUser HasMany p     p BlogTags WithRequired t     t BlogUser
Map m     m MapKey BlogUserId WillCascadeOnDelete false
entityBlogUser HasMany p     p BlogTypes WithRequired t     t BlogUser
Map m     m MapKey BlogUserId WillCascadeOnDelete false
entityBlogUser HasMany p     p BlogComments WithRequired t     t BlogUser
Map m     m MapKey BlogUserId WillCascadeOnDelete false
var   entityBlogInfo     modelBuilder Entity BlogInfo
entityBlogInfo HasMany p     p BlogTags WithMany t     t BlogInfos
Map m     m ToTable BlogInfo BlogTag
entityBlogInfo HasMany p     p BlogTypes WithMany t     t BlogInfos
Map m     m ToTable BlogInfo BlogType
entityBlogInfo HasMany p     p BlogComments WithRequired t     t BlogInfo
Map m     m MapKey BlogInfoId WillCascadeOnDelete false
entityBlogInfo HasMany p     p BlogReadInfos WithRequired t     t BlogInfo
Map m     m MapKey BlogInfoId WillCascadeOnDelete false
public   DbSet BlogInfo   BlogInfos   {   get   set  
public   DbSet BlogComment   BlogComments   {   get   set  
public   DbSet BlogReadInfo   BlogReadInfos   {   get   set  
public   DbSet BlogTag   BlogTags   {   get   set  
public   DbSet BlogType   BlogTypes   {   get   set  
public   DbSet BlogUser   BlogUsers   {   get   set  
public   DbSet BlogUserInfo   BlogUserInfos   {   get   set  
View   Code
命令 Add Migration   blogs   执行   update database
完美 表 结构 表 关系 代码 表名 做 改动 字段 做 少许 调整 改 东西 真不少 整整 改了 时间
回过头来 想想 先 model   first 小许 改动 db   first   FOREIGN   KEY   约束   FK dbo BlogInfo dbo BlogUser BlogUserId   引入 表   BlogInfo   导致 循环 多重 级联 路径 请 指定   ON   DELETE   NO   ACTION     ON   UPDATE   NO   ACTION 修改   FOREIGN   KEY   约束 创建 约束 请参阅 错误 消息 错误 好奇心 驱使 代码 edmx 管理 关系
惊奇 发现 不死心 数据库 蹊跷
搜噶 原来如此 model   first 生成 主外键 关系 默认 设计 联级 删除 code   first 默认设置 联级 删除
内容 胡说八道 谢谢您 阅读 希望 一点点 作用
Hi Blogs 源码 地址 http git oschina net zhaopeiym Hi Blogs
工作 实在 太慢 开源 博客 长久 更新 来回 翻 好几遍 发现 半年前 写 代码 不堪入目
仅仅只是 db   first 改成 code   first 发霉 代码 找个 时间 好好 重构 重构
首发 地址 http www cnblogs com zhaopei p 5540532 html
C# 中 Lambda 表达式 演化过程
那得 很久很久 说起 记得
懵懂 记得 从前 有个 委托 东西 高深 难懂
委托
例一
委托
理解 传递 方法 类型 传递 数字 类型 int float double 传递 方法 委托
例二
很久很久
匿名 方法
委托 接收 方法 一次性 方法 体是 非常简单
例三
写成
有没有 发现 每次 定义 委托 签名 定义 重复
很久很久
Func Action
每次 定义 委托 傻 干脆 框架 定义 用到 委托 千变万化 方法 签名 定义 得全 没关系 定义 成泛 型
先说 Func
细心 朋友 Func AddDelegate 定义 int 多出 指 返回 类型 F12 定义
Func 写法 简写 成 语法 糖 编译 注释 代码
Action
提醒 写 代码 写 delegate 想到 Func Action C# 中 Action Func 16 参数 足够
好久好久
Lambda 诞生
XX TM 亲兄弟 去掉 delegate 关键字 加 成 lambda 表达式 读作 goes   to
简化
丢掉 参数 类型 强大 VS 泛型 委托 Func 推断 参数 类型
简化
return 关键字 大括号 方法 体 单条 语句 做
接近 平时 Lambda 表达式
传入 参数 简化
平时 见得 最多 lambda 长相
长成
只能 传入 参数
方法 体 只能 一条 语句
点 lambda 平时 IEnumerable IQueryable 只能 参数
点 扩展 方法 链式 编程 解决
链式 解决 第二点
过上 幸福 生活
理解 C# 中 一图
知识 异步 Lambda
Func Student   Task bool   func     async   t  
{
await   Task Delay 100 等待 100 毫秒
return   false
结束
本文 简短 说 lambda 表达式 C# 中 一步步 演化 说 轻拍
本文 同步 C# 基础知识 系列
Linq 表达式 Lambda 表达式 喜欢
Linq 表达式 Lambda 表达式
如图
Linq 表达式 Lambda 表达式 可比性
Lambda 表达式 相关 整条 语句 称作 微软 给出 官方 命名 理解 C# 中 称为 点 标记
查询 表达式 点 标记 喜欢
标题 提问 合适 查询 表达式 点 标记 喜欢
查询 表达式
var   students1     from   t   in   db Students
where   t Name     张三
select   new   {   t Id   t Name   t Age  
点 标记
var   students2     db Students
Where t     t Name     张三
Select t     new   {   t Id   t Name   t Age  
选择 点 标记
偏向 选择 点 标记 原因 说不清 点 标记 中 Lambda 优雅 喜欢 点 标记 方式
查询 表达式 转 成 点 标记 点 标记 转 成 查询 表达式
查询 表达式 编译 点 标记 两个 语句 编译 反编译 C# 代码
生成 一模一样 代码 编译 好多 乱七八糟 代码 Where Select 关键字 点 标记
点 标记 确实 查询 表达式 优雅
例一
查询 表达式
var   students1     from   t   in   db Students
where   t Name     张三
select   t
点 标记
var   students2     db Students
Where t     t Name     张三
  select   t   这句 没卵用 废话 省 省 报错
例二
括号 包裹 取 集 更丑 一点
查询 表达式
var   students1     from   t   in   db Students
where   t Name     张三
select   t ToList
点 标记
var   students2     db Students
Where t     t Name     张三
ToList
例三 说 点 标记 转 成 查询 表达式 此例 IEnumerator
此条 点 标记 转成 查询 表达式
var   list     new   List string   {   张三   张三   张三   张三   李四   张三   李四   张三   李四  
var   students2     list
Where item   index     item     张三   &&   index        
Select item   index     new   {   item   index  
ToList
查询 表达式 Reverse
var   list     new   List string   {   张三   张三   张三   张三   李四   张三   李四   张三   李四  
var   students2     list
Where item   index     item Contains 张三
Select item   index     new   {   item   index  
Reverse 反序
ToList
ListA Distinct ToList 重
ListA Except ListB ToList 差集
ListA Union ListB ToList     并集
ListA Intersect ListB ToList 交集
查询 表达式
好像 查询 表达式 一文不值 no
几种 情况 选择 查询 表达式
例一 本例 Linq   to   Object     建主外键 EF 查询
点 标记 中 Join 四个 参数 表达式 晕
var   list1     new   Dictionary string   string   {   {     张三     {     李四     {     张三     {     张三    
var   list2     new   Dictionary string   string   {   {     张三     {     李四     {     李四     {     张三    
查询 表达式
var   obj1     from   l1   in   list1
join   l2   in   list2
on   l1 Key   equals   l2 Key
select   new   {   l1   l2  
点 标记
var   obj     list1 Join list2   l1     l1 Key   l2     l2 Key   l1   l2     new   {   l1   l2  
例二
点 标记 区分 OrderBy ThenBy 有没有 麻烦
查询 表达式
var   obj1     from   l1   in   list1
join   l2   in   list2
on   l1 Key   equals   l2 Key
orderby   l1 Key   l2 Key   descending
select   new   {   l1   l2  
点 标记
var   obj     list1 Join list2   l1     l1 Key   l2     l2 Key   l1   l2     new   {   l1   l2  
OrderBy li     li l1 Key
ThenByDescending li     li l2 Key
Select t     new   {   t l1   t l2  
总 查询 表达式 照顾 写惯 sql 程序员
联接 查询 内联 左联 交叉 联
联接 查询 查询 表达式 合适 说
写 内联 左联 交叉 联 查询 表达式 点 标记 代码 目的 做个 备忘
内联
左联
交叉 联
联接 查询 EF 建好 主外键 点 标记 爽爽
结束
本文 改变 习惯 否定 观点 仅仅只是 表达 对点 标记 查询 表达式 些许 理解
查询 表达式 点 标记 决定性 作用 团队 习惯 规范
想 说 说 有人 跳出
人会 反感 java C# 底层 语法 简易 中学 知识 喜欢   谁谁谁 学 工资
昨天 明天
本文 同步 C# 基础知识 系列
